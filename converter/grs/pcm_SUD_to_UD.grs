%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "SUD_to_UD.grs"

strat pcm_main {
  Seq (
    Onf(pcm_pre),
    u_main,
    pcm_post.main,
  )
}


package pcm_pre {

  rule subsem {
    pattern { e:M -[subsem=*]-> N }
    commands { del_feat e.subsem }
  }

  % A few token have POS in SUD which are not compatible with validation constraints.
  rule na {
    pattern { X[lemma=na, upos = PART] }
    commands  { X.upos=AUX }
  }

  rule its {
    pattern { X[lemma="it's"|"dat's", upos = PART] }
    commands  { X.upos=VERB }
  }

  rule be {
    pattern { X[lemma=be, upos = VERB] ; X -[1=comp,2=pred]-> Y }
    commands  { X.upos=AUX }
  }


  rule comp_pred_agent {
    pattern { N -[comp:pred]-> N1; e: N -[comp:pred@agent]-> N2; }
    commands { del_edge e;  add_edge N -[comp:obl@agent]-> N2; }
  }


  % change a scraped "DET" into "PRON"
  rule scrap_det {
    pattern { e: N -[1<>root, deep=scrap]-> M; M [upos=DET|PART, lemma <> na] }
    commands {
      del_feat e.deep;
      M.ScrapPos = M.upos;
      M.upos=PRON;
      M.Scrap=Yes;
    }
  }

  % change a scraped "SCONJ" into "VERB"
  rule scrap_sconj {
    pattern { e: N -[1<>root, deep=scrap]-> M; M [upos=SCONJ] }
    commands {
      del_feat e.deep;
      M.ScrapPos = M.upos;
      M.upos=VERB;
      M.Scrap=Yes;
    }
  }

  % Macrosyntax tokens are annotated with `upos=PUNCT` and with relation `punct` in SUD.
  % The conversion to UD builds invalid UD structures (non projectivity).
  % We change macrosyntax annotations with `upos=X` and relation `unk`
  rule PUNCT_to_X {
    pattern { e: N -[punct]-> P; P [upos=PUNCT]  }
    commands { 
      e.1 = unk;
      P.upos=X;
    }
  }
}

package pcm_post {
  
  package post {
    rule cc_with_children {
      pattern { N1 -[cc]-> N2; e: N2 -[^fixed]-> N3; }
      commands {
        add_edge f: N1 -> N3;
        f.label = e.label;
        del_edge e
      }
    }

    rule case_with_children {
      pattern { N1 -[case]-> N2; e: N2 -[^fixed|reparandum|conj]-> N3; }
      commands {
        add_edge f: N1 -> N3;
        f.label = e.label;
        del_edge e
      }
    }

    rule compound_aux {
      pattern { e:N1 -[1=compound]-> N2; N2 [upos=AUX] }
      commands { del_edge e; add_edge N1 -[dep]-> N2 }
    }
  }


  package last_errors {
    rule ENU_37_Dmoris-Restaurant_MG__21 {
      pattern {
        N1 [form="as"]; N2 [form="if"];  N3 [form="}"]; N4 [form="sey"]; N1 < N2; N2 < N3; N3 < N4;
        e: N1 -[dep:fixed]-> N4;
        f: N0 -> N3;
      }
      commands {
        del_edge e; add_edge N1 -[fixed]-> N4;
        del_edge f; add_edge N1 -[fixed]-> N3;
      }
    }

    rule WAZL_15_MC-Abi_MG__93 {
      pattern { e:GOV -[orphan]-> DEP; DEP [upos=DET] }
      commands { del_edge e; add_edge GOV -[det]-> DEP }
    }
    
    rule aclposs {
      pattern { a: H -[acl:poss]-> M; r: M -[reparandum]-> N; }
      commands { 
        del_edge a; add_edge H -[nmod:poss]-> N; 
        shift_out M =[dep]=> N;
        del_edge r; add_edge N -[reparandum]-> M; 
      }
    }
  }

  package remove_ext {
    rule nummod {
      pattern { e:N1 -[1=nummod, 2=*]-> N2; }
      commands { del_feat e.2 }
    }

    rule periph_emph {
      pattern { e:N1 -[2=periph|emph]-> N2; }
      commands { del_feat e.2 }
    }

    rule dep_fixed {
      pattern { e:N1 -[dep:fixed]-> N2; }
      commands { del_feat e.2 }
    }

    rule cop_agent {
      pattern { e:N1 -[cop:agent]-> N2; }
      commands { del_feat e.2 }
    }
  }

  rule remove_feat {
    pattern { N[Lang=yo, PartType] }
    commands { del_feat N.PartType }
  }

  rule scrap {
    pattern { N [ScrapPos] }
    commands { N.upos=N.ScrapPos; del_feat N.ScrapPos }
  }

  rule lang_not_ud {
    pattern { N[Lang=hau|ig] }
    commands { del_feat N.Lang }
  }

  package dep_comp {
    rule det {
      pattern { e:N -[dep:comp]-> M; N[ExtPos=VERB/upos=VERB]; M[upos=DET|PRON] }
      commands { del_edge e; add_edge N -[obj]-> M; }
    }

    rule adp {
      pattern { e:N -[dep:comp]-> M; N[upos=VERB]; M[upos=ADP] }
      commands { del_edge e; add_edge N -[obl:arg]-> M; }
    }

    rule adp_case {
      pattern { e:N -[dep:comp]-> M; N[upos<>VERB]; M[upos=ADP] }
      commands { del_edge e; add_edge N -[case]-> M; }
    }

    rule ccomp {
      pattern { e:N -[dep:comp]-> M; N[]; M[upos=SCONJ] }
      commands { del_edge e; add_edge N -[ccomp]-> M; }
    }
  }

  rule double_subj {
    pattern { 
      e1: N -[1=nsubj|csubj]-> N1; 
      N -[1=nsubj|csubj]-> N2;
      N1 << N2;
    }
    without { e1.2 = "outer" }
    commands { e1.2 = "outer" }
  }

  strat main {
    Seq (
      Onf (post),
      Onf (last_errors),
      Onf (remove_ext),
      Onf (remove_feat),
      Onf (scrap),
      Onf (lang_not_ud),
      Onf (dep_comp),
      Onf (double_subj),
    )
  }

  
  
}
