%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "common.grs"

% Remove all EUD specific information
package eud_to_ud {
  rule deep { % remove add enhanced relations
    pattern { e:N -[re"E:.*"]-> M }
    commands { del_edge e}
  }

  rule empty { % remove empty nodes
    pattern { N [_UD_empty=Yes] }
    commands { del_node N }
  }
}

rule norm_aux {
  pattern { N -[1=aux|cop]-> M; M[upos <> AUX] }
  commands { M.upos = AUX }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Move the dependents of a conjunction from the left conjunct to the right conjunct. Dependencies CONJ, DISCOURSE, PARATAXIS and PUNCT are not moved.
package minimize_conj_dep {
  rule minimize {
    pattern {
      C1 -[conj]-> C2;
      e:C1 -[^conj|discourse|parataxis|punct]-> D; C2 << D}
    without { C1 -[conj]-> C; C2 << C }
    commands { add_edge e:C2 -> D; del_edge e }
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% When several dependents compete for replacing the same head, the rule of starting with the closest dependent does not work in the cases of extraposition of the predicate.
% Ex: fr-ud-test_00067-  ... ce que nous avons été ...
% Ex: fr-ud-train_00086- ... quelle que soit la nature de ses pratiques, ...
% The rule that works in all cases is based on an order between types of dependencies that are subject to head change.
%The order chosen below is the following:
% (1) case < cop ;
% (2) cop < aux:caus;
% (3) aux:caus < aux(other), aux:pass < aux(other),  cop < aux(other);
% (4) aux:caus < mark, aux:pass < mark, aux(other) < mark, case < mark, cop < mark;
% (5);, aux(other) <> aux(other), case <> case, mark <> mark; the order is determined by the order of proximity with respect the head
package head_reverse {
  rule aux {
    pattern {e:H -[1=aux,!deep]-> AUX}
    without { H -[aux:pass|aux:caus]-> AUX}
    without { H -[1=aux, 2=pass|caus, !deep]-> AUX1} % Application of rule (3). It is useless to prevent CASE relations because there is no CASE relation without a COP relation.
    without { H -[1=cop, !deep]-> AUX1} % Application of rule (3). It is useless to prevent CASE relations because there is no CASE relation without a COP relation.
    without { H -[1=aux, !deep]-> AUX1; AUX << AUX1 ; AUX1 << H}% There is no other AUX dependent between the head and the AUX dependent (point (5)).
    without { H -[1=aux, !deep]-> AUX1; AUX >> AUX1 ; AUX1 >> H}% There is no other AUX dependent between the head and the AUX dependent (point (5)).
    without {AUX -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:AUX -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> AUX;
      shift_out H =[aux]=> AUX;
      shift_out H =[1=aux,2<>caus|pass,!deep]=> AUX;
      shift_out H =[1=mark,!deep]=> AUX;
      shift_out H =[1=advcl|advmod|cc|csubj|dislocated|expl|nsubj|parataxis|punct|root]=> AUX;
      shift_out H =[1=obl,2=mod]=> AUX
    }
  }

  rule auxcaus {
    pattern {e:H -[1=aux, 2=caus,!deep]-> AUX}
    without { H -[1=cop,!deep]-> D}% Application of rule (2).
    without {AUX -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:AUX -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> AUX;
      shift_out H =[1=aux|mark,!deep]=> AUX;
      shift_out H =[2=agent]=> AUX;
      shift_out H =[1=advcl|advmod|cc|csubj|dislocated|nsubj|parataxis|punct|root]=> AUX;
      shift_out H =[1=obl,2=mod]=> AUX
    }
  }

  rule auxpass {
    pattern {e:H -[1=aux, 2=pass,!deep]-> AUX}
    without {AUX -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:AUX -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> AUX;
      shift_out H =[1=aux|mark,!deep]=> AUX;
      shift_out H =[1=advcl|advmod|cc|csubj|dislocated|nsubj|parataxis|punct|root|expl]=> AUX;
      shift_out H =[1=obl,2=mod]=> AUX
    }
  }

  rule case{
    pattern { e:H-[1=case,!deep]->D}
    without { H-[1=case,!deep]->D1; D << D1 ; D1 << H}% There is no other CASE dependent between the head and the D dependent (point (5)).
    without { H-[1=case,!deep]->D1; D >> D1 ; D1 >> H}% There is no other CASE dependent between the head and the D dependent (point (5)).
    without { H -[punct]-> P; D << P; P << H}
    without { D -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:D -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> D;
      shift_out H =[1=aux|case|cop|mark,!deep]=> D;
      shift_out H =[1=advcl|cc|csubj|nsubj|punct|root]=> D;
      shift_out H =[1=expl]=> D;
      shift_out H =[1=obl,2=mod]=> D
    }
  }

  rule case_punct{
    pattern {
      e:H-[1=case,!deep]->D;
      H -[punct]-> P;  D << P; P << H}
    without { H-[1=case,!deep]->D1; D << D1 ; D1 << H}% There is no other CASE dependent between the head and the D dependent (point (5)).
    without { H-[1=case,!deep]->D1; D >> D1 ; D1 >> H}% There is no other CASE dependent between the head and the D dependent (point (5)).
    without { D -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:D -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> D;
      shift_out H =[1=aux|case|cop|mark,!deep]=> D;
      shift_out H =[1=advcl|cc|csubj|nsubj|punct|root]=> D;
      shift_out H =[1=obl,2=mod]=> D
    }
  }

  rule cop {
    pattern {e:H -[1=cop,!deep]-> AUX}
    without { H -[1=case,!deep]-> *}% Application of rule (1).
    without {AUX -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:AUX -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> AUX;
      shift_out H =[1=aux|mark,!deep]=> AUX;
      shift_out H =[1=advcl|advmod|cc|csubj|dislocated|expl|nsubj|parataxis|punct|root]=> AUX;
      shift_out H =[1=obl,2=mod]=> AUX
    }
  }

  rule mark{
    pattern {e:H -[1=mark,!deep]-> D}
    without { H -[1=aux, 2=caus|pass,!deep]-> *}% Application of rule (4).
    without { H -[1=aux|case,!deep]-> *}% Application of rule (4).
    without { H -[1=cop,!deep]-> *}% Application of rule (4).
    without { H-[1=mark,!deep]->D1; D << D1 ; D1 << H}% There is no other COP or MARK dependent between the head and the D dependent (point (5)).
    without { H-[1=mark,!deep]->D1; D >> D1 ; D1 >> H}% There is no other COP or MARK dependent between the head and the D dependent (point (5)).
    without { H -[punct]-> P; D << P; P << H}
    without { D -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:D -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> D;
      shift_out H =[1=mark,!deep]=> D;
      shift_out H =[1=cc|punct|root]=> D;
    }
  }

  rule mark_punct{
    pattern {
      e:H-[1=mark,!deep]->D;
      H -[punct]-> P; D << P; P << H}
    without { H -[1=aux, 2=caus|pass,!deep]-> *}% Application of rule (4).
    without { H -[1=aux|case,!deep]-> *}% Application of rule (4).
    without { H -[1=cop,!deep]-> *}% Application of rule (4).
    without { H-[1=cop|mark,!deep]->D1; D << D1 ; D1 << H}% There is no other COP or MARK dependent between the head and the D dependent (point (5)).
    without { H-[1=cop|mark,!deep]->D1; D >> D1 ; D1 >> H}% There is no other COP or MARK dependent between the head and the D dependent (point (5)).
    without { D -[deep=reversed]-> H}
    commands {
      e.deep=reversed;
      add_edge e:D -> H;
      del_edge e;
      shift_in H =[^TITLE|MWE]=> D;
      shift_out H =[1=mark,!deep]=> D;
      shift_out H =[1=cc|punct|root]=> D;
    }
  }

% Je suis obligé d'ajouter cette règle car dans les règles de changement de tête, la commande del_edge e ne fonctionne pas. Par ailleurs, la modification de l'étiquette par ajout de deep=reveresed n'est pas prise en compte dans la copie d'étiquette.
  rule del_initial_rel{
    pattern{ e1:H -[deep=reversed]-> D; e2:D-> H}
    commands{del_edge e1; e2.deep=reversed}
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In head changes, some dependents did not rise wrongly and it is necessary to correct it.
package gov_rise{

% In a coordination, the head V1 of the second conjunct is a verb and the head V1 of the first conjunct depends on an auxiliary AUX, which has the same form as V2. The relation CONJ must raise from V1 to AUX.
  rule conj_aux_rise{
    pattern{
      AUX -[1=aux]-> V1;
      e: V1 -[conj]-> V2; V2[VerbForm];
      AUX.VerbForm = V2.VerbForm
    }
    commands{del_edge e; add_edge AUX -[conj]-> V2}
  }

% In a coordination, the head PREP2 of the second conjunct is a preposition and the head C of the first conjunct depends on another preposition PREP1. The relation CONJ must raise from C to PREP1.
  rule conj_case_rise{
    pattern{
      PREP1[upos=ADP]; PREP1 -[1=case]-> C;
      e: C -[conj]-> PREP2; PREP2[upos=ADP]
    }
    commands{del_edge e; add_edge PREP1 -[conj]-> PREP2}
  }

% In a coordination, the head CS2 of the second conjunct is a subordination conjunction and the head C of the first conjunct depends on another subordination conjunction CS1. The relation CONJ must raise from C to CS1.
  rule conj_mark_rise{
    pattern{
      CS1[upos=SCONJ]; CS1 -[1=mark]-> C;
      e: C -[conj]-> CS2; CS2[upos=SCONJ]
    }
    commands{del_edge e; add_edge CS1 -[conj]-> CS2}
  }

% With a left-headed relation H -> D, a dependant of D on the left of a type that may be modifier is raised to H.
  rule left_raise{
    pattern {
      H -[1=case|comp|mark]-> D; H << D; D1 << H;
      e:D -[1=acl|advcl|advmod|amod|nmod|obl]-> D1; D1[upos=ADP|ADV|NUM|SCONJ|SYM]
    }
    commands {add_edge e: H -> D1; del_edge e}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% UD sub-relations  are renamed as SUD sub-relations.
package sub_relations {
  rule comp {
    pattern { e:H -[advcl:cleft|ccomp:obj|ccomp:obl]-> D; }
    commands {e.1=comp}
  }

% In an impersonal active construction, the deep subject, which is a NSUBJ or CSUBJ dependent in UD, becomes a direct object in SUD with the deep extension expl.
% Ex: Il arrive deux personnes. - Il m'arrive de faire des erreurs.
  rule comp_obj_expl {
    pattern { e:H -[csubj:expl|nsubj:expl]-> D; }
    commands {e.1=comp; e.2=obj; e.deep=expl}
  }

% In an impersonal passive construction, the deep passive subject, which is a NSUBJ:PASS or CSUBJ:PASS dependent in UD, becomes a direct object in SUD with the deep extension expl.
% Ex: Il a été vendu une grande maison aujourd'hui - Il s'est vendu une grande maison aujourd'hui - Il est prévu de continuer. - Il se dit que tu viendras.
  rule comp_obj_expl_pass {
    pattern {
      e:H -[1=csubj|nsubj, 2=pass]-> D;
      H -[expl:subj]-> S
    }
    without { H -[comp@pass]-> * }
    commands { del_edge e; add_edge H -[comp:obj@pass]-> D; }
  }

  rule comp_obj {
    pattern {
      e:H -[1=csubj|nsubj, 2=pass]-> D;
      H -[expl:subj]-> S;
      H -[comp@pass]-> *;
    }
    commands { del_edge e; add_edge H -[comp:obj]-> D; }
  }

% expl:pass ==> comp@pass
  rule comp_pass {
    pattern {
      e: H -[expl:pass]-> D
    }
    commands {
      del_edge e;
      add_edge H -[comp@pass]-> D
    }
  }

  rule comp_obl {
    pattern { e:H -[1=obl, 2=arg]-> D; }
    commands {e.1=comp; e.2=obl}
  }

% An expletive complement, which is an EXPL:COMP dependent in UD, becomes a COMP@FIXED in SUD (see discussion https://gitlab.inria.fr/grew/SUD/issues/14)
% Ex: Les gens s'enfuient - Il s'agit d'un accident. - Les voitures se vendent bien. - Il s'est vendu une grande maison aujourd'hui. -  Il se dit que tu viendras.
  rule comp_fixed {
    pattern { e:H -[expl:comp]-> D; }
    commands {e.1=comp; e.deep=fixed; del_feat e.2}
  }

  rule mod {
    pattern { e:H -[obl:mod]-> D; }
    commands {e.1=mod; del_feat e.2}
  }

% In an impersonal construction, the impersonal subject, which is an EXPL dependent in UD, becomes an  explicit subject in SUD with the deep extension expl.
% Ex: Il arrive deux personnes. - Il faut un bilan. - Il s'agit d'une erreur. - Il a été vendu une grande maison. - il se dit que tu viendras.
  rule subj_expl {
    pattern { e:H -[expl:subj]-> D; }
    without { H -[nsubj:pass|csubj:pass]-> * } % ensure to apply after [comp_obj_expl_pass] if needed
    commands {e.1=subj;e.deep=expl; del_feat e.2}
  }

  rule other_expl {
    pattern { e:H -[1=expl, 2<>subj|comp|pass]-> D; }
    commands {
      del_edge e;
      add_edge H -[unk@expl]-> D;
    }
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% UD extensions of relations are transformed into deep extensions of SUD relations and deep extensions "reversed" are deleted.
% Examples of cop extensions: cop:locat in UD_Polish-LFG and cop:own in UD_Finnish-* and UD_Karelian-KKPP
package rel_extensions {
% When a relation with an extension is different from COMP, its extension is transformed into a deep extension.
  rule change_ext{
    pattern{e: H -[1=*,2=*]-> D}
    without{ H -[1=comp|subj]-> D}
    commands{ add_edge H -[1=e.1,deep=e.2]-> D; del_edge e}
  }

% When a relation has a deep=reversed extension, this extension is deleted.
  rule del_reversed{
    pattern{e: H -[deep=reversed]-> D}
    commands{del_feat e.deep}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% UD relations are renamed as SUD relations or sub-relations.
% Rem: the order of the rules follows the alphabetic order of the names of the resulting relations.
package relations {

% comp:aux
%=========
  rule comp_aux {
    pattern { e:H -[1=aux]-> D; }
    commands { e.1=comp;e.2=aux }
  }

%comp:obj
%=========
  rule comp_obj {
    pattern { e:H -[1=case|mark|obj]-> D; }
    commands { e.1=comp;e.2=obj }
  }

  rule comp_obj_agent {
    pattern { e:H -[1=nsubj|csubj]-> D; H -[subj@expl]-> * }
    without { H -[comp@pass]-> * }
    commands { del_edge e; add_edge H -[comp:obj@agent]-> D }
  }

  rule comp_obj_2 {
    pattern { e:H -[1=nsubj|csubj]-> D; H -[subj@expl]-> *; H -[comp@pass]-> * }
    commands { del_edge e; add_edge H -[comp:obj]-> D }
  }

% We make the assumption that a clausal complement that is not introduced with an adposition is a direct object.
  rule comp_obj_ccomp {
    pattern { e:H -[1=ccomp]-> D; D[upos <> ADP]; }
    commands {e.1=comp;e.2=obj}
  }

  rule comp_obj_x {
    pattern { e:H -[1=xcomp]-> D;D[upos=AUX|VERB,VerbForm=Inf] }
    commands {e.1=comp;e.2=obj;e.deep=x}
  }

% comp:obl
%=========
  rule comp_obl_ccomp {
    pattern { e:H -[1=ccomp]-> D; D[upos = ADP]; }
    commands {e.1=comp;e.2=obl}
  }

  rule comp_obl {
    pattern { e:H -[1=iobj]-> D; }
    commands {e.1=comp;e.2=obl}
  }

  rule comp_oblx {
    pattern { e:H -[1=xcomp]-> D; D[upos=ADP]}
    commands {e.1=comp;e.2=obl;e.deep=x}
  }

  rule comp_obl_agent {
    pattern { e:H -[1=obl,deep=agent]-> D }
    commands {e.1=comp;e.2=obl;e.deep=agent}
  }

% comp:pred
%==========
% A direct argument with the control of its subject is considered  as a predicative complement in SUD.
  rule comp_pred {
    pattern { e:H -[1=xcomp]-> D; D[upos<>ADP]}
    without{D[upos=AUX|VERB,VerbForm=Inf] }
    commands {e.1=comp;e.2=pred}
  }

  rule comp_pred_cop {
    pattern { e:H -[1=cop]-> D; }
    commands {e.1=comp;e.2=pred}
  }

% mod
%====
% This rule is too strong for nummod, because in many languages, the relation is DET when D precedes H.
  rule mod {
    pattern { e:H -[1=advcl|advmod|amod|nummod]-> D; }
    commands {e.1=mod}
  }

% An ACL or NMOD complement of a noun that is not introduced with an adposition or a conjunction is a modifier.
  rule mod_noun {
    pattern { e:H -[1=acl|nmod]-> D}
    without{ D[upos=ADP|SCONJ]}
    commands {e.1=mod}
  }

% subj
%=====
  rule subj {
    pattern { e:H -[1=nsubj|csubj]-> D}
    without { H -[subj@expl]-> * } % if so: nsubj becomes comp:obj@agent, see rule [comp_obj_agent]
    commands {e.1=subj}
  }

% udep
%=====
% An ACL or NMOD complement of a noun that is introduced with an adposition or a conjunction is a modifier or an argument.
  rule udep {
    pattern { e:H -[1=acl|nmod]-> D; D[upos=ADP|SCONJ]}
    commands {e.1=udep}
  }

% TODO: replace next to rules by "without { e.deep=agent }"
  rule udep_obl1 {
    pattern { e:H -[1=obl, !deep]-> D}
    commands {e.1=udep}
  }
  rule udep_obl2 {
    pattern { e:H -[1=obl, deep<>agent]-> D}
    commands {e.1=udep}
  }

% unk
%=====
  rule unk {
    pattern { e:H -[1=dep]-> D; }
    commands {e.1=unk}
  }

  rule unk_expl {
    pattern { e:H -[expl]-> D; }
    commands {
      del_edge e;
      add_edge H -[unk@expl]-> D;
    }
  }

  rule unk_fixed {
    pattern { e:H -[fixed]-> D; }
    commands {e.1=unk; e.deep=fixed}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependencies of type CONJ, FIXED and FLAT:NAME grouped into a bouquet are reorganized into a chain.
package chained_relations {
  rule conj {
    pattern {H -[conj]-> D1;e: H -[conj]-> D2;D1 << D2}
    without {H -[conj]-> D;D1 << D; D << D2}
    without {H -[conj]-> D;D2 << D}
    commands {del_edge e;add_edge D1 -[conj]-> D2}
  }

  rule fixed {
    pattern {H -[unk@fixed]-> D1;e: H -[unk@fixed]-> D2;D1 << D2}
    without {H -[unk@fixed]-> D;D1 << D; D << D2}
    without {H -[unk@fixed]-> D;D2 << D;}
    commands {del_edge e;add_edge D1 -[unk@fixed]-> D2}
  }

  rule flat_name {
    pattern {H -[flat:name]-> D1;e: H -[flat:name]-> D2;D1 << D2}
    without {H -[flat:name]-> D;D1 << D; D << D2}
    without {H -[flat:name]-> D;D2 << D}
    commands {del_edge e;add_edge D1 -[flat:name]-> D2}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% For the internal elements of MWE, feature INMWE=Yes is replaced with the deep extension fixed on the incoming relation.
rule add_deep_fixed{
  pattern { e:H -> D;D[_MISC_INMWE=Yes] }
  without{ H -[deep=fixed]-> D }
  commands {e.deep=fixed; del_feat D._MISC_INMWE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat main {
  Seq (
    Onf (eud_to_ud),
    ext_features_to_nodes, % Change all EXTPOS to a new node
%    Onf (minimize_conj_dep),
    Onf (head_reverse),
    Onf (gov_rise),% Package GOV_RISE must follow package HEAD_REVERSE because it corrects some wrong consequences of head changes.
    Onf (sub_relations), % Package SUB_RELATIONS must precede package REL_EXTENSIONS because this package swat extensions on level 2.
    Onf (rel_extensions),
    Onf (relations), % Package RELATIONS must follow package GOV_RISE because this package entails the change of category for the source and the target of some relations.
    Onf (chained_relations),% Package CHAINED_RELATIONS must follow package GOV_RISE because it can entail a wrong coordination between two elements because of errors in head changes (UD_French-GS: fr-ud-dev_00131).
    ext_nodes_to_features, % Change all new nodes to EXTPOS
    Onf(add_deep_fixed), % in SUD, INMWE becomes @fixed
  )
}
