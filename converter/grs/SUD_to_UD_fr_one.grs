%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The "irregular_expr.grs" file includes packages applying a specific treatment to idioms, titles and converted words. What they have in common is the fact that their syntactic behaviour towards the outside world is not regular.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_edges] turns all features InIdiom (resp. InTitle) into a edge IDIOM (resp. TITLE) from the head to internal nodes of irregular expressions.
package add_edges {
  rule init_idiom {
    pattern { H [PhraseType=Idiom]; H-> N; N[InIdiom=Yes] }
    commands { del_feat N.InIdiom; add_edge H -[IDIOM]-> N }
  }

  rule iter_idiom {
    pattern { H -[IDIOM]-> M; M -> N; N[InIdiom=Yes] }
    commands { del_feat N.InIdiom; add_edge H -[IDIOM]-> N }
  }

  rule init_title {
    pattern { H [PhraseType=Title]; H-> N; N[InTitle=Yes] }
    commands { del_feat N.InTitle; add_edge H -[TITLE]-> N }
  }

  rule iter_title {
    pattern { H -[TITLE]-> M; M -> N; N[InTitle=Yes] }
    commands { del_feat N.InTitle; add_edge H -[TITLE]-> N }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_nodes] insert a new node for each Idiom/Title/Conv expression.
% The new node is linked to the head with the HEAD relation and to other elements by a IDIOM/TITLE relation.
package add_nodes {
  rule idiom {
    pattern{ H [ExtPos,PhraseType=Idiom] }
    without{H[upos=AUX|VERB, VerbForm, ExtPos=VERB]}
    without{H[ExtPos=VERB]; H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Type = H.PhraseType; del_feat H.PhraseType;
    }
  }

  rule idiom_verb {
    pattern{ H [upos=AUX|VERB, VerbForm,ExtPos=VERB,PhraseType=Idiom] }
    without{H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Type = H.PhraseType; del_feat H.PhraseType;
      I.VerbForm = H.VerbForm
    }
  }

  rule idiom_cop {
    pattern{
      H [ExtPos=VERB,PhraseType=Idiom];
      e:H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      del_edge e; add_edge I -[IDIOM]-> AUX;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Type = H.PhraseType; del_feat H.PhraseType;
      I.VerbForm = AUX.VerbForm
    }
  }

  rule title {
    pattern{ H [ExtPos,PhraseType=Title] }
    without{ * -[expr]-> H }
    commands{
      add_node T :< H; add_edge T -[TITLE]-> H; add_edge T -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> T;
      shift_out H =[TITLE]=> T;
      T.upos = H.ExtPos; del_feat H.ExtPos;
      T.Type = H.PhraseType; del_feat H.PhraseType;
    }
  }

  rule conv {
    pattern{ H [ExtPos,!PhraseType] }
    without{ * -[HEAD]-> H }
    commands{
      add_node C :< H; add_edge C -[CONV]-> H; add_edge C -[HEAD]-> H;
      shift H =[^IDIOM|TITLE]=> C;
      C.upos = H.ExtPos; del_feat H.ExtPos;
      C.lemma = H.lemma
    }
  }

  % When an idiom is included in a title, the new node must receive a TITLE relation
  rule mwe_in_title {
    pattern { E -[HEAD]-> N; T -[TITLE]-> N; }
    without { T -[TITLE]-> E; }
    commands { add_edge T -[TITLE]-> E; }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [ext_dep] move dependencies external to the idiom, title, conv expresion, on the new node.
package ext_dep {
  rule idiom {
    pattern { H -[IDIOM]-> N; e: N -> M}
    without { H -[IDIOM]-> M; }
    without{ * -[IDIOM]-> M}
    commands {
      add_edge f:H->M; f.label = e.label;
      del_edge e;
    }
  }

  rule title {
    pattern { H -[TITLE]-> N; e: N -> M;}
    without { H -[TITLE]-> M; }
     without{ * -[TITLE]-> M}
   commands {
     add_edge f:H->M; f.label = e.label;
     del_edge e;
   }
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 3 previous packages into one strategy.
strat specific_expr_init {
  Seq (
    Onf(add_edges),
    Onf(add_nodes),
    Onf(ext_dep),
  )
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% replace edges IDIOM, TITLE by features
package del_edges {
  rule idiom_head {
    pattern { I[Type]; I -[HEAD]-> H; e:I -[IDIOM]-> H; }
    commands {
      del_edge e;
      H.ExtPos = I.upos;
      H.PhraseType = I.Type;
    }
  }

  rule idiom {
    pattern { e:I -[IDIOM]-> H }
    without { I -[HEAD]-> H }
    commands {
      del_edge e;
      H.InIdiom = Yes;
    }
  }

  rule title_head {
    pattern { T -[HEAD]-> H; e:T -[TITLE]-> H }
    commands {
      del_edge e;
      H.ExtPos = T.upos;
      H.PhraseType = T.Type;
    }
  }

  rule title {
    pattern { e:T -[TITLE]-> H }
    without { T -[HEAD]-> H }
    without{T -[HEAD]-> H1; H1 -[HEAD]-> H; H1[Type=Idiom]}
    commands {
      del_edge e;
      H.InTitle = Yes;
    }
  }

%The title head is also an idiom head
  rule title_idiom {
    pattern { e:T -[TITLE]-> H;T -[HEAD]-> H1; H1 -[HEAD]-> H; H[Type=Idiom]  }
    without { T -[HEAD]-> H }
    commands {
      del_edge e;
    }
  }
  rule conv_head {
    pattern { C -[HEAD]-> H; e:C -[CONV]-> H }
    commands {
      del_edge e;
      H.ExtPos = C.upos;
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% remove nodes
package del_nodes {
  rule del_specif_expr{
    pattern{ N[!Shared];e: N -[HEAD]-> H }
    commands{del_edge e; shift N ==> H;del_node N}
  }

  rule del_shared_specif_expr_{
    pattern{ N[Shared=Yes]; e: N -[HEAD]-> H }
    commands{del_edge e; shift N ==> H;del_node N; H.Shared=Yes}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 3 previous packages into one strategy.
strat specific_expr_close {
  Seq (
    Onf(del_edges),
    Onf(del_nodes),
  )
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependencies of coordinations to their right  are marked in SUD with feature Shared=Yes and they are attached at the rightmost conjunct. In UD, they are attached at the head of the coordination and feature  Shared=Yes is useless.
package shared {
% The shared dependent is directly attached at the head of the last conjunct.
  rule move_relation {
    pattern {
      N1 -[1=conj]-> N2;
      e: N2 -> D; D[Shared=Yes]}
  %  without{ N2 -[orphan]-> D; H -[^ conj]-> N1} %Ex : SUD_FRENCH-GSD fr-ud-train_13715
    commands {
      add_edge f: N1 -> D; f.label = e.label;
      del_edge e
    }
  }

% The shared dependent is attached at the head of the last conjunct via a COMP:OBJ relation.
% Cex: fr-ud-train_13095 - sur 165 patients traités pour une borréliose de Lyme en phase 2 ou 3, et malgré 3 mois ou plus de traitements antibiotiques (dont au minimum deux semaines au ceftriaxone)
  rule move_compobj_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[1=comp,2=obj]-> D1; N1 << D1;
      N2 -[1=comp,2=obj]-> D2; N2 << D2;
      N1.upos=N2.upos;
      e: D2 -[1=comp|mod|udep]-> D; D[Shared=Yes]}
    without{D2 -[1=comp]-> D; D1 -[1=comp]-> D3} %Ex: fr-ud-test_00145 - quand on en détruit et qu' on en créé 20.000
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }

% The shared dependent is attached at the head of the last conjunct via a MOD relation on the right of its governor.
% Ex: fr-ud-train_12393 - le 6 mai et le 15 juin 1825
  rule move_mod-right_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[mod]-> D1; N1 << D1;
      N2 -[mod]-> D2; N2 << D2;
      e: D2  -[1=comp|mod]-> D; D[Shared=Yes]; D2 << D}
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }

% The shared dependent is attached at the head of the last conjunct via a MOD relation on the left of its governor.
% Ex: fr-ud-train_10344 - plus économiquement ou plus adéquatement que les produits
  rule move_mod-left_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[mod]-> D1; N1 >> D1;
      N2 -[mod]-> D2; N2 >> D2;
      e: D2  -[1=comp|mod]-> D; D[Shared=Yes]}
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%After the shared dependent has moved to the first conjunct, all features "Shared" are removed.
rule remove_shared {
  pattern {D[Shared=Yes]}
  commands {del_feat D.Shared}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feature "nom" is used to deal with all nominals in a uniform way.
package nom_init {
% All adverbs, numbers and symbols that are direct objects are considered nominal.
  rule nom_comp {
    pattern {A[upos=ADJ|ADV|SYM|NUM,!nom]; H -[1=comp, 2=obj]-> A}
    without{ H[upos=SCONJ]; A[upos=ADJ|ADV]}
    without{A[upos=ADV]; * -[IDIOM]-> A}
    commands {A.nom=y}
  }

% All words with a determiner are considered nominal.
  rule nom_det {
    pattern {N[upos<>NOUN|PRON|PROPN|X,!nom]; N -[det]-> *}
    commands {N.nom=y}
  }

% All words with NOUN, PRON, PROPN, SYM, X as POS are considered nominal.
  rule nom_noun {
    pattern {N[upos=NOUN|PRON|PROPN|X,!nom]}
    commands {N.nom=y}
  }

% All numerals following their gouvernor are considered nominal.
  rule nom_num_after {
    pattern {N[upos=NUM,!nom]; H -> N; H << N}
    commands {N.nom=y}
  }

% All numerals that are verb modifiers are considered nominal.
  rule nom_num_mod {
    pattern {N[upos=NUM,!nom]; H[upos=ADP|AUX|VERB]; H -[mod]-> N}
    commands {N.nom=y}
  }

% All adverbs, numbers and symbols that are subjects are considered nominal.
  rule nom_subj {
    pattern {A[upos=ADJ|ADV|SYM|NUM,!nom]; H -[1=subj]-> A}
    commands {A.nom=y}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependencies of type FLAT_NAME, FIXED or CONJ that are chained are reorganized into bouquets.
package unchained_relations {
  rule flat_name {
    pattern { H -[flat:name]-> D1; e: D1 -[flat:name]-> D2; }
    without { * -[flat:name]-> H; }
    commands { del_edge e; add_edge H -[flat:name]-> D2; }
  }

  rule fixed {
    pattern {
      H -[unk]-> D1; * -[IDIOM]-> D1;
      e: D1 -[unk]-> D2; * -[IDIOM]-> D2}
    without { * -[unk]-> H;  * -[IDIOM]-> H}
    commands { del_edge e; add_edge H -[unk]-> D2; }
  }

  rule flat {
    pattern { H -[flat]-> D1;e: D1 -[flat]-> D2 }
    commands { del_edge e; add_edge H -[flat]-> D2 }
  }

  rule conj {
    pattern { H -[1=conj]-> D1;e: D1 -[conj]-> D2 }% Dependency H -> D1 can be an embedded coordination. Ex: fr-ud-dev_01028 - l'art sacré et le profane, ou l'absence de progrès
    commands { del_edge e; add_edge H -[conj]-> D2 }
  }

% Embedded coordinations.
  rule conj_emb {
    pattern { H -[conj:emb]-> D1;e: D1 -[conj:emb]-> D2 }
    commands { del_edge e; add_edge H -[conj:emb]-> D2 }
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The relations with prepositions and conjunction of subordination as their heads are reversed.
package reverse_case_mark {
% The heads are reversed from the most internal to the most external. The source and the target of the reversed relation are marked "reversed = y" so that loops are not possible.
  rule rev_head {
    pattern {e:H -[comp:obj]-> D; H[upos= ADP|CCONJ|PART|SCONJ]}
    without{D[upos= ADP|CCONJ|PART|SCONJ]; D -[1=comp,2=obj]-> D1}
    commands {
      e.rev=y;
      add_edge f:D -> H; f.label = e.label;
      del_edge e;
      shift_in H =[^IDIOM|TITLE|CONV]=> D;
      shift_out H =[1=case|mark]=> D;
    }
  }

}

%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H.
package shift_out_edges{
  rule all{
    pattern{
      H -[rev=y]-> D;
      e: D -> D1}
    without{ D -[1=comp|conj|expr|flat|goeswith|reparandum|HEAD|IDIOM|TITLE|CONV]-> D1}
    without{D -[punct]-> D2; D -[punct]-> D1; D1.lemma = D2.lemma; D >> D1; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = ")"; D2.lemma = "(";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "»"; D2.lemma = "«";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "]"; D2.lemma = "[";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D2.lemma = ")"; D1.lemma = "(";
      D1 << D; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "»"; D2.lemma = "«";
      D1 << D; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "]"; D2.lemma = "[";
      D1 << D; D << D2}
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }

  rule prep_dep{
    pattern{
      D[upos=ADP]; H -[1=comp,2=obj,rev=y]-> D;
      e:D -[^ conj|CONV|HEAD|IDIOM|TITLE]-> D1}
    commands {
      add_edge f:H -> D1; f.label = e.label;
      del_edge e
    }
  }

  rule embedding_punct{
    pattern{
      H -[rev=y]-> D;
      e1: D -[punct]-> P1; P1 << D; P1 << H;
      e2: D -[punct]-> P2; P2 >> D; P2 >> H}
    without{P1[lemma="."|";"|":"|"\'"]}
    without{P2[lemma="."|";"|":"|"\'"]}
    without{P1.lemma = "("; P2.lemma <> ")"}
    without{P1.lemma = "«"; P2.lemma <> "»"}
    without{P1.lemma = "["; P2.lemma <> "]"}
    without{P1.lemma = "{"; P2.lemma <> "}"}
    commands{
      add_edge H -[punct]-> P1; del_edge e1;
      add_edge H -[punct]-> P2; del_edge e2}
  }

  rule conj{
    pattern{H -[rev=y]-> D; e:D -[1=conj]-> D1; D.upos <> D1.upos}
    without{D1 << H} %Ex : UD_French-GSD  fr-ud-train_14326
    without{D[upos=AUX]; D1[upos=VERB]; H >> D1}%Ex: UD_French-GSD fr-ud-train_06092
    without{D[upos=AUX]; D1[upos=VERB]; H1 -> D; H1 >> D1} %Ex: UD_French-GSD fr-ud-train_09763
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD relations with adpositions or conjonctions of subordination are renamed as case or mark UD relations.
package case_mark_relations {
% Adpositions introducing nominals are case dependent.
% Ex: à Paris - comme à Paris - il ira plutôt à Lyon qu'à Paris.
  rule case_nom_adp{
    pattern{ e:H -[1=comp,2=obj,rev=y]-> D; H[nom=y];D[upos=ADP|PART] }
    commands {e.1=case}
  }

% Conjunctions introducing nominals without adpositions between them and the conjunction are case dependent.
% Ex: Lyon est plus près que Paris.
  rule case_nom_conj{
    pattern{ e:H -[1=comp,2=obj,rev=y]-> D; H[nom=y];D[upos=CCONJ|SCONJ] }
    without{H -> ADP; ADP[upos=ADP|PART]; D << ADP; ADP << H}
    without{H -> ADP; ADP[upos=ADP|PART]; D >> ADP; ADP >> H}
    commands {e.1=case}
  }

% Adpositions introducing adjectives or adverbs are case dependent.
% Ex: dès demain - en continu
  rule case_pred_adp{
    pattern{ e:H -[1=comp,2=obj,rev=y]-> D; H[upos=ADV|ADJ];D[upos=ADP|PART] }
    % There is no conjunction between the adposition and its governor. Ex: dès que possible.
    without{ H -[1=comp|mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D << CONJ; CONJ << H}
    without{ H -[1=comp|mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D >> CONJ; CONJ >> H}
    commands {e.1=case}
  }

% Adpositions or conjunctions introducing verbs are mark dependent.
  rule mark_verb_adp-conj{
    pattern{
      e:H -[1=comp,2=obj,rev=y]-> D;
      H[upos=AUX|VERB,!nom];
      D[upos=ADP|CCONJ|PART|SCONJ] }
    commands {e.1=mark}
  }

% Conjunctions introducing adjectives or adverbs that are not considered nominal are mark dependent.
% Ex: si possible
  rule mark_pred_conj{
    pattern{ e:H -[1=comp,2=obj,rev=y]-> D; H[upos=ADJ|ADV,!nom];D[upos=CCONJ|SCONJ] }
    commands {e.1=mark}
  }

% Adpositions introducing a clause marked with conjunction between the clause head and the adposition are mark dependent.
% Ex: dès que possible
  rule mark_pred_adp-left{
    pattern{
      e:H -[1=comp,2=obj,rev=y]-> D; D[upos=ADP|PART];
      H -[1=mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D << CONJ; CONJ << H}
    commands {e.1=mark}
  }

% Adpositions introducing a clause marked with conjunction between the clause head and the adposition are mark dependent.
% Ex:
  rule mark_pred_adp-right{
    pattern{
      e:H -[1=comp,2=obj,rev=y]-> D; D[upos=ADP|PART];
      H -[1=mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D >> CONJ; CONJ >> H}
    commands {e.1=mark}
  }

% Conjunction introducing a prepositional phrase are mark dependent.
% Ex: comme à Paris
  rule mark_nom_conj-left{
    pattern{
      e:H -[1=comp,2=obj,rev=y]-> D;
      H[nom=y];D[upos=CCONJ|SCONJ];
      H -[1=case]-> ADP; D << ADP; ADP << H}
    commands {e.1=mark}
  }

  rule mark_nom_conj-right{
    pattern{
      e:H -[1=comp,2=obj,rev=y]-> D;
      H[nom=y];D[upos=CCONJ|SCONJ];
      H -[1=case]-> ADP; D >> ADP; ADP >> H}
    commands {e.1=mark}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% It is necessary to delete the reversed marks because there is another package reversing heads and it must start with no reversed marks.
package reverse_close {

  % if two conj are connected by a change of head, add the "emb" subtype
  rule connect_conj {
    pattern { H -[1=conj,rev=y]-> D; e:D -[conj]-> D1}
    commands { e.2 = emb }
  }

  rule del_reversed{
    pattern{e:H -[rev=y]-> D}
    without {H -[1=conj]-> D; D -[conj]-> D1; } % apply only if [connect_conj] cannot be applied
    commands {del_feat e.rev}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD sub-relations  are renamed as UD relations or sub-relations.
% Rem: the rules are ordered according to the alphabetic order of the names of the resulting relations
package sub_relations {
  rule acl_relcl {
    pattern { e:H -[1=mod,deep=relcl]-> D }
    commands {e.1=acl}
  }

  rule advclcleft {
    pattern { e:H -[comp:cleft]-> D }
    commands {e.1=advcl; e.2=cleft}
  }

  rule advcl_x {
    pattern { e:H -[mod@x]-> D }
    commands {del_edge e; add_edge H -[advcl:x]-> D}
  }

  rule aux{
    pattern{ e:H -[1=comp,2=aux]-> D }
    commands {e.1=aux}
  }

% Clausal argument without control of its subject.
  rule ccomp {
    pattern {e:H -[1=comp, 2=obj|obl|pred]-> D; D[upos = AUX|VERB,!nom]}
    without{ H -[comp:obj@x|comp:obl@x|comp:pred@x]-> D} % The argument is a verb, whose subject is controlled by the main verb.
    without {H -[comp:obj@pass|comp:obj@agent]-> D } % Impersonal diathesis
    commands {e.1=ccomp}
  }

% Clausal argument with a non-verbal head.
  rule ccomp_non-verb {
    pattern {
      e:H -[1=comp, 2=obj|obl]-> D; D[upos<> AUX|VERB];
      D -[1=mark]-> CONJ}
    commands {e.1=ccomp}
  }

  rule cop{
    pattern{ e:H -[1=comp,2=pred]-> D; H[upos=AUX]}
    commands {e.1=cop}
  }

% In the impersonal diathesis, the deep clausal subject, which is a COMP:OBJ dependent in SUD, becomes a CSUBJ dependent in UD.
% Ex: il m'arrive de faire des erreurs.
  rule csubj_comp-obj {
    pattern {e:H -[comp:obj@agent]-> D; D[upos=AUX|VERB]}
    commands {del_edge e; add_edge H -[csubj]-> D }
  }


%  In the impersonal passive diathesis, the deep clausal object, which is a COMP:OBJ@PASS dependent in SUD, becomes a CSUBJ:PASS dependent in UD.
% Ex: Il est prévu de continuer. - Il se dit que tu viendras.
  rule csubj_comp-obj-pass {
    pattern {e:H -[comp:obj@pass]-> D; D[upos=AUX|VERB]}
    commands {del_edge e; add_edge H -[csubj:pass]-> D }
  }

% Clitic pronoun expressing the mediopassive redistribution.
% Ex: Les voitures se sont bien vendues.
  rule expl-pass_comp{
    pattern{e: H -[comp@pass]-> D}
    commands{del_edge e; add_edge H -[expl:pass]-> D}
  }


% In an impersonal construction, the impersonal subject, which is a SUBJ:EXPL dependent in SUD, becomes an  EXPL:SUBJ dependent in UD.
% Ex: Il arrive deux personnes. - Il faut un bilan. - Il s'agit d'une erreur. - Il a été vendu une grande maison. - il se dit que tu viendras.
  rule expl_subj{
    pattern{ e:H -[subj@expl]-> D}
    commands {e.1=expl;e.2=subj; del_feat e.deep}
  }

% iobj is used for any argument of a non-nominal governor, which is an adverb or a pronoun not introduced by a preposition
  rule iobj {
    pattern {H[!nom]; e:H -[1=comp,2=obl]-> D; D[upos=ADV|PRON]}
    without{D -[case]-> *}
    commands {e.1=iobj}
  }

  rule nmod_poss {
    pattern { e:H -[1=mod, 2=poss]-> A; A[upos=ADJ] }
    commands {e.1=nmod}
  }

% Deep subject in the impersonal resdistribution.
% Ex: il arrive deux personnes.
  rule nsubj_comp-obj {
    pattern { e:H -[comp:obj@agent]-> D; D[nom=y]}
    without{ H -[comp:aux@caus|aux:aux@caus|aux:caus]-> AUX}
    commands { del_edge e; add_edge H -[nsubj]-> D }
  }

% Object in the impersonal passive redistribution.
% Ex: Il a été vendu une grande maison. - Il s'est vendu une grande maison.
  rule nsubj_comp-obj-pass{
    pattern { e:H -[comp:obj@pass]-> D; D[nom=y]}
    commands {e.1=nsubj; e.2=pass; del_feat e.deep}
  }

% added for Naija
  rule nummod_det {
    pattern { e:H -[1=det, 2=num]-> D; }
    commands { e.1=nummod; e.2=det}
  }

% added for Naija
  rule nummod_mod {
    pattern { e:H -[1=mod, 2=num]-> D; }
    commands { e.1=nummod; e.2=mod}
  }

   rule obj_nom{
    pattern { e:H -[1=comp, 2=obj, !deep]-> D; D[nom=y]}
    without{ D -[1=mark]-> *}
    commands {e.1=obj}
  }

   rule obj_pred{
    pattern { e:H -[1=comp, 2=obj]-> D; D[cat=ADJ|ADV|INTJ,!nom]}
    without{ D -[1=mark]-> *}
    commands {e.1=obj}
  }

% Object of a causative auxiliary being the agent of the verb caused
  rule obj_agent {
    pattern { e:H -[comp:obj@agent]-> D; H -[aux:caus|aux:aux@caus]-> AUX}
    commands {del_edge e; add_edge H -[obj:agent]-> D }
  }

  rule obj_lvc{
    pattern { e:H -[comp:obj@lvc]-> D}
    commands {del_edge e; add_edge H -[obj:lvc]-> D}
  }

  rule obl_agent {
    pattern {
      H[upos=ADJ|ADV|AUX|VERB];
      e:H -[comp:obl@agent]-> D; D -[1=case]-> * }
    commands {del_edge e; add_edge H -[obl:agent]-> D }
  }

  rule obl_arg_nom {
    pattern {
      H[upos=ADJ|ADV|INTJ|VERB];
      e:H -[1=comp,2=obl]-> D; D[upos <> ADV|PRON,nom=y] }
    without{ D -[1=mark]-> *}
    commands {e.1=obl; e.2=arg}
  }

  rule obl_arg {
    pattern {
      H[upos=ADJ|ADV|INTJ|VERB];
      e:H -[1=comp,2=obl]-> D; D[upos=ADJ|ADV|PRON] }
    without{ D -[1=mark]-> *}
    commands {e.1=obl; e.2=arg}
  }

  rule xcomp {
    pattern { e:H -[comp:obj@x|comp:obl@x|comp:pred@x|comp:pred]-> D }
    without{ H[upos=AUX]}
    without{ D[upos=AUX|VERB]; H -[comp:pred]-> D}
    commands {e.1=xcomp; del_feat e.deep}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD deep extensions of relations are transformed into extensions of UD relations
package rel_extensions {
  rule change_ext{
    pattern{e: H -[1=*, deep=*]-> D}
    commands{ add_edge H -[1=e.1,2=e.deep]-> D; del_edge e}
  }

  rule del_ext{
    pattern{e: H -[1=*,2=aux|emb|obj|obl|pred,!deep]-> D}
    without{ H -[1=ccomp|xcomp,2=obj|obl|pred]-> D}
    commands{del_feat e.2}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD relations are renamed as UD relations or sub-relations.
% Rem: the rules are ordered according to the alphabetic order of the names of the resulting relations
package relations {

% A nominal governs a participle or an infinitive in a direct MOD relation.
  rule acl_part {
    pattern {
      e:H -[1=mod]-> D; H[nom=y];
      D[upos=AUX|VERB,!nom]}
    without{D -[1=mark]-> *}
    commands {e.1=acl}
  }

% A nominal governs the head of a complementized clause in a UDEP or MOD relation.
% Ex: fr-ud-train_13185 -  Plats de type routier comme dans les années 1970.
  rule acl_mark-clause {
    pattern {
      e:H -[1=mod|udep]-> D; H[nom=y];
      D -[1=mark]-> *
    }
    commands {e.1=acl}
  }

% A non nominal governs a predicative phrase.
  rule advcl {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[upos=ADJ|AUX|VERB,!nom] }
    without {D[upos=ADJ]; D -[1=case]-> *} % A modifier adjective marked with an adposition is considered as an oblique complement in UD.
    commands {e.1=advcl}
  }

% A non-nominal governs a phrase the predicative feature of which is marked with a conjunction or the presence of a subject.
% Ex: fr-ud-train_01058 - Son équipe en difficulté, il est remplacé à la mi-temps ...
% Ex: fr-ud-test_00158 - Comme chaque soir à 18h40, il tranche, malmène et détourne l'actualité.
  rule advcl_ellipsis {
    pattern {H[!nom]; e:H -[1=mod]-> D; D -[1=mark|nsubj]-> * }
    without{D[upos=ADJ|AUX|VERB]}
    commands {e.1=advcl}
  }

  rule advmod {
    pattern { e:H -[1=mod|udep]-> D; D[upos=ADV|CCONJ|INTJ|PART|SYM, !nom] }
    without{D -[1=mark]-> *}
    commands {e.1=advmod}
  }

%  Adjective attributive of another adjective.
  rule amod_adj {
    pattern { H[upos=ADJ,!nom]; e:H -[1=mod]-> D; D[upos=ADJ] }
    without{ D -[1=mark]-> X}
   % without{ PRO[PronType=Rel]; D -> PRO; H << PRO}
    commands {e.1=amod}
  }

%  Adjective attributive of a nominal.
  rule amod_nom {
    pattern { H[nom=y]; e:H -[1=mod]-> D; D[upos=ADJ] }
    without{ D -[1=mark]-> X}
   % without{ PRO[PronType=Rel]; D -> PRO; H << PRO}
    commands {e.1=amod}
  }

% Clausal subject.
  rule csubj {
    pattern { e:V -[1=subj]-> S; S[upos=AUX|VERB, !nom] }
    commands {e.1=csubj}
  }

  rule dep{
    pattern{ e: H -[unk]-> D}
    without{* -[IDIOM]-> H; * -[IDIOM]-> D}
    commands{e.1=dep}
  }

  rule dep-comp{
    pattern{ e: H -[1=comp]-> D}
    commands{del_edge e; add_edge H -[dep:comp]-> D}
  }

  rule fixed{
    pattern{ e: H -[unk]-> D; * -[IDIOM]-> H; * -[IDIOM]-> D}
    commands{del_edge e; add_edge H -[fixed]-> D}
  }
  rule nmod {
    pattern {e:H -[1=mod|udep]-> D; H[nom=y]; D[nom=y]}
    without{D -[1=mark]-> X}
    commands {e.1=nmod}
  }


% A numeral is dependent on another numeral via an adposition.
  rule nmod_num1{
    pattern {e:H -[1=mod|udep]-> D; H[upos=NUM]; D[upos=NUM]}
    commands {e.1=nmod}
  }


% Nomminal subject.
  rule nsubj {
    pattern { e:V -[1=subj]-> S; S[nom=y] }
    commands {e.1=nsubj}
  }


% A MOD relation, when the modifier is a numeral preceding its governor, is converted into a NUMMOD relation.
  rule nummod_mod {
    pattern { e:H -[1=mod]-> D; D[upos=NUM]; D << H }
    without{ H -[1=case|mark]-> D1; D << D1}
    without{ D -[case|mark]-> *}
    commands {e.1=nummod}
  }

% A DET relation, when the modifier is a numeral, is converted into a NUMMOD relation.
  rule nummod_det{
    pattern { e: H -[1=det]-> D; D[upos=NUM] }
    commands {e.1=nummod}
  }

  rule oblmod_nom {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[nom=y] }
    without{ D -[1=nsubj|mark|subj]-> X}
    without{H[upos=NUM];D[upos=NUM]}
    commands {e.1=obl; e.2=mod}
  }

  rule oblmod_adj {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[upos=ADJ,!nom]; D -[1=case]-> X }
    commands {e.1=obl; e.2=mod}
  }

% A predicate governs a nominal or an adjective in a DEP_SUD relation.
  rule obl{
    pattern {e:H -[1=udep]-> D; H[upos=ADJ|ADV|VERB|AUX|INTJ,!nom]}
    without{D[upos <> ADJ, !nom]}
    commands {e.1=obl}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All SUD relations that are not converted to SUD relations with standard rules are left underspecified.
rule relations_backoff {
  pattern { e:H -[1=unk|subj|udep|mod|comp]-> D; }
  commands { del_edge e; add_edge H -[dep]-> D; }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The relations with auxiliaries as their heads are reversed.
package reverse_aux {

  rule rev_head {
    pattern {e:H -[1=aux|cop,!rev]-> D; H[upos= AUX]}
    without{D[upos= AUX]; D -[1=aux|cop,!rev]-> D1}
    commands {
      e.rev=y;
      add_edge f:D -> H; f.label = e.label;
      del_edge e;
      shift_in H =[^IDIOM|TITLE]=> D;
    }
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
package final {
  rule del_nom{
    pattern {W[nom=y]}
    commands {del_feat W.nom}
  }

  rule rm_emb {
    pattern { e:M -[conj:emb]-> N }
    commands { del_edge e; add_edge M -[conj]-> N }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat main {
  Seq (
    Onf(shared), % Package SHARED must precede SPECIFIC_EXPR_INIT so that feature Shared=Yes is not embedded in Idiom.
    Onf(remove_shared),
    specific_expr_init, % Initialization of a specific treatment for idioms, titles and translated words.
    Onf (nom_init),
    Onf (unchained_relations), % For CONJ relations, chains must be transformed into bouquets before head changes because of conditions on the presence of prepositions, conjunctions and auxiliaries. It is easier to take these conditions into account before head changes (UD_French-GSD : fr-ud-dev_00751)
    Onf (reverse_case_mark),  % Package REVERSE_CASE_MARK precedes packages SUB_RELATIONS and RELATIONS because UD labels of complement relations depend on the category of the complements introduced with a preposition or a conjunction
    Onf(shift_out_edges),
    Onf(case_mark_relations), %Package CASE_MARK_RELATIONS must precede package SUB_RELATIONS because renaming of some SUD relations requires the distinction between case and mark relations. The package must also precede package REVERSE_CLOSE because changes concern only reversed relations (Counter-example : SUD_French-GSD fr-ud-train_03238)
    Onf( reverse_close),
    Onf (sub_relations), % Package SUB_RELATIONS must precede package REL_EXTENSIONS because this package swat extensions on level 2.
    Onf (rel_extensions),
    Onf (relations),
    Onf (relations_backoff),
    Onf(reverse_aux),    % Package REVERSE_AUX follows packages SUB_RELATIONS and RELATIONS because of the dependencies H -> AUX in UD: if H is the target of a dependency, the label of the dependency may depend on the mood of AUX.
    Onf(shift_out_edges),
    Onf( reverse_close),
    Onf (final),
    specific_expr_close, % Closing a specific treatment for idioms, titles and translated words.
    synt_to_fixed,
  )
}

package FR_init {
  rule face {
    pattern {
      N1 [lemma=lex.noun, upos=NOUN, ExtPos=ADV];
      N2 [lemma=lex.prep];
      N1 -[comp:obl]-> N2;
    }
    commands {
      N1.ExtPos = ADP;
      N1.PhraseType = Idiom;
      N2.InIdiom = Yes;
    }
  }
#BEGIN lex
noun	prep
%-------------
face	à
grâce	à
suite	à
histoire	de
#END
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% French pronominal verbs are considered as idioms. In the conversion to UD, their idiomatic characteristic is removed.
package FR_pron_verb{
% The pronominal verb has a unique clitic pronoun marking its pronominal feature.
% Ex: les gens s'enfuient.
  rule verb1{
    pattern{
      V[upos=VERB,ExtPos=VERB, PhraseType=Idiom];
      V -[comp]-> PRON; PRON [upos=PRON,InIdiom=Yes]}
    without{V -[comp]-> PRON1; PRON1 [upos=PRON,InIdiom=Yes]}
    commands{
      del_feat V.ExtPos; del_feat  V.PhraseType;
      del_feat PRON.InIdiom}
  }

% The pronominal verb has two clitic pronouns marking its pronominal feature.
% Ex: ils s'en prennent aux plus faibles.
  rule verb2{
    pattern{
      V[upos=VERB,ExtPos=VERB, PhraseType=Idiom];
      V -[comp]-> PRON1; PRON1 [upos=PRON,InIdiom=Yes];
      V -[comp]-> PRON2; PRON2 [upos=PRON,InIdiom=Yes]; PRON1 << PRON2}
    commands{
      del_feat V.ExtPos; del_feat  V.PhraseType;
      del_feat PRON1.InIdiom; del_feat PRON2.InIdiom;}
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Re-labelling of MOD relations specific to French
package FR_mod {
% Adjectival, verbal or nominal expressions that are hightlighted at the beginning of a clause are considered as incomplete clauses.
% Ex: fr-ud-dev_00407 - Spécialiste des six jours, il a remporté 38 compétitions entre 1931 et 1942.
  rule left_extraposition{
    pattern{
      APP[upos=ADJ|NOUN|PRON|PROPN|VERB];
      V -[1=subj]-> SUBJ; APP << SUBJ; SUBJ << V;
      e: V -[mod]-> APP}
    without{ APP -[1=case]-> *}
    without{APP[upos=NOUN]; APP -[det]-> *}
    without{APP[upos=NOUN,lemma= lex.noun]}
    without{% Modifiers in the form NOUN + PREP + NOUN.
            % Ex: fr-ud-dev_00322 - Couche par couche, Morin arrange ...
      APP[upos=NOUN];
      P[upos=ADP,lemma="après"|par|sur];
      N[upos=NOUN];
      N -[1=case]-> P;
      APP -[1=udep]-> N;
      N.lemma=APP.lemma
    }
    commands{ del_edge e; add_edge V -[advcl]-> APP}
  }
#BEGIN lex
noun
an
année
aoüt
avril
côté
décembre
dimanche
faute
février
fin
fois
janvier
jeudi
jour
juillet
juin
lundi
mai
mardi
mars
mercredi
mi-novembre
mois
niveau
novembre
octobre
page
plupart
ps
rue
samedi
semaine
septembre
soir
temps
vendredi
vue
#END

% Nouns behaving as circumstancial complements and heads of modifiers in the form of adverbial clauses.
% Ex: Il pleut cette année comme l'an dernier.
  rule conj_adv-noun{
    pattern{
      N[upos=NOUN,lemma=lex.noun];
      e: N -[1=case]-> C; C[upos=SCONJ];
      * -[mod]-> N
    }
    commands{e.1=mark}
  }
#BEGIN lex
noun
an
année
aoüt
avril
côté
décembre
dimanche
faute
février
fin
fois
janvier
jeudi
jour
juillet
juin
lundi
mai
mardi
mars
mercredi
mi-novembre
mois
niveau
novembre
octobre
page
plupart
ps
rue
samedi
semaine
septembre
soir
temps
vendredi
vue
#END

% Numbers that follow a measure unity
  rule unity_num{
    pattern{D[upos=NUM]; H[lemma=lex.unity]; e:H -[mod]-> D }
    commands{del_edge e; add_edge H -[nummod]-> D}
  }
#BEGIN lex
unity
euro
gramme
heure
litre
mètre
€
#END
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Re-labelling of UDEP relations specific to French
package FR_udep {
% Expressions in the form "quelque/grand chose de" + ADJ
  rule chose_de_adj{
    pattern{
      H[upos=PRON]; D[lemma=chose]; H -[HEAD]-> D;
      A[upos=ADJ|DET,lemma=grand|quelque]; D -[det|mod]-> A;
      D1[upos=ADJ];e: H -[mod]-> D1;
      D1 -[1=case]-> DE; DE[upos=ADP,lemma=de]
    }
    commands{ del_edge e; add_edge H -[amod]-> D1}
  }

% Expressions in the form "rien de" + ADJ
  rule rien_de_adj{
    pattern{
      H[upos=NOUN|PRON,lemma=rien]; D[upos=ADJ]; e: H -[mod]-> D;
      D -[1=case]-> DE; DE[upos=ADP,lemma=de]
    }
    commands{ del_edge e; add_edge H -[amod]-> D}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Re-labelling of subject relations specific to French.
package FR_subj {
% Subjects of passive participles without auxiliary.
  rule nsubj_pass{
    pattern {e:V -[nsubj]-> S; V [VerbForm=Part,Tense=Past,lemma=lex.verb] }
    without {* -[1=aux]-> V}
    commands { del_edge e; add_edge V -[nsubj:pass]-> S }
  }
#BEGIN lex
verb
abaisser
abandonner
abattre
abhorrer
abjurer
abolir
abominer
abonner
aborder
abreuver
abriter
abroger
abrutir
abréger
absorber
absoudre
abstraire
abuser
abîmer
accabler
accaparer
accentuer
accepter
acclamer
acclimater
accoler
accommoder
accompagner
accomplir
accorder
accoupler
accoutrer
accoutumer
accrocher
accroître
accréditer
accueillir
acculer
accumuler
accuser
accélérer
acheminer
acheter
achever
acquitter
acquérir
actionner
activer
adapter
additionner
adjoindre
adjuger
adjurer
admettre
administrer
admirer
adopter
adorer
adosser
adoucir
adresser
affaiblir
affaisser
affaler
affamer
affecter
affectionner
affermir
afficher
affiner
affirmer
affleurer
affoler
affranchir
affronter
affubler
affûter
agacer
agencer
agglomérer
agglutiner
aggraver
agiter
agrandir
agresser
agripper
agréer
agréger
agrémenter
aider
aigrir
aiguiller
aiguillonner
aiguiser
aimer
ajourner
ajouter
ajuster
alarmer
alerter
aligner
alimenter
aliéner
allaiter
allier
allonger
allouer
allumer
allécher
alléger
alléguer
alourdir
alterner
altérer
amadouer
amaigrir
amalgamer
amarrer
amasser
ambitionner
amender
amener
ameuter
amidonner
amincir
amnistier
amoindrir
amollir
amonceler
amorcer
amortir
amplifier
amputer
amuser
améliorer
aménager
analyser
ancrer
angoisser
animer
annexer
annihiler
annoncer
annoter
annuler
anoblir
anticiper
anéantir
apaiser
apitoyer
aplanir
aplatir
apostropher
appareiller
apparenter
appauvrir
appeler
appesantir
applaudir
appliquer
apporter
apprendre
apprivoiser
approcher
approfondir
approprier
approuver
approvisionner
apprécier
appréhender
apprêter
appuyer
appâter
arbitrer
arborer
arc-bouter
archiver
armer
arpenter
arracher
arraisonner
arranger
arrondir
arroser
arrêter
articuler
asperger
asphyxier
aspirer
assagir
assaillir
assainir
assaisonner
assassiner
assembler
asseoir
assigner
assimiler
assister
assiéger
associer
assombrir
assommer
assortir
assoupir
assouplir
assourdir
assouvir
assujettir
assumer
assurer
assécher
asséner
astiquer
astreindre
atrophier
attabler
attacher
attaquer
attarder
atteindre
atteler
attendre
attendrir
attester
attifer
attirer
attiser
attiédir
attraper
attribuer
attrister
attrouper
atténuer
auditionner
augmenter
augurer
auréoler
ausculter
authentifier
automatiser
autoriser
avachir
avaler
avancer
avantager
aventurer
avertir
aveugler
avilir
aviser
aviver
avoir
avoisiner
avorter
avouer
axer
aérer
bachoter
badigeonner
bafouer
bafouiller
baigner
baiser
baisser
balancer
balayer
balbutier
baliser
ballotter
bander
bannir
baptiser
baragouiner
baratiner
barboter
barbouiller
barder
barioler
barrer
barricader
basculer
baser
bassiner
battre
bazarder
bercer
berner
beurrer
biffer
biner
biseauter
bisser
blaguer
blairer
blanchir
blesser
bleuir
blinder
bloquer
bluffer
blâmer
blêmir
boire
boiser
border
borner
bosseler
boucher
boucler
bouder
bouffer
bouger
bouillir
bouleverser
boulonner
boulotter
bourrer
boursoufler
bousculer
bousiller
bouter
boutonner
boxer
boycotter
braconner
brader
brailler
braiser
bramer
brancher
brandir
braquer
brasser
braver
bredouiller
breveter
bricoler
brider
briguer
brimer
briquer
briser
brocher
broder
bronzer
brosser
brouiller
brouter
broyer
brunir
brusquer
brutaliser
brûler
buter
bâcher
bâcler
bâillonner
bâtir
bégayer
bénir
bêcher
bûcher
cabrer
cacher
cacheter
cadenasser
cadrer
cahoter
cailler
cajoler
calculer
caler
calfeutrer
calibrer
calmer
calomnier
calotter
calquer
cambrer
cambrioler
camionner
camoufler
camper
canaliser
canoniser
canonner
cantonner
capitonner
capoter
capter
captiver
capturer
caractériser
caramboler
caresser
caricaturer
carillonner
carotter
carrer
caser
casquer
casser
castrer
cataloguer
catapulter
catéchiser
causer
cautionner
ceindre
ceinturer
censurer
centraliser
centrer
cercler
cerner
certifier
cesser
chagriner
chahuter
chambarder
chambouler
chambrer
changer
chanter
chantonner
chaparder
charcuter
charger
charmer
charpenter
charrier
chasser
chatouiller
chauffer
chausser
chavirer
chercher
chevaucher
chevroter
chicaner
chiffonner
chiffrer
chiner
chiper
chipoter
chiquer
choisir
choper
choquer
choyer
chuchoter
châtier
châtrer
chérir
chômer
cicatriser
cimenter
cingler
circonscrire
circonvenir
cirer
ciseler
citer
civiliser
claironner
clamer
claquer
clarifier
classer
classifier
claustrer
cloisonner
clore
clouer
clouter
cloîtrer
clôturer
coaguler
coaliser
cocher
cochonner
coder
codifier
coffrer
cogiter
cogner
coiffer
coincer
collecter
collectionner
collectiviser
coller
colmater
coloniser
colorer
colorier
colporter
coltiner
combattre
combiner
combler
commander
commencer
commenter
commercialiser
commettre
commuer
communiquer
commémorer
comparer
compartimenter
compenser
compiler
complimenter
compliquer
comploter
compléter
comporter
composer
comprendre
comprimer
compromettre
compter
compulser
concasser
concentrer
conceptualiser
concerner
concerter
concevoir
concilier
conclure
concrétiser
concurrencer
concéder
condamner
condenser
conditionner
conduire
confectionner
confesser
confier
confiner
confire
confirmer
confisquer
confondre
conformer
confronter
confédérer
conférer
congeler
congestionner
conglomérer
congratuler
congédier
conjecturer
conjuguer
conjurer
connaître
connecter
conquérir
consacrer
conseiller
consentir
conserver
considérer
consigner
consoler
consolider
consommer
constater
consterner
constiper
constituer
construire
consulter
consumer
contacter
contaminer
contempler
contenir
contenter
conter
contester
continuer
contourner
contracter
contraindre
contrarier
contraster
contre-attaquer
contrebalancer
contrecarrer
contredire
contrefaire
contrer
contresigner
contre-indiquer
controverser
contrôler
contusionner
convaincre
convenir
convertir
convier
convoiter
convoquer
convoyer
convulser
coopter
coordonner
copier
corner
corriger
corroborer
corrompre
corser
costumer
coter
coucher
couder
coudoyer
coudre
couillonner
couler
coulisser
couper
coupler
courbaturer
courber
courir
couronner
courroucer
court-circuiter
courtiser
couver
couvrir
coûter
cracher
craindre
cramponner
craqueler
craquer
crayonner
creuser
crevasser
crever
cribler
crier
criminaliser
crisper
cristalliser
critiquer
crocheter
croire
croiser
croquer
crucifier
créditer
créer
crépir
crêper
cueillir
cuirasser
cuire
cuisiner
culbuter
cultiver
cumuler
curer
cuver
câbler
câliner
céder
célébrer
côtoyer
dactylographier
daller
damner
danser
darder
dater
demander
desceller
descendre
dessaisir
desserrer
desservir
dessiller
dessiner
dessécher
destiner
destituer
devancer
deviner
devoir
diagnostiquer
dialoguer
dicter
diffamer
diffracter
diffuser
différencier
différer
digérer
dilapider
dilater
diluer
diminuer
dire
diriger
discerner
discipliner
discriminer
discréditer
disculper
discuter
disgracier
disjoindre
disloquer
dispenser
disperser
disposer
disputer
disqualifier
dissimuler
dissiper
dissocier
dissoudre
dissuader
disséminer
disséquer
distancer
distiller
distinguer
distraire
distribuer
diversifier
divertir
diviniser
diviser
divulguer
documenter
domestiquer
domicilier
dominer
dompter
donner
doper
dorer
dorloter
doser
doter
doubler
doucher
douer
draguer
drainer
dramatiser
draper
dresser
dribbler
droguer
duper
durcir
durer
dynamiter
déballer
débander
débaptiser
débarbouiller
débarquer
débarrasser
débattre
débaucher
débiner
débiter
déblayer
débloquer
déboiser
déborder
déboucher
déboulonner
débourser
débouter
déboutonner
déboîter
débrancher
débrayer
débrouiller
débroussailler
débusquer
débuter
décacheter
décaler
décalquer
décanter
décaper
décapiter
décapoter
déceler
décentraliser
décerner
décevoir
décharger
déchausser
déchaîner
déchiffrer
déchiqueter
déchirer
déchoir
décider
décimer
déclamer
déclarer
déclasser
déclassifier
déclencher
décliner
décocher
décoffrer
décoiffer
décoincer
décoller
décoloniser
décolorer
décommander
décomposer
décompter
déconcerter
décongeler
déconseiller
déconsidérer
déconsigner
décontenancer
décontracter
décorer
décortiquer
découdre
découper
décourager
découvrir
décrasser
décrire
décrocher
décrypter
décréter
déculotter
décupler
dédaigner
dédicacer
dédier
dédommager
dédouaner
déduire
défaire
défalquer
défavoriser
défendre
défenestrer
défier
défigurer
défiler
définir
défleurir
déflorer
défoncer
déformer
défrayer
défricher
défriper
défriser
défroisser
défroncer
déféquer
déférer
dégager
dégainer
dégarnir
dégeler
dégivrer
déglinguer
déglutir
dégobiller
dégoiser
dégommer
dégonfler
dégorger
dégoter
dégourdir
dégoûter
dégrader
dégrever
dégringoler
dégriser
dégrossir
dégueuler
déguiser
déguster
déifier
déjouer
délabrer
délacer
délaisser
délasser
délaver
délayer
délecter
délester
délier
délimiter
délivrer
déloger
déléguer
démanteler
démaquiller
démarquer
démarrer
démasquer
démembrer
démentir
démettre
démilitariser
démissionner
démobiliser
démocratiser
démolir
démonter
démontrer
démoraliser
démouler
démultiplier
démunir
déménager
démêler
dénaturer
dénicher
dénier
dénigrer
dénombrer
dénommer
dénoncer
dénoter
dénouer
dénuder
dépanner
départager
départir
dépasser
dépaver
dépayser
dépecer
dépeindre
dépendre
dépenser
dépeupler
dépiquer
dépister
dépiter
déplacer
déplier
déplisser
déplorer
déployer
déplumer
dépolitiser
déporter
déposer
déposséder
dépouiller
dépraver
déprimer
déprécier
dépuceler
députer
dépêcher
dépêtrer
déraciner
déranger
dérider
dériver
dérober
dérouiller
dérouler
dérouter
dérégler
désabuser
désaccorder
désaccoutumer
désaffecter
désagréger
désaisir
désaltérer
désamorcer
désappointer
désapprendre
désapprouver
désarmer
désarçonner
désavantager
désavouer
désaxer
désemparer
désenchanter
désenfler
déserter
désespérer
déshabiller
déshabituer
désherber
déshonorer
déshumaniser
déshériter
désigner
désillusionner
désindustrialiser
désinfecter
désintégrer
désintéresser
désirer
désobliger
désodoriser
désoler
désolidariser
désorganiser
désorienter
déstabiliser
désunir
déséquilibrer
détacher
détailler
détaxer
détecter
déteindre
dételer
détendre
détenir
déterminer
déterrer
détester
détordre
détortiller
détourner
détraquer
détremper
détromper
détruire
détrôner
détériorer
dévaler
dévaliser
dévaloriser
dévaluer
dévaster
développer
déverrouiller
déverser
dévider
dévier
dévisager
dévisser
dévitaliser
dévoiler
dévorer
dévoyer
dévêtir
effacer
effarer
effaroucher
effectuer
effeuiller
effiler
effilocher
effleurer
effondrer
effrayer
effriter
emballer
embarquer
embarrasser
embaucher
embaumer
embellir
emberlificoter
embobiner
emboucher
embourber
embouteiller
emboutir
emboîter
embrancher
embraser
embrasser
embrayer
embrigader
embrocher
embrouiller
embrumer
embuer
embusquer
embêter
emmagasiner
emmailloter
emmancher
emmener
emmerder
emmitoufler
emmurer
emménager
emmêler
empailler
empaler
empaqueter
empeser
empester
empierrer
empiler
empirer
emplir
employer
empocher
empoigner
empoisonner
emporter
empourprer
emprisonner
emprunter
empuantir
empâter
empêcher
empêtrer
encadrer
encaisser
encastrer
encaustiquer
enceindre
encenser
encercler
enchanter
enchaîner
enchevêtrer
enchâsser
enclaver
enclencher
enclore
encocher
encombrer
encorder
encourager
encourir
encrasser
encrer
encroûter
endetter
endeuiller
endiguer
endoctriner
endommager
endormir
endosser
enduire
endurcir
endurer
enfanter
enfermer
enfiler
enfiévrer
enflammer
enfler
enfoncer
enfouir
enfourcher
enfourner
enfreindre
enfumer
engager
engendrer
englober
engloutir
engluer
engorger
engouffrer
engourdir
engraisser
engranger
engueuler
enguirlander
enhardir
enivrer
enjamber
enjoindre
enjoliver
enjôler
enlacer
enlaidir
enlever
enliser
ennoblir
ennuyer
enquiquiner
enraciner
enrayer
enregistrer
enrhumer
enrichir
enrober
enrouer
enrouler
enrégimenter
enrôler
ensabler
ensacher
ensanglanter
enseigner
ensemencer
enserrer
ensevelir
ensoleiller
ensorceler
entacher
entailler
entamer
entendre
enterrer
enthousiasmer
entonner
entortiller
entourer
entraver
entraîner
entrebâiller
entrechoquer
entrecouper
entrecroiser
entrelacer
entrelarder
entremêler
entreposer
entreprendre
entretenir
entrevoir
entrouvrir
entériner
envahir
envelopper
envenimer
envier
environner
envisager
envoyer
envoûter
escalader
escamoter
escompter
escorter
escroquer
espacer
espionner
esquinter
esquisser
esquiver
essaimer
essayer
essorer
essouffler
essuyer
estamper
estampiller
estimer
estomper
estourbir
estropier
exacerber
exagérer
exalter
examiner
exaspérer
exaucer
excepter
exciter
exclure
excommunier
excréter
excuser
excéder
exempter
exercer
exhaler
exhausser
exhiber
exhorter
exhumer
exiger
exiler
exonérer
exorciser
expatrier
expectorer
expier
expirer
expliciter
expliquer
exploiter
explorer
exporter
exposer
exprimer
exproprier
expulser
expurger
expédier
expérimenter
exterminer
extirper
extorquer
extrader
extraire
extrapoler
exténuer
extérioriser
exécrer
exécuter
ébahir
ébaucher
éblouir
éborgner
ébouillanter
ébouriffer
ébranler
ébruiter
ébrécher
écailler
écarteler
écarter
échafauder
échanger
écharper
échauder
échauffer
écheveler
éclabousser
éclaircir
éclairer
éclipser
écoeurer
éconduire
économiser
écorcer
écorcher
écorner
écosser
écouler
écourter
écouter
écraser
écrire
écrouer
écrémer
écumer
édicter
édifier
éditer
édulcorer
éduquer
égaler
égaliser
égarer
égorger
égoutter
égrainer
égratigner
éjaculer
éjecter
élaborer
élaguer
élancer
élargir
électrifier
électriser
électrocuter
élever
éliminer
élire
éloigner
élucider
élucubrer
éluder
émailler
émanciper
émarger
émerveiller
émettre
émietter
émincer
émonder
émousser
émoustiller
émouvoir
énerver
énoncer
énumérer
épaissir
épancher
épandre
épanouir
épargner
éparpiller
épauler
épeler
éperonner
épicer
épier
épiler
épingler
éplucher
éponger
épouser
épousseter
époustoufler
épouvanter
éprouver
épuiser
épurer
équarrir
équilibrer
équiper
érafler
éreinter
ériger
éructer
établir
étager
étalager
étaler
étalonner
étancher
étatiser
étayer
éteindre
étendre
éterniser
étiqueter
étirer
étoffer
étouffer
étourdir
étrangler
étreindre
étrenner
étriller
étriper
étudier
étêter
évacuer
évaluer
évangéliser
évaser
éveiller
éventer
éventrer
évider
évincer
éviter
évoquer
fabriquer
faciliter
facturer
fagoter
faire
falsifier
familiariser
faner
farcir
farder
fasciner
fatiguer
faucher
faufiler
fausser
favoriser
façonner
feindre
fendiller
fendre
fermer
ferrer
fertiliser
feuilleter
fiancer
ficeler
ficher
figer
fignoler
figurer
filer
fileter
filmer
filtrer
financer
finir
fixer
flagorner
flairer
flamber
flanquer
flatter
fleurir
flotter
fléchir
flétrir
fomenter
foncer
fonder
fondre
forcer
forger
formaliser
former
formuler
fortifier
fouailler
foudroyer
fouetter
fouiller
fouler
fourbir
fourcher
fournir
fourrager
fourrer
fourvoyer
foutre
fracasser
fractionner
fracturer
fragiliser
fragmenter
franchir
franciser
frapper
frauder
fredonner
freiner
frelater
fricoter
frictionner
frigorifier
friper
frire
friser
froisser
froncer
fronder
frotter
frustrer
fréquenter
frôler
fuir
fulminer
fumer
fusiller
fusionner
fustiger
fâcher
féconder
fédérer
féliciter
fêler
fêter
gager
gagner
galvaniser
galvauder
gangrener
garantir
garder
garer
garnir
garrotter
gaspiller
gauchir
gaver
gazer
geler
gercer
gifler
glacer
glaner
glapir
glisser
glorifier
gloser
gober
gommer
gonfler
gorger
goudronner
goupiller
gourmander
gouverner
goûter
gracier
graduer
graisser
grappiller
gratifier
gratiner
gratter
graver
gravir
greffer
grever
gribouiller
griffer
griffonner
grignoter
grillager
griller
grimer
grimper
gripper
griser
grogner
grommeler
gronder
grossir
grouper
guetter
gueuler
guider
guigner
guillotiner
guinder
guérir
gâcher
gâter
généraliser
gérer
gêner
habiliter
habiller
habiter
habituer
hacher
haler
handicaper
hanter
happer
haranguer
harasser
harceler
harmoniser
harnacher
harponner
hasarder
hausser
haïr
heurter
hisser
hiverner
homologuer
honorer
horrifier
horripiler
hospitaliser
houspiller
huer
huiler
humaniser
humecter
humer
humidifier
humilier
hurler
hydrater
hypnotiser
hypothéquer
hâler
hâter
héberger
héler
hériter
identifier
idolâtrer
idéaliser
ignorer
illuminer
illusionner
illustrer
imaginer
imbriquer
imiter
immatriculer
immerger
immobiliser
immoler
immortaliser
immuniser
impartir
impatienter
imperméabiliser
implanter
impliquer
implorer
importer
importuner
imposer
impressionner
imprimer
improviser
imprégner
impulser
imputer
inaugurer
incarcérer
incarner
incendier
incinérer
inciser
inciter
incliner
inclure
incommoder
incorporer
incriminer
incruster
inculper
inculquer
incurver
indemniser
indigner
indiquer
indisposer
individualiser
induire
industrialiser
infecter
infirmer
infliger
influencer
infléchir
informer
infuser
inféoder
inférer
ingurgiter
ingérer
inhaler
inhiber
inhumer
initier
injecter
injurier
innocenter
innover
inoculer
inonder
inquiéter
inscrire
insensibiliser
insinuer
inspecter
inspirer
installer
instaurer
instituer
instruire
insuffler
insulter
insérer
intensifier
intenter
intercaler
intercepter
interdire
interloquer
interner
interpeller
interpoler
interposer
interpréter
interroger
interrompre
intervertir
interviewer
intimer
intimider
intituler
intoxiquer
intriguer
introduire
introniser
intégrer
intéresser
intérioriser
invalider
invectiver
inventer
inventorier
inverser
invertir
investir
inviter
invoquer
irradier
irriguer
irriter
isoler
jalonner
jalouser
jauger
jaunir
jeter
joindre
joncher
jouer
jouxter
jucher
juger
juguler
justifier
juxtaposer
kidnapper
klaxonner
labourer
lacer
lacérer
laisser
laminer
lancer
lanciner
laper
lapider
laquer
larder
larguer
lasser
laver
laïciser
lessiver
lester
leurrer
lever
libeller
libéraliser
libérer
licencier
lier
ligoter
liguer
limer
limiter
limoger
liquider
liquéfier
lire
lisser
lister
livrer
localiser
loger
longer
loucher
louer
louper
lubrifier
lustrer
lutiner
luxer
lyncher
lâcher
lécher
légaliser
légitimer
léguer
léser
lézarder
machiner
macérer
magnifier
magnétiser
maintenir
majorer
malaxer
malmener
maltraiter
mandater
manger
manier
manifester
manigancer
manipuler
manoeuvrer
manquer
manutentionner
maquiller
marchander
marier
mariner
marmonner
marmotter
marquer
marteler
martyriser
masquer
massacrer
masser
mastiquer
matelasser
mater
matraquer
matérialiser
maudire
maçonner
maîtriser
menacer
mendier
mener
mentionner
mesurer
mettre
meubler
meurtrir
métaboliser
mijoter
miner
minimiser
minorer
minuter
mirer
miser
mitonner
mitrailler
mobiliser
modeler
moderniser
modifier
modérer
moissonner
molester
monitorer
monnayer
monopoliser
monter
montrer
moraliser
morceler
mordiller
mordre
morigéner
mortifier
motiver
moucharder
moucher
moudre
mouiller
mouler
mouvoir
multiplier
munir
murer
murmurer
museler
muter
mutiler
mystifier
mâcher
mâchonner
mécaniser
méconnaître
mécontenter
médiatiser
méditer
méjuger
mélanger
ménager
mépriser
mériter
mêler
mûrir
nager
narguer
narrer
nasiller
naturaliser
navrer
nettoyer
neutraliser
nier
niveler
noircir
nominer
nommer
normaliser
noter
notifier
nouer
nourrir
noyauter
noyer
nuancer
numéroter
nécessiter
négliger
négocier
objecter
obliger
oblitérer
obscurcir
observer
obséder
obtenir
obturer
occasionner
occire
occuper
octroyer
offenser
offrir
offusquer
omettre
ondoyer
onduler
opposer
oppresser
opprimer
optimiser
opérer
orchestrer
ordonner
organiser
orienter
orner
oser
oublier
ourdir
ourler
outrager
outrer
ouvrir
ovationner
pacifier
paginer
pallier
palper
panacher
panser
parachever
parachuter
parafer
paralyser
paraphraser
parasiter
parcourir
pardonner
parer
parfaire
parfumer
parier
parler
parodier
parquer
parrainer
parsemer
partager
passer
passionner
pasteuriser
pasticher
patenter
patiner
patronner
paumer
paver
pavoiser
payer
peaufiner
peigner
peindre
peiner
peler
pelleter
pencher
pendre
penser
percer
percevoir
percher
percuter
perdre
perfectionner
perforer
perler
permettre
permuter
perpétrer
perpétuer
perquisitionner
persifler
personnaliser
personnifier
persuader
persécuter
perturber
peser
peupler
photocopier
photographier
picorer
picoter
piger
piler
piller
pilonner
piloter
pimenter
pincer
piocher
piper
piquer
pister
pistonner
piétiner
placarder
placer
plafonner
plagier
plaider
plaindre
planer
planifier
planquer
planter
plaquer
plastiquer
plastronner
pleurer
plier
plisser
plomber
plonger
plumer
plâtrer
plébisciter
pocher
poignarder
pointer
pointiller
poinçonner
poisser
poivrer
polariser
politiser
polluer
polycopier
pomper
pomponner
poncer
ponctuer
pondre
pondérer
populariser
porter
poser
posséder
poster
postuler
potasser
poudrer
pouponner
pourchasser
pourfendre
pourrir
poursuivre
pourvoir
pousser
pouvoir
poétiser
pratiquer
prendre
prescrire
pressentir
presser
prier
primer
priser
priver
privilégier
proclamer
procréer
procurer
prodiguer
produire
profaner
professer
profiler
programmer
prohiber
projeter
prolonger
prolétariser
promener
promettre
promouvoir
promulguer
prononcer
pronostiquer
propager
prophétiser
proportionner
proposer
propulser
proroger
proscrire
prospecter
prostituer
protéger
prouver
provoquer
précipiter
préciser
précompter
préconiser
prédestiner
prédire
prédisposer
préfacer
préférer
prélever
préméditer
préoccuper
préparer
préposer
présager
présenter
préserver
présider
présumer
présupposer
prétendre
prétexter
prévenir
prévoir
prêcher
prêter
prôner
psalmodier
psychanalyser
publier
puiser
pulvériser
punir
purger
purifier
putréfier
pâlir
pénaliser
péter
pétrifier
pétrir
pêcher
quadriller
quadrupler
qualifier
questionner
quitter
quémander
quérir
quêter
rabaisser
rabattre
rabibocher
rabioter
raboter
rabougrir
rabrouer
rabâcher
raccommoder
raccomoder
raccompagner
raccorder
raccourcir
raccrocher
racheter
racler
racoler
raconter
racornir
radicaliser
radier
radiodiffuser
radiographier
radoucir
raffermir
raffiner
rafistoler
rafler
rafraîchir
ragaillardir
raidir
railler
raisonner
rajeunir
rajouter
rajuster
ralentir
rallier
rallonger
rallumer
ramasser
ramener
ramollir
ramoner
ranger
ranimer
randomiser
rançonner
rapatrier
rapetasser
rapetisser
rapiécer
rappeler
rapporter
rapprendre
rapprocher
raréfier
raser
rassasier
rassembler
rasseoir
rassurer
rasséréner
ratatiner
rater
ratiboiser
ratifier
rationaliser
rationner
ratisser
rattacher
rattraper
raturer
ravager
ravaler
ravauder
ravigoter
raviner
ravir
ravitailler
raviver
ravoir
rayer
râper
râteler
rebaisser
rebaptiser
rebattre
reboiser
reboucher
rebrousser
rebuter
rebâtir
recaler
receler
recenser
recevoir
recharger
rechausser
rechercher
reclasser
recoller
recommander
recommencer
recomposer
recompter
reconduire
reconnaître
reconquérir
reconsidérer
reconstituer
reconstruire
reconvertir
recopier
recoucher
recoudre
recouper
recourber
recouvrer
recouvrir
recroqueviller
recruter
recréer
rectifier
recueillir
reculer
recycler
recéler
redemander
redescendre
redire
redistribuer
redonner
redorer
redoubler
redouter
redresser
redécouvrir
refaire
refaçonner
refermer
refiler
refleurir
refléter
refondre
reformer
refouler
refroidir
refréner
refuser
regagner
regarder
regonfler
regretter
regrouper
rehausser
rejeter
rejoindre
relancer
relater
relativiser
relaxer
relayer
relever
relier
relire
reloger
relouer
reluquer
relâcher
reléguer
remailler
remanier
remarier
remarquer
remballer
rembarquer
rembarrer
remblayer
rembourser
remboîter
remembrer
remercier
remettre
remeubler
remilitariser
remiser
remmailloter
remmancher
remmener
remodeler
remonter
remontrer
remordre
remorquer
remoudre
remouiller
remouler
rempailler
rempaqueter
rempiler
remplacer
remplir
remplumer
remporter
remuer
remâcher
rencaisser
renchérir
rencontrer
rendormir
rendosser
rendre
renfermer
renflammer
renfler
renflouer
renforcer
rengager
rengainer
renier
renifler
renommer
renouer
renouveler
renseigner
rentrer
renverser
renvoyer
repartager
repasser
repaver
repayer
repeindre
rependre
repenser
repercer
repeupler
repiquer
replacer
replanter
replier
replisser
replonger
replâtrer
repolir
reporter
reposer
repousser
reprendre
repriser
reprocher
reproduire
représenter
repérer
repêcher
requérir
respecter
respirer
resquiller
ressaisir
ressasser
ressemeler
ressentir
resserrer
resservir
ressortir
ressusciter
restaurer
restituer
restreindre
restructurer
retaper
retapisser
retarder
retenir
retenter
retirer
retisser
retordre
retoucher
retourner
retracer
retraduire
retrancher
retranscrire
retransmettre
retravailler
retraverser
retremper
retrousser
retrouver
revaloriser
revendiquer
reverser
revigorer
revisser
revivifier
revivre
revoir
revoler
revêtir
rhabiller
ricocher
rider
ridiculiser
rimer
rincer
riposter
risquer
rissoler
river
riveter
robotiser
roder
rogner
rompre
ronger
ronéotyper
rosir
rosser
rouer
rougir
rouiller
rouler
roussir
rouvrir
rudoyer
rugir
ruiner
ruminer
rythmer
règler
ré-inhumer
réabonner
réabsorber
réacclimater
réaccoutumer
réaccélérer
réactiver
réadapter
réadmettre
réaffirmer
réajuster
réaliser
réanimer
réapprendre
réarmer
réarranger
réassortir
récapituler
réceptionner
réchauffer
réciter
réclamer
récolter
récompenser
réconcilier
réconforter
récrire
récréer
récupérer
récurer
récuser
rédiger
rédimer
réduire
réemployer
réentendre
réexaminer
réexpédier
réfléchir
réformer
réfracter
réfrigérer
réfuter
régaler
régenter
régir
réglementer
régler
régulariser
régénérer
réhabiliter
réhabituer
réimplanter
réintroduire
réintégrer
réinventer
réinviter
réitérer
réjouir
rémunérer
rénover
réoccuper
réordonner
réorganiser
réorienter
réorienter_faveur_de
répandre
réparer
répartir
répartirtre
répercuter
répertorier
répliquer
répondre
réprimander
réprimer
réprouver
républicaniser
répudier
répéter
réquisitionner
réserver
résilier
résorber
résoudre
résumer
rétablir
rétamer
rétorquer
rétracter
rétribuer
rétrocéder
rétrograder
rétrécir
réunifier
réunir
réussir
réveiller
réviser
révolter
révolutionner
révoquer
révéler
révérer
réédifier
rééditer
rééduquer
réélire
réévaluer
rêver
rôtir
s'imaginer
sabler
saborder
saboter
saccader
saccager
sacrer
sacrifier
saigner
saillir
saisir
saler
salir
saloper
saluer
sanctifier
sanctionner
saouler
saper
sarcler
satisfaire
saturer
saucer
saupoudrer
sauter
sauvegarder
sauver
savoir
savonner
savourer
scalper
scandaliser
scander
scarifier
sceller
schématiser
scier
scinder
scléroser
scolariser
scruter
sculpter
se fringuer
seconder
secouer
secourir
sectionner
segmenter
seller
semer
sensibiliser
sentir
sermonner
serrer
servir
sevrer
shooter
sidérer
siffler
siffloter
signaler
signaliser
signer
signifier
sillonner
simplifier
simuler
singer
singulariser
siroter
situer
snober
socialiser
soigner
solder
solenniser
solfier
solidariser
solidifier
solliciter
solutionner
sommer
sonder
sonner
sonoriser
sortir
souder
soudoyer
souffler
souffleter
souhaiter
souiller
soulager
soulever
souligner
soumettre
soupeser
soupçonner
sous-entendre
sous-estimer
soustraire
soutenir
soutirer
soûler
spiritualiser
spolier
spécialiser
spécifier
stabiliser
standardiser
stigmatiser
stimuler
stipendier
stipuler
stocker
stopper
strier
stupéfier
styliser
sténographier
stériliser
subdiviser
subir
subjuguer
sublimer
submerger
subodorer
subordonner
suborner
substituer
subtiliser
subventionner
sucer
sucrer
suffoquer
suggestionner
suggérer
suivre
sulfater
superposer
supplanter
supplicier
supplier
suppléer
supporter
supposer
supprimer
supputer
surcharger
surclasser
surestimer
surgeler
surmener
surmonter
surnommer
surpasser
surprendre
surveiller
survoler
surélever
suréquiper
susciter
suspecter
suspendre
susurrer
suçoter
symboliser
synchroniser
syndiquer
synthétiser
systématiser
sécher
sécréter
séculariser
sécuriser
sédentariser
séduire
sélectionner
séparer
séquestrer
tacher
taillader
tailler
taire
talonner
tambouriner
tamiser
tamponner
tancer
tanner
taper
tapisser
tapoter
taquiner
tarabuster
tarifer
tarir
tartiner
tasser
tatouer
taxer
teindre
teinter
tempérer
tenailler
tendre
tenir
tenter
terminer
ternir
terrasser
terrer
terrifier
terroriser
tester
thésauriser
timbrer
tinter
tirailler
tirer
tirer à soi
tisonner
tisser
titrer
titulariser
tiédir
toiser
tolérer
tomber
tondre
torcher
torchonner
tordre
torpiller
torréfier
tortiller
torturer
totaliser
toucher
touiller
tourmenter
tourner
tracasser
tracer
traduire
trafiquer
trahir
traire
traiter
tramer
trancher
tranquilliser
transcrire
transfigurer
transformer
transfuser
transférer
transgresser
transiter
transmettre
transpercer
transporter
transvaser
traquer
travailler
traverser
travestir
traîner
tremper
tresser
tricoter
trier
trimballer
trinquer
tripler
tripoter
triturer
tromper
tronquer
tronçonner
troquer
troubler
trouer
trousser
trouver
truffer
truquer
trépigner
tuer
tuméfier
turlupiner
tutoyer
tuyauter
tyranniser
tâter
télescoper
télécommander
télégraphier
téléguider
téléphoner
téléviser
témoigner
téter
ulcérer
unifier
uniformiser
unir
universaliser
user
usiner
usurper
utiliser
vacciner
vaincre
valider
valoir
valoriser
vanter
vaporiser
varier
veiller
vendanger
vendre
venger
ventiler
verbaliser
verdir
vernir
vernisser
verrouiller
verser
versifier
vexer
vicier
vidanger
vider
vieillir
vilipender
violenter
violer
virer
viser
visionner
visiter
visser
vitrer
vitrifier
vivifier
vivre
vociférer
voici
voiler
voilà
voir
volatiliser
voler
vomir
voter
vouer
vouloir
vriller
vulcaniser
vulgariser
véhiculer
vénérer
vérifier
vêtir
zigouiller
zyeuter
zébrer
ânonner
ôter
#END

}

package FR_final {
  % 'case' not expected to have children
  % in 2.7: 3 cases
  rule children_case {
    pattern { e:GOV -[case]-> DEP; DEP -[^fixed|conj]-> X;  }
    commands { del_edge e; add_edge GOV -[dep]-> DEP }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GRS for flattening all continuous idioms. The head of each continuous idiom becomes its left-most element. All the elements are linked in a left-right chain with UNK relations.

% Choose one MWE in the sentence
rule choose_mwepos {
  pattern { N[ExtPos,PhraseType=Idiom] }
  without { N -[fixed]-> * }
  commands { N.fix=Head}
}

% Mark all components of the chosen MWE with feature fix=Part and remove the internal dependencies.
rule propagate{
  pattern { N [fix]; e:N -> M; M[InIdiom] }
  commands { M.fix=Part; del_feat M.InIdiom; del_edge e; }
}

% Mark the leftmost component of the MWE with fix=First.
package first {
% The leftmost component is the head of the MWE
  rule head_first {
    pattern { N[fix=Head] }
    without { M[fix]; M < N }
    commands { N.fix=First }
  }

%The leftmost component is not the head of the MWE.
  rule head_not_first {
    pattern { N[fix=Part]; H[fix=Head, PhraseType]; }
    without { H < N }
    without { M[fix]; M < N }
    commands {
      N.fix=First;
      N.ExtPos = H.ExtPos; del_feat H.ExtPos;
      N.PhraseType = H.PhraseType; del_feat H.PhraseType;
      shift H ==> N}
  }
}

rule init_fixed {
  pattern { F[fix=First]; N [fix]; F < N }
  without { * -> N}
  commands { add_edge F -[unk]-> N; N.InIdiom=Yes }
}

package propagate_fixed {
  rule continuous {
    pattern { F[fix=First]; F -[unk]-> L; L[InIdiom=Yes]; N [fix]; L < N }
    without { * -> N }
    commands { add_edge F -[unk]-> N; N.InIdiom=Yes }
  }

  % rule added to deal with discontinuous fixed in Naija "in fact # sey"
  rule discontinuous {
    pattern { F[fix=First]; F -[unk]-> L; L[InIdiom=Yes]; N [fix]; P[!fix]; P < N }
    without { * -> N }
    commands { add_edge F -[dep:fixed]-> N;  }
  }
}

rule clean {
  pattern { N[fix] }
  commands { del_feat N.fix }
}

strat one {
  Seq (
    choose_mwepos,
    Onf (propagate),
    first,
    init_fixed,
    Onf (propagate_fixed),
    Onf (clean),
	)
}

strat flatten_idioms { Iter (one) }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rule clitic_pron{
  pattern{
    V[upos=VERB, ExtPos=VERB, PhraseType=Idiom];
    V -[comp]-> P1; P1[upos=PRON, InIdiom=Yes];
    V -[comp]-> P2; P2[upos=PRON, InIdiom=Yes]}
  commands{del_feat P1.InIdiom}
}

rule pronominal_verb{
  pattern{ V[upos=VERB, ExtPos=VERB, PhraseType=Idiom]; V -[comp]-> P; P[upos=PRON, InIdiom=Yes]}
  commands{ del_feat V.ExtPos; del_feat V.PhraseType; del_feat P.InIdiom}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_flatten_French_idioms{
  Seq(
    Iter(clitic_pron),
    Iter(pronominal_verb),
    Iter(one)
  )
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_main{
  Seq(
    %Onf (FR_init),
    Onf (shared),
    Onf(remove_shared),
    Onf(FR_pron_verb), % Specific treatment of pronominal verbs in French
    specific_expr_init,
    Onf (nom_init),
    Onf (unchained_relations),
    Onf (reverse_case_mark),
    Onf(shift_out_edges),
    Onf(case_mark_relations),
    Onf( reverse_close),
    Onf (sub_relations),
    Onf (FR_mod),
    Onf (FR_udep),
    Onf (rel_extensions),
    Onf (relations),
    Onf (relations_backoff),
    Onf (FR_subj),
    Onf(reverse_aux),
    Onf(shift_out_edges),
    Onf( reverse_close),
    Onf (final),
    specific_expr_close,
    %FR_flatten_French_idioms,
    %Onf (FR_final), % adapt to UD validator constraints
  )
}


