% The "irregular_expr.grs" file includes packages applying a specific treatment to multi-word expressions (MWE), titles (TITLE) and convertes (CONV). What they have in common is the fact that their syntactic behaviour towards the outside world is not regular.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_edges] turns all features INMWE (resp. INTITLE) into a edge MWE (resp. TITLE) from the head to internal nodes of irregular expressions.
package add_edges {
	rule init_mwe {
		pattern { H [_MISC_Type=MWE]; H-> N; N[_MISC_INMWE=Yes] }
		commands { del_feat N._MISC_INMWE; add_edge H -[MWE]-> N }
	}

	rule iter_mwe {
		pattern { H -[MWE]-> M; M -> N; N[_MISC_INMWE=Yes] }
		commands { del_feat N._MISC_INMWE; add_edge H -[MWE]-> N }
	}

	rule init_title {
		pattern { H [_MISC_Type=Title]; H-> N; N[_MISC_INTITLE=Yes] }
		commands { del_feat N._MISC_INTITLE; add_edge H -[TITLE]-> N }
	}

	rule iter_title {
		pattern { H -[TITLE]-> M; M -> N; N[_MISC_INTITLE=Yes] }
		commands { del_feat N._MISC_INTITLE; add_edge H -[TITLE]-> N }
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_nodes] insert a new node for each MWE/TITLE/CONV expression.
% The new node is linked to the head with the HEAD relation and to other elements by a MWE/TITLE relation.
package add_nodes {
	rule mwe {
		pattern{ H [_MISC_EXTPOS,_MISC_Type=MWE] }
		commands{
			add_node MWE :< H;
			add_edge MWE -[MWE]-> H; add_edge MWE -[HEAD]-> H;
			shift_in H =[^MWE|TITLE]=> MWE;
			shift_out H =[MWE]=> MWE;
			MWE.upos = H._MISC_EXTPOS; del_feat H._MISC_EXTPOS;
			MWE.Type = H._MISC_Type; del_feat H._MISC_Type;
		}
	}

	rule title {
		pattern{ H [_MISC_EXTPOS,_MISC_Type=Title] }
		without{ * -[expr]-> H }
		commands{
			add_node TITLE :< H; add_edge TITLE -[TITLE]-> H; add_edge TITLE -[HEAD]-> H;
			shift_in H =[^MWE|TITLE]=> TITLE;
			shift_out H =[TITLE]=> TITLE;
			TITLE.upos = H._MISC_EXTPOS; del_feat H._MISC_EXTPOS;
			TITLE.Type = H._MISC_Type; del_feat H._MISC_Type;
		}
	}

	rule conv {
		pattern{ H [_MISC_EXTPOS,_MISC_Type=Conv] }
		without{ * -[HEAD]-> H }
		commands{
			add_node CONV :< H; add_edge CONV -[CONV]-> H; add_edge CONV -[HEAD]-> H;
			shift_in H =[^MWE|TITLE]=> CONV;
			CONV.upos = H._MISC_EXTPOS; del_feat H._MISC_EXTPOS;
			CONV.Type = H._MISC_Type; del_feat H._MISC_Type;
			CONV.lemma = H.lemma
		}
	}

	% When a MWE is included in a TITLE, the new node must receive a TITLE relation
	rule mwe_in_title {
		pattern { E -[HEAD]-> N; T -[TITLE]-> N; }
		without { T -[TITLE]-> E; }
		commands { add_edge T -[TITLE]-> E; }
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [ext_dep] move dependencies external to the MWE/TITLE/CONV expresion, on the new node.
package ext_dep {
	rule mwe {
		pattern { H -[MWE]-> N; e: N -[^ unk@fixed]-> M}
		without { H -[MWE]-> M; }
		commands { add_edge e:H->M; del_edge e;}
	}

	rule title {
		pattern { H -[TITLE]-> N; e: N -[^ unk@fixed]-> M}
		without { H -[TITLE]-> M; }
		commands { add_edge e:H->M; del_edge e;}
	}

	rule trans {
		pattern { H -[CONV]-> N; e:N -[^ unk@fixed]-> M}
		without { H -[CONV]-> M; }
		commands { add_edge e:H->M; del_edge e;}
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 3 previous packages into one strategy.
strat specific_expr_init {
	Seq (
		Onf(add_edges),
		Onf(add_nodes),
		Onf(ext_dep),
	)
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% replace edges MWE/TITLE by features
% NB in UD_to_SUD, the deep features "@fixed" is introduced in a later step
package del_edges {
	rule mwe_head {
		pattern { MWE -[HEAD]-> H; e:MWE -[MWE]-> H; }
		commands {
			del_edge e;
			H._MISC_EXTPOS = MWE.upos;
			H._MISC_Type = MWE.Type;
		}
	}

	rule mwe {
		pattern { e:MWE -[MWE]-> H }
		without { MWE -[HEAD]-> H }
		commands {
			del_edge e;
			H._MISC_INMWE = Yes;
		}
	}

	rule title_head {
		pattern { TITLE -[HEAD]-> H; e:TITLE -[TITLE]-> H }
		commands {
			del_edge e;
			H._MISC_EXTPOS = TITLE.upos;
			H._MISC_Type = TITLE.Type;
		}
	}

	rule title {
		pattern { e:TITLE -[TITLE]-> H }
		without { TITLE -[HEAD]-> H }
		commands {
			del_edge e;
			H._MISC_INTITLE = Yes;
		}
	}

	rule trans_head {
		pattern { CONV -[HEAD]-> H; e:CONV -[CONV]-> H }
		commands {
			del_edge e;
			H._MISC_EXTPOS = CONV.upos;
			H._MISC_Type = CONV.Type;
		}
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% remove nodes
package del_nodes {
	rule del_specif_expr{
		pattern{ e: N -[HEAD]-> H }
		commands{
			del_edge e;
			shift N ==> H;
			del_node N
		}
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 3 previous packages into one strategy.
strat specific_expr_close {
	Seq (
		Onf(del_edges),
		Onf(del_nodes),
	)
}
