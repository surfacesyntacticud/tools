%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "SUD_to_UD.grs"

% universal conversion
strat main_u {
  Seq (
    Onf (spoken),
    Onf (shared), % Package SHARED must precede SPECIFIC_EXPR_INIT so that feature Shared=Yes is not embedded in Idiom.
    Onf (remove_shared),
    specific_expr_init, % Initialization of a specific treatment for idioms, titles and translated words.
    Onf (nom_init),
    Onf (unchained_relations), % For CONJ relations, chains must be transformed into bouquets before head changes because of conditions on the presence of prepositions, conjunctions and auxiliaries. It is easier to take these conditions into account before head changes (UD_French-GSD : fr-ud-dev_00751)
    Onf (reverse_case_mark),  % Package REVERSE_CASE_MARK precedes packages SUB_RELATIONS and RELATIONS because UD labels of complement relations depend on the category of the complements introduced with a preposition or a conjunction
    Onf (shift_out_edges),
    Onf (case_mark_relations), %Package CASE_MARK_RELATIONS must precede package SUB_RELATIONS because renaming of some SUD relations requires the distinction between case and mark relations. The package must also precede package REVERSE_CLOSE because changes concern only reversed relations (Counter-example : SUD_French-GSD fr-ud-train_03238)
    Onf (reverse_close),
    Onf (sub_relations), % Package SUB_RELATIONS must precede package REL_EXTENSIONS because this package swat extensions on level 2.
    Onf (rel_extensions),
    Onf (relations),
    Onf (relations_backoff),
    Onf (reverse_aux),    % Package REVERSE_AUX follows packages SUB_RELATIONS and RELATIONS because of the dependencies H -> AUX in UD: if H is the target of a dependency, the label of the dependency may depend on the mood of AUX.
    Onf (shift_out_edges),
    Onf (reverse_close),
    Onf (final),
    specific_expr_close, % Closing a specific treatment for idioms, titles and converted words.
    flatten_idioms,
    Onf(remove_UDplus_subtypes)
  )
}

strat main_bej {
  Seq (
    Onf (pre_bej),
    main_u,
    Onf(conj_post_bej),
    Onf(last_errors_post_bej),
  )
}


package pre_bej {
  % Change relation "aff:xxx" into "xxx:aff"
  rule aff {
    pattern { e:M -[1=aff,2=*]-> N }
    commands { e.1 = e.2; e.2=aff }
  }

  % Remove whitespaces in XPOS values
  rule xpos {
    pattern { N[xpos=lex.in] }
    commands { N.xpos=lex.out }
  }
#BEGIN lex
in	out
%----------
V1, IRG	V1,IRG
V2, IRG	V2,IRG
TAM, PNG	TAM,PNG
AUX, EMPH	AUX,EMPH
V1, IRG, NEG	V1,IRG,NEG
N, COP	N,COP
PTCL, NEG	PTCL,NEG
#END
}

package conj_post_bej {
  rule conj {
    pattern { e:N -[conj]-> M; }
    commands { del_edge e; add_edge N -[dep:conj]-> M; }
  }

  rule redup {
    pattern { e:N -[conj:redup]-> M; }
    commands { del_edge e; add_edge N -[dep:redup]-> M; }
  }
}


package last_errors_post_bej {
  rule BEJ_MV_NARR_03_camel_080-085 {
    pattern {
      e: N -[det]-> X; f: X -[reparandum]-> D; X [upos=X]
    }
    commands {
      del_edge e; del_edge f;
      add_edge N -[det]-> D; add_edge D -[reparandum]-> X;
    }
  }

  rule WAZL_15_MC-Abi_MG__93 {
    pattern {
      G -[nsubj:aff]-> O_1;
      e: G -[nsubj:aff]-> O_2;
      G -[nsubj]-> S;
      O_1 << O_2
    }
    commands { del_edge e; add_edge G -[dep]-> O_2; }
  }
}
