%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD+_to_SUD.grs"


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
% Ex :  fr-ud-train_05544 -  Paris génère chaque jour, par temps sec, entre 800.000 et 900.000 m3 d'eaux usées.
  rule nummod_det{
    pattern{e:H -[nummod]-> D; D << H}
    without{H -[det]-> *}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean a-t-il été payé ?
  rule repeat_subj{
    pattern{
     V -[1=csubj|nsubj]->  SUBJ1;
     e:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il];
     SUBJ1 << V; SUBJ1 << SUBJ2}
    without{SUBJ1[PronType=Int|Rel,lemma=que]} % Ex: Qu'arrive-t-il ? - la mésaventure qu'il m'est arrivée
    commands{del_edge e; add_edge V -[subj@expl]-> SUBJ2;}
  }

% Pronouns "dont and "en" dependent on nominals are processes as all noun complements.
  rule udep_dont-en{
    pattern{ e:H -[nmod]-> D; D[upos=PRON, lemma=dont|en]}
    commands{del_edge e; add_edge H -[udep]-> D}
  }

% % Adverbs with a direct object.By default, the relation between an adverb and one of its arguments is COMP:OBL
%   rule adv_obj(lex from "lexicons/adv_obj.lp") {
%     pattern{
%       ADV[upos=ADV,lemma=lex.adv];
%       e:ADV -[ccomp]-> ARG}
%     commands{ del_edge e; add_edge ADV -[comp:obj]-> ARG}
%   }
  
% % Adverbial locutions with a direct object.By default, the relation between an adverbial locution and one of its arguments is COMP:OBL
%   rule adv-loc_obj(lex from "lexicons/adv-mwe_obj.lp") {
%     pattern{
%       LOC[upos=ADV];
%       LOC -[HEAD]-> H; H[lemma=lex.head];
%       LOC -[MWE|fixed]-> D; D[lemma=lex.dep];
%       e:LOC -[ccomp]-> ARG}
%     commands{ del_edge e; add_edge LOC -[comp:obj]-> ARG}
%   }
  
  
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{

% Judgment adverbs rise from verbs to their auxiliaries.
% Ex: Il a certes beaucoup travaillé. - il est certes un bon travailleur.
  rule adv-judgment_aux(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV} % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
  
% Judgment adverbs rise from the adposition objects to their adposition.
% Ex: il est en vacances heureusement.
  rule adv-judgment_case(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
  
% Judgment adverbial locutions rise from verbs to their auxiliaries.
% Ex : Il a été mon directeur par ailleurs.
  rule adv-loc-judgment_aux(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbial locutions rise from the adposition objects to their adposition.
% Ex: Il a été en congé par ailleurs.
  rule adv-loc-judgment_case(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }


% Tense adverbs rise from verbs to their auxiliaries.
% Il a été malade hier.
  rule aux_adv-tense(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Tense adverbs rise from the adposition objects to their adposition.
% Il a été en congé hier.
  rule case_adv-tense(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=ADP];H -[comp:obj]-> D;  D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some relations have moved up from the old head D to the new head H incorrectly in specific cases in French. The move must be cancelled.
package FR_shift_out_back_edges{

% UDEP relations targeting the pronouns "dont" and "en" must move from the auxiliaries to their argument.
  rule dont-en_aux{
    pattern {
      H[upos=AUX];
      H -[1=comp,2=aux|pred]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    without{ H -[1=comp,2=pred]-> D; H[upos <> AUX]}
    without{H -[1=comp,2=pred]-> D; H -[mod]-> D1} %Ex: fr-ud-dev_01506 - ...la sortie de leur pays de la zone Euro en sera inéluctable
    commands{add_edge e: D -> D1;del_edge e}
  }

% UDEP relations targeting the pronouns "dont" and "en" must move from the adpositions to their object.
% Ex: fr-ud-train_00459 - Elle fait partie de le Freedom Group dont Cerberus Capital Management est un de les actionnaires depuis 2009.
  rule dont_en_adp{
    pattern {
      H[upos=ADP];
      H -[comp:obj]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    commands{add_edge e: D -> D1;del_edge e}
  }

% Quantity adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-quant_aux(lex from "lexicons/adv_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D; 
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    without{D1[Polarity=Neg]}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Quantity adverbial locutions that are modifiers must move from the auxiliaries to their argument.
  rule advloc-quant_aux(lex from "lexicons/advloc_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      e: H -[mod]-> D1;
      D1[upos=ADV];
      D1 -[HEAD]-> H1;
      H1[lemma=lex.head];
      D1 -[IDIOM]-> D2;
      D2[lemma=lex.dep];
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }
  
% Manner adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-manner_aux(lex from "lexicons/adv_manner.lp"){
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Adverb "aussi used as a quantity adverb must move from the auxiliaries to their argument.
  rule aux_aussi_comp{
    pattern{
      H[upos=AUX];H -[1=comp,2=pred]-> D;  D[upos=ADJ|ADV];
      e:H -[mod]-> D1;
      D1[upos=ADV,lemma=aussi];
      H << D1; D1 << D;
      CONJ[upos=SCONJ,lemma=que]; D1 -[comp:obj]-> CONJ}
    commands{add_edge D -[mod]-> D1; del_edge e}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% French pronominal verbs are considered as idioms. In the conversion to SUD, their idiomatic characteristic is added.
package FR_pron_verb{
% The pronominal verb has a unique clitic pronoun marking its pronominal feature.
% Ex: les gens s'enfuient.
  rule verb1{
    pattern{
      V[upos=VERB,!_MISC_ExtPos, !_MISC_PhraseType];
      V -[comp]-> PRON; PRON [upos=PRON]}
    without{V -[comp]-> PRON1; PRON1 [upos=PRON]}
    commands{
      V._MISC_ExtPos=VERB; V._MISC_PhraseType=Idiom;
      PRON._MISC_InIdiom=Yes}
  }

% The pronominal verb has two clitic pronouns marking its pronominal feature.
% Ex: ils s'en prennent aux plus faibles.
  rule verb2{
    pattern{
      V[upos=VERB,!_MISC_ExtPos, !_MISC_PhraseType];
      V -[comp]-> PRON1; PRON1 [upos=PRON];
      V -[comp]-> PRON2; PRON2 [upos=PRON]; PRON1 << PRON2}
    commands{
      V._MISC_ExtPos=VERB; V._MISC_PhraseType=Idiom;
      PRON1._MISC_InIdiom=Yes; PRON2._MISC_InIdiom=Yes}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_main {
  Seq(
    specific_expr_init, 
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    reverse_relations.main,
    Onf(FR_shift_out_edges),
    Onf(FR_shift_out_back_edges),
    Onf (minimize_conj_dep),
    Onf (add_conj_emb),
    Onf (chained_relations),
    specific_expr_close,
    Onf(FR_pron_verb),
  )
}

