%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD+_to_SUD.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
package pron_verb{
  rule verb1{
    pattern{
      V[upos=VERB,!_MISC_ExtPos, !_MISC_PhraseType];
      V -[dep:comp]-> PRON; PRON [upos=PRON]}
    without{V -[dep:comp]-> PRON1; PRON1 [upos=PRON]}
    commands{
      V._MISC_ExtPos=VERB; V._MISC_PhraseType=Idiom;
      PRON._MISC_InIdiom=Yes}
  }

  rule verb2{
    pattern{
      V[upos=VERB,!_MISC_ExtPos, !_MISC_PhraseType];
      V -[dep:comp]-> PRON1; PRON1 [upos=PRON];
      V -[dep:comp]-> PRON2; PRON2 [upos=PRON]; PRON1 << PRON2}
    commands{
      V._MISC_ExtPos=VERB; V._MISC_PhraseType=Idiom;
      PRON1._MISC_InIdiom=Yes; PRON2._MISC_InIdiom=Yes;}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
% Ex :  fr-ud-train_05544 -  Paris génère chaque jour, par temps sec, entre 800.000 et 900.000 m3 d'eaux usées.
  rule num_det{
    pattern{e:H -[nummod]-> D; D << H}
    without{H -[det]-> *}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean est-il payé ?
  rule repeat_subj{
    pattern{
     V -[1=csubj|nsubj]->  SUBJ1;
     e:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il];
     SUBJ1 << V; SUBJ1 << SUBJ2}
    without{SUBJ1[PronType=Int|Rel,lemma=que]}
    commands{del_edge e; add_edge V -[subj@expl]-> SUBJ2;}
  }

  rule udep_dont-en{
    pattern{ e:H -[nmod]-> D; D[upos=PRON, lemma=dont|en]}
    commands{del_edge e; add_edge H -[udep]-> D}
  }

% Adverbs with a direct object.By default, the relation between an adverb and one of its arguments is COMP:OBL
  rule adv_obj(lex from "lexicons/adv_obj.lp") {
    pattern{
      ADV[upos=ADV,lemma=lex.adv];
      e:ADV -[ccomp]-> ARG}
    commands{ del_edge e; add_edge ADV -[comp:obj]-> ARG}
  }
  
% Adverbial locutions with a direct object.By default, the relation between an adverbial locution and one of its arguments is COMP:OBL
  rule adv-loc_obj(lex from "lexicons/adv-mwe_obj.lp") {
    pattern{
      LOC[upos=ADV];
      LOC -[HEAD]-> H; H[lemma=lex.head];
      LOC -[MWE|fixed]-> D; D[lemma=lex.dep];
      e:LOC -[ccomp]-> ARG}
    commands{ del_edge e; add_edge LOC -[comp:obj]-> ARG}
  }
  
  
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{
   
  rule adv-judgment_aux(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
  
  rule adv-judgment_case(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
  
  rule adv-mwe-judgment(lex from "lexicons/adv-mwe_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

  rule adv-mwe-judgment_case(lex from "lexicons/adv-mwe_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }


  rule aux_adv-tense(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

  rule case_adv-tense(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=ADP];H -[comp:obj]-> D;  D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some relations have moved up from the old head D to the new head H incorrectly in specific cases in French. The move must be cancelled.
package FR_shift_out_back_edges{

  rule aux_dont_en{
    pattern {
      H[upos=AUX];
      H -[1=comp,2=aux|pred]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -> D1;
      D1 << H}
    without{ H -[1=comp,2=pred]-> D; H[upos <> AUX]}
    without{H -[1=comp,2=pred]-> D; H -[mod]-> D1} %Ex: fr-ud-dev_01506 - ...la sortie de leur pays de la zone Euro en sera inéluctable
    commands{add_edge e: D -> D1;del_edge e}
  }

  rule case_dont_en{
    pattern {
      H[upos=ADP];
      H -[comp:obj]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -> D1;
      D1 << H}
    commands{add_edge e: D -> D1;del_edge e}
  }
  
  rule aux_adv-quant_comp(lex from "lexicons/adv_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D; 
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    without{D1[Polarity=Neg]}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

  rule aux_adv-mwe-quant_comp(lex from "lexicons/adv-mwe_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      e: H -[mod]-> D1;
      D1[upos=ADV];
      D1 -[HEAD]-> H1;
      H1[lemma=lex.head];
      D1 -[IDIOM]-> D2;
      D2[lemma=lex.dep];
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }
  
  rule aux_adv-manner_comp(lex from "lexicons/adv_manner.lp"){
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

  rule aux_aussi_comp{
    pattern{
      H[upos=AUX];H -[1=comp,2=pred]-> D;  D[upos=ADJ|ADV];
      e:H -[mod]-> D1;
      D1[upos=ADV,lemma=aussi];
      H << D1; D1 << D;
      CONJ[upos=SCONJ,lemma=que]; D1 -[comp:obj]-> CONJ}
    commands{add_edge D -[mod]-> D1; del_edge e}
  }



}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_main {
  Seq(
    Onf(pron_verb),
    specific_expr_init, % Initialization of a specific treatment for MWE, titles and converted words.
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    reverse_relations.main,
    Onf(FR_shift_out_edges),
    Onf(FR_shift_out_back_edges),
    Onf (minimize_conj_dep),% package MINIMIZE_CONJ_DEP must follow shift packages because a dependance can shift from a coordination to an ascendant. Ex: fr-ud-dev_00446 -entre 3 et 6 généralement
    Onf (add_conj_emb),
    Onf (chained_relations),
    specific_expr_close, % Closing a specific treatment for MWE, titles and translated words.
    Onf(remove_useless_emb),
  )
}

