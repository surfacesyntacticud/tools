%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD+_to_SUD.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must raise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{
  rule cop_obl{
    pattern{ H -[cop]-> D; e: D -[1=obl]-> D1; H << D1; D1 << D}
    commands{add_edge e:H -> D1; del_edge e}
  }

  rule ne_pas {
    pattern {
      G -> N1; N1 [lemma="ne"];
      N2 [Polarity=Neg, upos=ADV, lemma <> que];
      G << N2; G -[^conj]-> H; e: H -[advmod]-> N2;
    }
    commands {
      del_edge e; add_edge G -[mod]-> N2;
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
  rule num_det{
    pattern{D[upos=NUM]; e:H -[nummod]-> D; D << H}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean est-il payÃ© ?
  rule repeat_subj{
    pattern{
     e1:V -[1=csubj|nsubj]->  SUBJ1; SUBJ1 << V;
     e2:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il]; SUBJ2 >> V}
    commands{
      e1.1=subj;
      del_edge e2; add_edge V -[subj@expl]-> SUBJ2;}
  }

 % Relation between a verb and an argument in the form of a finite clause, which is an oblique complement introduced with "que". By default, CCOMP relations are transformed into COMP:OBJ relations. In this case, they are transformed into COMP:OBL relations.
  rule verb_compobl_ccomp (lex from "lexicons/verb_with_deobj_fin-verb.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[ccomp]-> C;
      C[upos=SCONJ,lemma=que]}
    commands { del_edge e; add_edge H -[comp:obl]-> C }
  }

% Relation between a verb with affix and an argument in the form of a finite clause, which is an oblique complement introduced with "que". By default, CCOMP relations are transformed into COMP:OBJ relations. In this case, they are transformed into COMP:OBL relations.
  rule verb_aff_compobl_ccomp (lex from "lexicons/aff_verb_with_deobj_fin-verb.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[ccomp]-> C;
      C[upos=SCONJ,lemma=que];
      AFF[upos=PRON, lemma=lex.aff]; H -[expl]-> AFF}
    commands { del_edge e; add_edge H -[comp:obl]-> C }
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_main {
  Seq(
    Onf (add_conj_emb),
    specific_expr_init, % Initialization of a specific treatment for MWE, titles and translated words.
    reverse_relations.main,
    Onf (minimize_conj_dep),
    Onf(FR_shift_out_edges),
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    Onf (chained_relations),
    specific_expr_close, % Closing a specific treatment for MWE, titles and translated words.
    Onf(remove_useless_emb),
    Onf(add_deep_fixed), % in SUD, INMWE becomes @fixed
  )
}

