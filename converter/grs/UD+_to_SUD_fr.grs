%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD+_to_SUD.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must raise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{
  rule cop_obl{
    pattern{ H -[cop]-> D; e: D -[obl:mod]-> D1; H << D1; D1 << D}
    commands{add_edge e:H -> D1; del_edge e}
  }

  % rule aux_obl{
  %   pattern{ H -[1=aux]-> D; e: D -[obl:mod]-> D1}
  %   commands{add_edge e:H -> D1; del_edge e}
  % }
  
  rule ne_pas {
    pattern {
      G -> N1; N1 [lemma="ne"];
      N2 [Polarity=Neg, upos=ADV, lemma <> que];
      G << N2; G -[1=aux|cop]-> H; e: H -[advmod]-> N2;
    }
    commands {
      del_edge e; add_edge G -[mod]-> N2;
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
% Ex :  fr-ud-train_05544 -  Paris génère chaque jour, par temps sec, entre 800.000 et 900.000 m3 d'eaux usées.
  rule num_det{
    pattern{e:H -[nummod]-> D; D << H}
    without{H -[det]-> *}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean est-il payé ?
  rule repeat_subj{
    pattern{
     e1:V -[1=csubj|nsubj]->  SUBJ1; SUBJ1 << V;
     e2:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il]; SUBJ2 >> V}
    commands{
      e1.1=subj;
      del_edge e2; add_edge V -[subj@expl]-> SUBJ2;}
  }

 % Relation between the verb "avoir" and a direct object in the form of an infinitive clause introduced with "de". By default, CCOMP relations introduced with "de" are transformed into COMP:OBL relations, but in this case, they are transformed into COMP:OBJ relations.
  rule verb-avoir_compobj_ccomp {
    pattern {
      H[upos=VERB,lemma=avoir]; e:H -[ccomp]-> C;
      C[upos=ADP,lemma=de]}
    without{H -[1=obj]-> *}
    commands { del_edge e; add_edge H -[comp:obj]-> C }
  }

% Relation between a verb and an argument in the form of a finite clause, which is an oblique complement introduced with "que". By default, CCOMP relations are transformed into COMP:OBJ relations, but in this case, they are transformed into COMP:OBL relations.
  rule verb_compobl_ccomp (lex from "lexicons/verb_with_deobj_fin-verb.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[ccomp]-> C;
      C[upos=SCONJ,lemma=que]}
    commands { del_edge e; add_edge H -[comp:obl]-> C }
  }

% Relation between a verb with affix and an argument in the form of a finite clause, which is an oblique complement introduced with "que". By default, CCOMP relations are transformed into COMP:OBJ relations, but in this case, they are transformed into COMP:OBL relations.
  rule verb_aff_compobl_ccomp (lex from "lexicons/aff_verb_with_deobj_fin-verb.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[ccomp]-> C;
      C[upos=SCONJ,lemma=que];
      AFF[upos=PRON, lemma=lex.aff]; H -[expl]-> AFF}
    commands { del_edge e; add_edge H -[comp:obl]-> C }
  }


 % Relation between a verb and an argument in the form of an infinitive clause, which is a direct object introduced with "de". By default, these relations, which are XCOMP relations in UD, are transformed into COMP:OBL@X relations, but in this case, they are transformed into COMP:OBJ@X relations.
  rule verb_compobj_xcomp (lex from "lexicons/verb_with_obj_de_inf.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[xcomp]-> C;
      C[upos=ADP,lemma=de]}
    without{H -[1=obj]-> OBJ}
    commands { del_edge e; add_edge H -[comp:obj@x]-> C }
  }

 % Relation between a verb and an argument in the form of an infinitive clause, which is a direct predicative complement, the subject of the infinitive being the subject of the governor verb. In this case, the XCOMP relation is transformed into COMP:PRED@X relation.
  rule verb_comppred_xcomp-inf (lex from "lexicons/verb_with_pred_inf.lp") {
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[xcomp]-> C;
      C[upos=AUX|VERB,VerbForm=Inf] }
    commands { del_edge e; add_edge H -[comp:pred@x]-> C }
  }
  
 % Relation between a verb and an argument in the form of a participial clause introduced with a conjunction, which is a predicative complement, the subject of the participle being the subject of the governor verb. In this case, the XCOMP relation is transformed into COMP:PRED@X relation.
  rule verb_comppred_xcomp-part(lex from "lexicons/verb_with_pred-ind_part.lp"){
    pattern {
      H[upos=VERB,lemma=lex.verb]; e:H -[xcomp]-> C;
      C[upos=SCONJ,lemma=lex.conj]; C -[mark]-> D;
      D[upos=AUX|VERB,VerbForm=Part] }
    commands { del_edge e; add_edge H -[comp:pred@x]-> C }
  }
  
 % Relation between the verb "être" and an argument in the form of a clause, which is a predicative complement. In this case, the CCOMP relation is transformed into COMP:PRED relation.
  rule verb-etre_comppred_ccomp  {
    pattern {H[upos=VERB,lemma="être"]; e:H -[ccomp]-> C}
    commands { del_edge e; add_edge H -[comp:pred]-> C }
  }
  
 % % Relation between the verb "être" and an argument in the form of a clause, which is a predicative complement. In this case, the CCOMP relation is transformed into COMP:PRED relation.
 %  rule verb-etre_comppred_xcomp  {
 %    pattern {H[upos=VERB,lemma="être"]; e:H -[xcomp]-> C}
 %    commands { del_edge e; add_edge H -[comp:pred@x]-> C }
 %  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat FR_main {
  Seq(
    specific_expr_init, % Initialization of a specific treatment for MWE, titles and converted words.
    reverse_relations.main,
    Onf (minimize_conj_dep),
    Onf(FR_shift_out_edges),
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    Onf (add_conj_emb),
    Onf (chained_relations),
    specific_expr_close, % Closing a specific treatment for MWE, titles and translated words.
    Onf(remove_useless_emb),
    Onf(add_deep_fixed), % in SUD, INMWE becomes @fixed
  )
}

