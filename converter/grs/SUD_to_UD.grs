%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The "irregular_expr.grs" file includes packages applying a specific treatment to idioms, titles and converted words. What they have in common is the fact that their syntactic behaviour towards the outside world is not regular.
include "utils/irregular_expr.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The "UD_flatten_idioms.grs" file contains a GRS for flattening all continuous idioms in UD. The head of each continuous idiom becomes its left-most element. All the elements are linked in a left-right chain with UNK relations.
include "utils/UD_flatten_idioms.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some SUD native corpora contain additional anntations specific to spoken language (SUD_Beja-NSC, SUD_French-Spoken and SUD_Naija-NSC)
% NB: this package can be applied to non-spoken data on which it will have no effect.
package spoken {
  % Remove `scrap` deep extension
  rule scrap {
    pattern { e: N -[deep=scrap]-> M; }
    commands { del_feat e.deep; M.Scrap=Yes }
  }

  rule conjcoord {
    pattern { e: N -[conj:coord]-> M; }
    commands { del_edge e; add_edge N -[conj]-> M; }
  }

  rule conjappos {
    pattern { e: N -[conj:appos]-> M; }
    commands { del_edge e; add_edge N -[appos]-> M; }
  }

  rule modappos {
    pattern { e: N -[mod:appos]-> M; }
    commands { del_edge e; add_edge N -[appos]-> M; }
  }


%  rule conjdicto {
%    pattern { e: N -[conj:dicto]-> M; }
%    commands { del_edge e; add_edge N -[reparandum]-> M; }
%  }

  % TODO: conj:dicto should be reverserd when change into reparandum: the rule below builds non projective punct, it should be refined!
  rule conjdicto {
    pattern { 
      e: N -[conj:dicto]-> M; 
    }
    without { M -[conj:dicto]-> * }
    without { N -[conj:dicto]-> M2; M << M2 }
    commands { 
      del_edge e; 
      shift_in N ==> M;   % reparandum should be reversed (see: https://surfacesyntacticud.github.io/guidelines/u/oral_language/conj_dicto/)
      shift_out N =[punct]=> M;
      add_edge M -[reparandum]-> N; }
  }
  
  rule no_dep_on_cc {
    pattern { H -[cc]-> C; e:  C -[^reparandum|conj:dicto|conj]-> N }
    without { e.label = unk; N.InIdiom=Yes } % Except UD "fixed"
    commands {
      add_edge f: H -> N; f.label = e.label;
      del_edge e
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependencies of coordinations to their right  are marked in SUD with feature Shared=Yes and they are attached at the rightmost conjunct. In UD, they are attached at the head of the coordination and feature  Shared=Yes is useless.
package shared {

% The shared dependent is directly attached at the head of the last conjunct.
  rule move_relation {
    pattern {
      N1 -[1=conj]-> N2;
      e: N2 -> D; D[Shared=Yes]; N2 << D }
  %  without{ N2 -[orphan]-> D; H -[^ conj]-> N1} %Ex : SUD_FRENCH-GSD fr-ud-train_13715
    commands {
      add_edge f: N1 -> D; f.label = e.label;
      del_edge e
    }
  }

% The shared dependent is attached at the head of the last conjunct via a COMP:OBJ relation.
% Cex: fr-ud-train_13095 - sur 165 patients traités pour une borréliose de Lyme en phase 2 ou 3, et malgré 3 mois ou plus de traitements antibiotiques (dont au minimum deux semaines au ceftriaxone)
  rule move_compobj_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[1=comp,2=obj]-> D1; N1 << D1;
      N2 -[1=comp,2=obj]-> D2; N2 << D2;
      N1.upos=N2.upos;
      e: D2 -[1=comp|mod|udep]-> D; D[Shared=Yes]; D2 << D; }
    without{D2 -[1=comp]-> D; D1 -[1=comp]-> D3} %Ex: fr-ud-test_00145 - quand on en détruit et qu' on en créé 20.000
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }

% The shared dependent is attached at the head of the last conjunct via a MOD relation on the right of its governor.
% Ex: fr-ud-train_12393 - le 6 mai et le 15 juin 1825
  rule move_mod-right_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[mod]-> D1; N1 << D1;
      N2 -[mod]-> D2; N2 << D2;
      e: D2  -[1=comp|mod]-> D; D[Shared=Yes]; D2 << D}
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }

% The shared dependent is attached at the head of the last conjunct via a MOD relation on the left of its governor.
% Ex: fr-ud-train_10344 - plus économiquement ou plus adéquatement que les produits
  rule move_mod-left_distant-relation {
    pattern {
      N1 -[1=conj]-> N2;
      N1 -[mod]-> D1; N1 >> D1;
      N2 -[mod]-> D2; N2 >> D2;
      e: D2  -[1=comp|mod]-> D; D[Shared=Yes]}
    commands {
      add_edge f: D1 -> D; f.label = e.label;
      del_edge e;
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%After the shared dependent has moved to the first conjunct, all features "Shared" are removed.
rule remove_shared {
  pattern {D[Shared]}
  commands {del_feat D.Shared}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feature "nom" is used to deal with all nominals in a uniform way.
package nom_init {
% All adverbs, numbers and symbols that are direct objects are considered nominal.
  rule nom_comp {
    pattern {A[upos=ADJ|ADV|INTJ|NUM|SYM,!nom]; H -[1=comp, 2=obj]-> A}
    without{ H[upos=ADP|SCONJ]; A[upos=ADJ|ADV]}
    without{A[upos=ADV]; * -[IDIOM]-> A}
    commands {A.nom=y}
  }

% All words with a determiner are considered nominal.
  rule nom_det {
    pattern {N[upos<>NOUN|PRON|PROPN|X,!nom]; N -[det]-> *}
    commands {N.nom=y}
  }

% All words with NOUN, PRON, PROPN, SYM, X as POS are considered nominal.
  rule nom_noun {
    pattern {N[upos=NOUN|PRON|PROPN|X,!nom]}
    commands {N.nom=y}
  }

% All numerals following their gouvernor are considered nominal.
  rule nom_num_after {
    pattern {N[upos=NUM,!nom]; H -> N; H << N}
    commands {N.nom=y}
  }

% All numerals that are verb modifiers are considered nominal.
  rule nom_num_mod {
    pattern {N[upos=NUM,!nom]; H[upos=ADP|AUX|VERB]; H -[mod]-> N}
    commands {N.nom=y}
  }

% All adverbs, numbers and symbols that are subjects are considered nominal.
  rule nom_subj {
    pattern {A[upos=ADJ|ADV|SYM|NUM,!nom]; H -[1=subj]-> A}
    commands {A.nom=y}
  }

% A scrapped determiner is considered nominal
  rule scrap {
    pattern {A[upos=DET,Scrap=Yes,!nom]; }
    commands {A.nom=y}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dependencies of type FLAT, FIXED or CONJ that are chained are reorganized into bouquets.
package unchained_relations {
  rule flat {
    pattern { H -[1=flat]-> D1;e: D1 -[1=flat]-> D2 }
    without { * -[1=flat]-> H; }
    commands { add_edge f: H -> D2; f.label=e.label; del_edge e; }
  }

  rule fixed {
    pattern {
      H -[unk]-> D1; * -[IDIOM]-> D1;
      e: D1 -[unk]-> D2; * -[IDIOM]-> D2}
    without { * -[unk]-> H;  * -[IDIOM]-> H}
    commands { del_edge e; add_edge H -[unk]-> D2; }
  }

  rule conj {
    pattern { H -[1=conj]-> D1;e: D1 -[conj]-> D2 }% Dependency H -> D1 can be an embedded coordination. Ex: fr-ud-dev_01028 - l'art sacré et le profane, ou l'absence de progrès
    commands { del_edge e; add_edge H -[conj]-> D2 }
  }

% Embedded coordinations.
  rule conj_emb {
    pattern { H -[conj@emb]-> D1;e: D1 -[conj@emb]-> D2 }
    commands { del_edge e; add_edge H -[conj@emb]-> D2 }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The relations with prepositions and conjunction of subordination as their heads are reversed.
package reverse_case_mark {
% The heads are reversed from the most internal to the most external. The source and the target of the reversed relation are marked "rev = y" so that loops are not possible.
  rule rev_head {
    pattern {e:H -[comp:obj|comp:aff]-> D; H[upos= ADP|CCONJ|PART|SCONJ]}
    without{D[upos= ADP|CCONJ|PART|SCONJ]; D -[1=comp,2=obj|aff]-> D1}
    % the following without was added for the conversion of LAG_11_Adeniyi-Lifestory_MG__131 in SUD_Naija-NSC
    without {H -[comp:obj|comp:aff]-> D2; H[upos= ADP|CCONJ|PART|SCONJ]; D << D2} 
    commands {
      e.rev=y;
      add_edge f:D -> H; f.label = e.label;
      del_edge e;
      shift_in H =[^IDIOM|TITLE|CONV]=> D;
      shift_out H =[1=case|mark]=> D;
    }
  }

}

%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H.
package shift_out_edges{
  rule all{
    pattern{
      H -[rev=y]-> D;
      e: D -> D1}
    without{ D -[1=comp|conj|expr|flat|goeswith|HEAD|IDIOM|TITLE|CONV]-> D1}
    without{ D -[1=appos]-> D1; D1 << H; }
    without{D -[punct]-> D2; D -[punct]-> D1; D1.lemma = D2.lemma; D >> D1; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = ")"; D2.lemma = "(";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "»"; D2.lemma = "«";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "]"; D2.lemma = "[";
      D2 << D; D << D1}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D2.lemma = ")"; D1.lemma = "(";
      D1 << D; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "»"; D2.lemma = "«";
      D1 << D; D << D2}
    without{
      D -[punct]-> D2; D -[punct]-> D1; D1.lemma = "]"; D2.lemma = "[";
      D1 << D; D << D2}
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }

  rule prep_dep{
    pattern{
      D[upos=ADP]; H -[1=comp,2=obj,rev=y]-> D;
      e:D -[^ conj|CONV|HEAD|IDIOM|TITLE]-> D1}
    commands {
      add_edge f:H -> D1; f.label = e.label;
      del_edge e
    }
  }

  rule embedding_punct{
    pattern{
      H -[rev=y]-> D;
      e1: D -[punct]-> P1; P1 << D; P1 << H;
      e2: D -[punct]-> P2; P2 >> D; P2 >> H}
    without{P1[lemma="."|";"|":"|"\'"]}
    without{P2[lemma="."|";"|":"|"\'"]}
    without{P1.lemma = "("; P2.lemma <> ")"}
    without{P1.lemma = "«"; P2.lemma <> "»"}
    without{P1.lemma = "["; P2.lemma <> "]"}
    without{P1.lemma = "{"; P2.lemma <> "}"}
    commands{
      add_edge H -[punct]-> P1; del_edge e1;
      add_edge H -[punct]-> P2; del_edge e2}
  }

  rule conj{
    pattern{H -[rev=y]-> D; e:D -[1=conj]-> D1; D.upos <> D1.upos}
    without{D1 << H} %Ex : UD_French-GSD  fr-ud-train_14326
    without{D[upos=AUX]; D1[upos=VERB]; H >> D1}%Ex: UD_French-GSD fr-ud-train_06092
    without{D[upos=AUX]; D1[upos=VERB]; H1 -> D; H1 >> D1} %Ex: UD_French-GSD fr-ud-train_09763
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }

  rule conj_right_headed{ %% Added for Beja !
    pattern{H -[rev=y]-> D; e:D -[1=conj]-> D1; D.upos <> D1.upos ;
      D1 << D; % conj is right-headed
    }
    without{D1 >> H}
    without{D[upos=AUX]; D1[upos=VERB]; H << D1}
    without{D[upos=AUX]; D1[upos=VERB]; H1 -> D; H1 << D1}
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }



}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD relations with adpositions or conjonctions of subordination are renamed as case or mark UD relations.
package case_mark_relations {
% Adpositions introducing nominals are case dependent.
% Ex: à Paris - comme à Paris - il ira plutôt à Lyon qu'à Paris.
  rule case_nom_adp{
    pattern{ e:H -[1=comp,2=obj|aff,rev=y]-> D; H[nom=y]; D[upos=ADP|PART] }
    commands {e.1=case}
  }

% Conjunctions introducing nominals without adpositions between them and the conjunction are case dependent.
% Ex: Lyon est plus près que Paris.
  rule case_nom_conj{
    pattern{ e:H -[1=comp,2=obj|aff,rev=y]-> D; H[nom=y];D[upos=CCONJ|SCONJ] }
    without{H -> ADP; ADP[upos=ADP|PART]; D << ADP; ADP << H}
    without{H -> ADP; ADP[upos=ADP|PART]; D >> ADP; ADP >> H}
    commands {e.1=case}
  }

% Adpositions introducing adjectives or adverbs are case dependent.
% Ex: dès demain - en continu
  rule case_pred_adp{
    pattern{ e:H -[1=comp,2=obj|aff,rev=y]-> D; H[upos=ADV|ADJ];D[upos=ADP|PART] }
    % There is no conjunction between the adposition and its governor. Ex: dès que possible.
    without{ H -[1=comp|mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D << CONJ; CONJ << H}
    without{ H -[1=comp|mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D >> CONJ; CONJ >> H}
    commands {e.1=case}
  }

% Adpositions or conjunctions introducing verbs are mark dependent.
  rule mark_verb_adp-conj{
    pattern{
      e:H -[1=comp,2=obj|aff,rev=y]-> D;
      H[upos=AUX|VERB|PART,!nom];
      D[upos=ADP|CCONJ|PART|SCONJ] }
    commands {e.1=mark}
  }

% Conjunctions introducing adjectives or adverbs that are not considered nominal are mark dependent.
% Ex: si possible
  rule mark_pred_conj{
    pattern{ e:H -[1=comp,2=obj|aff,rev=y]-> D; H[upos=ADJ|ADV,!nom];D[upos=CCONJ|SCONJ] }
    commands {e.1=mark}
  }

% Adpositions introducing a clause marked with conjunction between the clause head and the adposition are mark dependent.
% Ex: dès que possible
  rule mark_pred_adp-left{
    pattern{
      e:H -[1=comp,2=obj|aff,rev=y]-> D; D[upos=ADP|PART];
      H -[1=mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D << CONJ; CONJ << H}
    commands {e.1=mark}
  }

% Adpositions introducing a clause marked with conjunction between the clause head and the adposition are mark dependent.
% Ex:
  rule mark_pred_adp-right{
    pattern{
      e:H -[1=comp,2=obj|aff,rev=y]-> D; D[upos=ADP|PART];
      H -[1=mark]-> CONJ; CONJ[upos=CCONJ|SCONJ]; D >> CONJ; CONJ >> H}
    commands {e.1=mark}
  }

% Conjunction introducing a prepositional phrase are mark dependent.
% Ex: comme à Paris
  rule mark_nom_conj-left{
    pattern{
      e:H -[1=comp,2=obj|aff,rev=y]-> D;
      H[nom=y];D[upos=CCONJ|SCONJ];
      H -[1=case]-> ADP; D << ADP; ADP << H}
    commands {e.1=mark}
  }

  rule mark_nom_conj-right{
    pattern{
      e:H -[1=comp,2=obj|aff,rev=y]-> D;
      H[nom=y];D[upos=CCONJ|SCONJ];
      H -[1=case]-> ADP; D >> ADP; ADP >> H}
    commands {e.1=mark}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% It is necessary to delete the reversed marks because there is another package reversing heads and it must start with no reversed marks.
package reverse_close {

  % if two conj are connected by a change of head, add the "emb" subtype
  rule connect_conj {
    pattern { H -[1=conj,rev=y]-> D; e:D -[conj]-> D1}
    commands { e.deep = emb }
  }

  rule del_reversed{
    pattern{e:H -[rev=y]-> D}
    without {H -[1=conj]-> D; D -[conj]-> D1; } % apply only if [connect_conj] cannot be applied
    commands {del_feat e.rev}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD sub-relations  are renamed as UD relations or sub-relations.
% Rem: the rules are ordered according to the alphabetic order of the names of the resulting relations
package sub_relations {
  rule acl_relcl {
    pattern { e:H -[1=mod,deep=relcl]-> D }
    commands {e.1=acl}
  }

  rule advclcleft {
    pattern { e:H -[comp:cleft]-> D }
    commands {e.1=advcl; e.2=cleft}
  }

  rule advcl_x {
    pattern { e:H -[mod@x]-> D }
    commands {del_edge e; add_edge H -[advcl:x]-> D}
  }

  rule aux{
    pattern{ e:H -[1=comp,2=aux]-> D }
    commands {e.1=aux}
  }

  rule aux_aff{
    pattern{ e:H -[1=comp,2=aff]-> D; H[upos=AUX]}
    commands {e.1=aux; e.2=aff}
  }

% Clausal argument without control of its subject.
  rule ccomp {
    pattern {d:H -[1=comp, 2=obj|obl|pred]-> D; D[upos = AUX|VERB,!nom]}
    without{D[Subject=ObjRaising|OblRaising|SubjRaising|Raising]}
    without {d.deep=pass } % Impersonal diathesis
    without {d.deep=agent} % Impersonal diathesis
    commands {d.1=ccomp}
  }

  % Clausal argument with a non-verbal head.
  rule ccomp_non-verb {
    pattern {
      e:H -[1=comp, 2=obj|obl]-> D; D[upos<> AUX|VERB];
      D -[1=mark]-> CONJ}
    commands {e.1=ccomp}
  }

  % a Scrapped SCONJ is considered as verbal 
  % Ex: "et il se dit que…" [Rhap_M0023-19]
  rule ccomp_scrap{
    pattern { e:H -[1=comp, 2=obj]-> D; D[upos=SCONJ,Scrap=Yes]}
    commands {e.1=ccomp}
  }

  rule cop{
    pattern{ d:H -[1=comp,2=pred]-> D; H[upos=AUX]}
    commands {d.1=cop}
  }

% In the impersonal diathesis, the deep clausal subject, which is a COMP:OBJ dependent in SUD, becomes a CSUBJ dependent in UD.
% Ex: il m'arrive de faire des erreurs.
  rule csubj_comp-obj {
    pattern {e:H -[comp:obj@agent]-> D; D[upos=AUX|VERB]}
    commands {del_edge e; add_edge H -[csubj]-> D }
  }


%  In the impersonal passive diathesis, the deep clausal object, which is a COMP:OBJ@PASS dependent in SUD, becomes a CSUBJ:PASS dependent in UD.
% Ex: Il est prévu de continuer. - Il se dit que tu viendras.
  rule csubj_comp-obj-pass {
    pattern {e:H -[comp:obj@pass]-> D; D[upos=AUX|VERB]}
    commands {del_edge e; add_edge H -[csubj:pass]-> D }
  }

% Clitic pronouns expressing the mediopassive redistribution.
% Ex: Les voitures se sont bien vendues.
  rule expl-pass_comp{
    pattern{e: H -[comp@pass]-> D}
    commands{del_edge e; add_edge H -[expl:pass]-> D}
  }

% Reflexive clitic pronouns linked to pronominal verbs.
% Ex: Les enfants s'enfuient.
  rule expl-pv_comp{
    pattern{e: H -[comp@expl]-> D; D[Reflex=Yes]}
    commands{del_edge e; add_edge H -[expl:pv]-> D}
  }

% Clitic pronoun linked with verbs to form fixed expressions.
% Ex: IL en veut à sa fille.
  rule expl_comp{
    pattern{e: H -[comp@expl]-> D;}
    without{ D[Reflex=Yes]}
    commands{del_edge e; add_edge H -[expl]-> D}
  }


% In an impersonal construction, the impersonal subject, which is a SUBJ:EXPL dependent in SUD, becomes an  EXPL:SUBJ dependent in UD.
% Ex: Il arrive deux personnes. - Il faut un bilan. - Il s'agit d'une erreur. - Il a été vendu une grande maison. - il se dit que tu viendras.
  rule expl_subj{
    pattern{ e:H -[subj@expl]-> D}
    commands {e.1=expl;e.2=subj; del_feat e.deep}
  }

  rule iobj {
    pattern {H[!nom]; e:H -[1=comp,2=obl]-> D; D[upos=PRON]}
    without{D -[1=case|mark]-> *}
    commands {e.1=iobj}
  }

  rule nmod_poss {
    pattern { e:H -[1=mod, 2=poss]-> A; A[upos=ADJ] }
    commands {e.1=nmod}
  }

% Deep subject in the impersonal resdistribution.
% Ex: il arrive deux personnes.
  rule nsubj_comp-obj {
    pattern { e:H -[comp:obj@agent]-> D; D[nom=y]}
    without{ H -[comp:aux@caus|aux:aux@caus|aux:caus]-> AUX}
    commands { del_edge e; add_edge H -[nsubj]-> D }
  }

% Object in the impersonal passive redistribution.
% Ex: Il a été vendu une grande maison. - Il s'est vendu une grande maison.
  rule nsubj_comp-obj-pass{
    pattern { e:H -[comp:obj@pass]-> D; D[nom=y]}
    commands {e.1=nsubj; e.2=pass; del_feat e.deep}
  }

% added for Naija
  rule nummod_det {
    pattern { e:H -[1=det, 2=num]-> D; }
    commands { e.1=nummod; e.2=det}
  }

% added for Naija
  rule nummod_mod {
    pattern { e:H -[1=mod, 2=num]-> D; }
    commands { e.1=nummod; e.2=mod}
  }

   rule obj_nom{
    pattern { e:H -[1=comp, 2=obj, !deep]-> D; D[nom=y]}
    without{ D -[1=mark]-> *}
    commands {e.1=obj}
  }

   rule obj_pred{
    pattern { e:H -[1=comp, 2=obj]-> D; D[cat=ADJ|ADV|INTJ,!nom]}
    without{ D -[1=mark]-> *}
    commands {e.1=obj}
  }

% Object of a causative auxiliary being the agent of the verb caused
  rule obj_agent {
    pattern { e:H -[comp:obj@agent]-> D; H -[aux:caus|aux:aux@caus]-> AUX}
    commands {del_edge e; add_edge H -[obj:agent]-> D }
  }

  rule obj_lvc{
    pattern { e:H -[comp:obj@lvc]-> D}
    commands {del_edge e; add_edge H -[obj:lvc]-> D}
  }

  rule obl_agent {
    pattern {e:H -[comp:obl@agent]-> D; D -[1=case]-> * }
    commands {del_edge e; add_edge H -[obl:agent]-> D }
  }

% We make the hypothesis that all noun complements depend on their gouvernor with a UDEP remation.
  rule obl_arg {
    pattern { e:H -[1=comp,2=obl]-> D; D -[1=case]-> * }
    without{ D -[1=mark]-> *}
    without{e.deep=agent}
    commands {e.1=obl; e.2=arg}
  }

  rule obl_mod {
    pattern { e:H -[1=comp,2=obl]-> D; D[upos <> PRON]}
    without{ D -[1=case|mark]-> *}
    without{e.deep=agent}
    commands {e.1=obl; e.2=mod}
  }

  rule xcomp{
    pattern{
      e:H -[comp:obj|comp:obl|comp:pred]-> D;
      D[Subject=ObjRaising|OblRaising|SubjRaising|Raising] }
    commands {e.1=xcomp}
  }

  rule xcomp_comp-pred{
    pattern{d:H -[comp:pred]-> D; H[upos <> AUX]; D[upos <> AUX|VERB]}
    commands {d.1=xcomp}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD deep extensions of relations are transformed into extensions of UD relations
package rel_extensions {
  rule change_ext{
    pattern{e: H -[1=*, deep=*]-> D}
    commands{ add_edge H -[1=e.1,2=e.deep]-> D; del_edge e}
  }

  rule del_ext{
    pattern{e: H -[1=*,2=aux|emb|obj|obl|pred,!deep]-> D}
    without{ H -[1=ccomp|xcomp,2=obj|obl|pred]-> D}
    commands{del_feat e.2}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUD relations are renamed as UD relations or sub-relations.
% Rem: the rules are ordered according to the alphabetic order of the names of the resulting relations
package relations {

% A nominal governs a participle or an infinitive in a direct MOD relation.
  rule acl_part {
    pattern {
      e:H -[1=mod]-> D; H[nom=y];
      D[upos=AUX|VERB,!nom]}
    without{D -[1=mark]-> *}
    commands {e.1=acl}
  }

% A nominal governs the head of a complementized clause in a UDEP or MOD relation.
% Ex: fr-ud-train_13185 -  Plats de type routier comme dans les années 1970.
  rule acl_mark-clause {
    pattern {
      e:H -[1=mod|udep]-> D; H[nom=y];
      D -[1=mark]-> *
    }
    commands {e.1=acl}
  }

% A non nominal governs a predicative phrase.
  rule advcl {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[upos=ADJ|AUX|VERB,!nom] }
    without {D[upos=ADJ]; D -[1=case]-> *} % A modifier adjective marked with an adposition is considered as an oblique complement in UD.
    commands {e.1=advcl}
  }

% A non-nominal governs a phrase the predicative feature of which is marked with a conjunction or the presence of a subject.
% Ex: fr-ud-train_01058 - Son équipe en difficulté, il est remplacé à la mi-temps ...
% Ex: fr-ud-test_00158 - Comme chaque soir à 18h40, il tranche, malmène et détourne l'actualité.
  rule advcl_ellipsis {
    pattern {H[!nom]; e:H -[1=mod]-> D; D -[1=mark|nsubj]-> * }
    without{D[upos=ADJ|AUX|VERB]}
    commands {e.1=advcl}
  }

  rule advmod {
    pattern { e:H -[1=mod|udep]-> D; D[upos=ADV|CCONJ|PART|SYM, !nom] }
    without{D -[1=mark]-> *}
    commands {e.1=advmod}
  }

%  Adjective attributive of another adjective.
  rule amod_adj {
    pattern { H[upos=ADJ,!nom]; e:H -[1=mod]-> D; D[upos=ADJ] }
    without{ D -[1=mark]-> X}
   % without{ PRO[PronType=Rel]; D -> PRO; H << PRO}
    commands {e.1=amod}
  }

%  Adjective attributive of a nominal.
  rule amod_nom {
    pattern { H[nom=y]; e:H -[1=mod]-> D; D[upos=ADJ] }
    without{ D -[1=mark]-> X}
   % without{ PRO[PronType=Rel]; D -> PRO; H << PRO}
    commands {e.1=amod}
  }

% Clausal subject.
  rule csubj {
    pattern { e:V -[1=subj]-> S; S[upos=AUX|VERB, !nom] }
    commands {e.1=csubj}
  }

  rule dep{
    pattern{ e: H -[unk]-> D}
    without{* -[IDIOM]-> H; * -[IDIOM]-> D}
    commands{e.1=dep}
  }

  rule dep-comp{
    pattern{ e: H -[1=comp]-> D}
    commands{del_edge e; add_edge H -[dep:comp]-> D}
  }

  rule discourse {
    pattern { e:H -[1=mod|udep]-> D; D[upos=INTJ, !nom] }
    without{D -[1=mark]-> *}
    commands {e.1=discourse}
  }

  rule fixed{
    pattern{ e: H -[unk]-> D;* -[IDIOM]-> H; * -[IDIOM]-> D}
    commands{del_edge e; add_edge H -[fixed]-> D}
  }

  rule nmod {
    pattern {e:H -[1=mod|udep]-> D; H[nom=y]; D[nom=y]}
    without{D -[1=mark]-> X}
    commands {e.1=nmod}
  }

  rule nmod_adj {
    pattern {e:H -[1=mod|udep]-> D; H[nom=y]; D[upos=ADJ]; D -[case]-> *}
    without{D -[1=mark]-> X}
    commands {e.1=nmod}
  }


% A numeral is dependent on another numeral via an adposition.
  rule nmod_num1{
    pattern {e:H -[1=mod|udep]-> D; H[upos=NUM]; D[upos=NUM]}
    commands {e.1=nmod}
  }


% Nomminal subject.
  rule nsubj {
    pattern { e:V -[1=subj]-> S; S[nom=y] }
    commands {e.1=nsubj}
  }


% A MOD relation, when the modifier is a numeral preceding its governor, is converted into a NUMMOD relation.
  rule nummod_mod {
    pattern { e:H -[1=mod]-> D; D[upos=NUM]; D << H }
    without{ H -[1=case|mark]-> D1; D << D1}
    without{ D -[case|mark]-> *}
    commands {e.1=nummod}
  }

% A DET relation, when the modifier is a numeral, is converted into a NUMMOD relation.
  rule nummod_det{
    pattern { e: H -[1=det]-> D; D[upos=NUM] }
    commands {e.1=nummod}
  }

  rule oblmod_nom {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[nom=y] }
    without{ D -[1=nsubj|mark|subj]-> X}
    without{H[upos=NUM];D[upos=NUM]}
    commands {e.1=obl; e.2=mod}
  }

  rule oblmod_adj {
    pattern { H[!nom]; e:H -[1=mod]-> D; D[upos=ADJ,!nom]; D -[1=case]-> X }
    commands {e.1=obl; e.2=mod}
  }

% A predicate governs a nominal or an adjective in a DEP_SUD relation.
  rule obl{
    pattern {e:H -[1=udep]-> D; H[upos=ADJ|ADV|VERB|AUX|INTJ,!nom]}
    without{D[upos <> ADJ, !nom]}
    commands {e.1=obl}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All SUD relations that are not converted to SUD relations with standard rules are left underspecified.
rule relations_backoff {
  pattern { e:H -[1=unk|subj|udep|mod|comp]-> D; }
  commands { del_edge e; add_edge H -[dep]-> D; }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The relations with auxiliaries as their heads are reversed.
package reverse_aux {

  rule rev_head {
    pattern {e:H -[1=aux|cop,!rev]-> D; H[upos= AUX]}
    without{D[upos= AUX]; D -[1=aux|cop,!rev]-> D1}
    commands {
      e.rev=y;
      add_edge f:D -> H; f.label = e.label;
      del_edge e;
      shift_in H =[^IDIOM|TITLE]=> D;
    }
  }
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Copulas that are external to a complement clause but depend on the clause head.
package outer_copula{

% A token has two subjects on its left.
  rule left_outer_subj{
    pattern{
      d:G -[1=nsubj|csubj]-> C1; G -[1=nsubj|csubj]-> C2;
      C1 << C2; C2 << G}
    without{d.2=outer}
    commands{d.2=outer}
  }

% A token has two subjects on its left.
  rule right_outer_subj{
    pattern{
      d:G -[1=nsubj|csubj]-> C1; G -[1=nsubj|csubj]-> C2;
      C1 >> C2; C2 >> G}
    without{d.2=outer}
    commands{d.2=outer}
  }

% A token has two subjects on both sides. --> the one before its head is outer.
% OK for French, TODO: check for other languages
  rule both_outer_subj{
    pattern{
      d:G -[1=nsubj|csubj]-> C1; G -[1=nsubj|csubj]-> C2;
      C1 << G; G << C2}
    without{d.2=outer}
    commands{d.2=outer}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
package final {
  rule del_nom{
    pattern {W[nom=y]}
    commands {del_feat W.nom}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main strategy for converting any SUD annotation into a UDplus annotation.
%The UDplus schema is in accordance the UD schema with additional information. It distinguishes between two types of idioms: idioms without syntactic structure are annotated with fixed relations according to the UD guidelines; idioms with a syntactic structure are annotated like any ordinary expression but their head is marked  with the feature Idiom=Yes; it also contains a feature ExtPos, which denotes the element’s function within the wider sentence; the other components of the idiom contain the feature InIdiom=Yes.
% For the sake of uniformity, the use of features Idiom, ExtPos an InIdiom is extended to idioms without syntactic structure.
strat main_UDplus {
  Seq (
    Onf (spoken),
    Onf (shared), % Package SHARED must precede SPECIFIC_EXPR_INIT so that feature Shared=Yes is not embedded in Idiom.
    Onf (remove_shared),
    specific_expr_init, % Initialization of a specific treatment for idioms, titles and translated words.
    Onf (nom_init),
    Onf (unchained_relations), % For CONJ relations, chains must be transformed into bouquets before head changes because of conditions on the presence of prepositions, conjunctions and auxiliaries. It is easier to take these conditions into account before head changes (UD_French-GSD : fr-ud-dev_00751)
    Onf (reverse_case_mark),  % Package REVERSE_CASE_MARK precedes packages SUB_RELATIONS and RELATIONS because UD labels of complement relations depend on the category of the complements introduced with a preposition or a conjunction
    Onf (shift_out_edges),
    Onf (case_mark_relations), %Package CASE_MARK_RELATIONS must precede package SUB_RELATIONS because renaming of some SUD relations requires the distinction between case and mark relations. The package must also precede package REVERSE_CLOSE because changes concern only reversed relations (Counter-example : SUD_French-GSD fr-ud-train_03238)
    Onf (reverse_close),
    Onf (sub_relations), % Package SUB_RELATIONS must precede package REL_EXTENSIONS because this package swat extensions on level 2.
    Onf (rel_extensions),
    Onf (relations),
    Onf (relations_backoff),
    Onf (reverse_aux),    % Package REVERSE_AUX follows packages SUB_RELATIONS and RELATIONS because of the dependencies H -> AUX in UD: if H is the target of a dependency, the label of the dependency may depend on the mood of AUX.
    Onf (shift_out_edges),
    Onf (reverse_close),
    Onf(outer_copula),
    Onf (final),
    specific_expr_close, % Closing a specific treatment for idioms, titles and converted words.
    Onf(extpos),
  )
}
rule remove_feat_subject{
  pattern{V[Subject]}
  commands{del_feat V.Subject}
}

rule remove_UDplus_subtypes {
  pattern { e: M -[ccomp:agent|ccomp:obj|ccomp:obl|ccomp:pred|xcomp:obj|xcomp:obl|xcomp:pred|advcl:x]-> N }
  commands { del_feat e.2 }
}

package non_projective_punct {
rule r1 {
  % track invalid UD structure "Punctuation must not cause non-projectivity"
  pattern { e: A -[punct]-> B; f: C -> D; e >< f; B << f }
  commands { 
    del_edge e; 
    add_edge C -[punct]-> B; 
  }
}

rule r2 {
  % track invalid UD structure "Punctuation must not cause non-projectivity"
  pattern { e: A -[punct]-> B; f: C -> D; e >< f; D << e }
  commands { 
    del_edge e; 
    add_edge D -[punct]-> B; 
  }
}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Universal main strategy for converting any SUD annotation into a UD annotation.
strat u_main{
  Seq (
    main_UDplus,
    flatten_idioms,
    Onf(remove_feat_subject),
    Onf(remove_UDplus_subtypes),
    Onf(non_projective_punct),
  )
}

% [u_main] is chosen by default
strat main { u_main }