% The "irregular_expr.grs" file includes packages applying a specific treatment to idioms, titles and converted words. What they have in common is the fact that their syntactic behaviour towards the outside world is not regular.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_edges] turns all features InIdiom (resp. InTitle) into a edge IDIOM (resp. TITLE) from the head to internal nodes of irregular expressions.
package add_edges {
  rule init_idiom {
    pattern { H [Idiom=Yes]; H-> N; N[InIdiom=Yes] }
    commands { del_feat N.InIdiom; add_edge H -[IDIOM]-> N }
  }

  rule iter_idiom {
    pattern { H -[IDIOM]-> M; M -> N; N[InIdiom=Yes] }
    commands { del_feat N.InIdiom; add_edge H -[IDIOM]-> N }
  }

  rule init_title {
    pattern { H [Title=Yes]; H-> N; N[InTitle=Yes] }
    commands { del_feat N.InTitle; add_edge H -[TITLE]-> N }
  }

  rule iter_title {
    pattern { H -[TITLE]-> M; M -> N; N[InTitle=Yes] }
    commands { del_feat N.InTitle; add_edge H -[TITLE]-> N }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [add_nodes] insert a new node for each Idiom/Title/Conv expression.
% The new node is linked to the head with the HEAD relation and to other elements by a IDIOM/TITLE relation.
package add_nodes {
  rule idiom {
    pattern{ H [ExtPos,Idiom=Yes] }
    without{H[upos=AUX|VERB, VerbForm, ExtPos=VERB]}
    without{H[ExtPos=VERB]; H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Idiom = Yes; del_feat H.Idiom;
    }
  }

  rule idiom_verb {
    pattern{ H [upos=AUX|VERB, VerbForm,ExtPos=VERB,Idiom=Yes] }
    without{H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Idiom=Yes; del_feat H.Idiom;
      I.VerbForm = H.VerbForm
    }
  }

  rule idiom_cop {
    pattern{
      H [ExtPos=VERB,Idiom=Yes];
      e:H -[IDIOM]-> AUX; AUX[upos=AUX,VerbForm]}
    commands{
      add_node I :< H;
      add_edge I -[IDIOM]-> H; add_edge I -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> I;
      shift_out H =[IDIOM]=> I;
      del_edge e; add_edge I -[IDIOM]-> AUX;
      I.upos = H.ExtPos; del_feat H.ExtPos;
      I.Idiom=Yes; del_feat H.Idiom;
      I.VerbForm = AUX.VerbForm
    }
  }

  rule title {
    pattern{ H [ExtPos,Title=Yes] }
    without{ * -[expr]-> H }
    commands{
      add_node T :< H; add_edge T -[TITLE]-> H; add_edge T -[HEAD]-> H;
      shift_in H =[^IDIOM|TITLE]=> T;
      shift_out H =[TITLE]=> T;
      T.upos = H.ExtPos; del_feat H.ExtPos;
      T.Title = Yes; del_feat H.Title;
    }
  }

  rule conv {
    pattern{ H [lemma,ExtPos,!Title,!Idiom] }
    without{ * -[HEAD]-> H }
    commands{
      add_node C :< H; add_edge C -[CONV]-> H; add_edge C -[HEAD]-> H;
      shift H =[^IDIOM|TITLE]=> C;
      C.upos = H.ExtPos; del_feat H.ExtPos;
      C.lemma = H.lemma
    }
  }

  % When an idiom is included in a title, the new node must receive a TITLE relation
  rule mwe_in_title {
    pattern { E -[HEAD]-> N; T -[TITLE]-> N; }
    without { T -[TITLE]-> E; }
    commands { add_edge T -[TITLE]-> E; }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The package [ext_dep] move dependencies external to the idiom, title, conv expresion, on the new node.
package ext_dep {
  rule idiom {
    pattern { H -[IDIOM]-> N; e: N -> M}
    without { H -[IDIOM]-> M; }
    without{ * -[IDIOM]-> M}
    commands {
      add_edge f:H->M; f.label = e.label;
      del_edge e;
    }
  }

  rule title {
    pattern { H -[TITLE]-> N; e: N -> M;}
    without { H -[TITLE]-> M; }
     without{ * -[TITLE]-> M}
   commands {
     add_edge f:H->M; f.label = e.label;
     del_edge e;
   }
  }
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 3 previous packages into one strategy.
strat specific_expr_init {
  Seq (
    Onf(add_edges),
    Onf(add_nodes),
    Onf(ext_dep),
  )
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% replace edges IDIOM, TITLE by features
package del_edges {

% The IDIOM dependency to the head H of the idiom is replaced by feature Idiom = Yes. The POS of H becomes the POS of the idiom and the old POS of H is kept in InitPos feature.
  rule idiom_head {
    pattern { I[Idiom]; I -[HEAD]-> H; d:I -[IDIOM]-> H; }
    commands {
      del_edge d;  H.Idiom = Yes;
      H.InitPos = H.upos; H.upos = I.upos}
  }

% All IDIOM dependencies to tokens that are not the head of the idiom are replaced by feature InIdiom = Yes
  rule idiom {
    pattern { d:I -[IDIOM]-> H }
    without { I -[HEAD]-> H }
    commands{del_edge d; H.InIdiom = Yes}
  }

% The TITLE dependency to the head H of the title is replaced by feature Idiom = Yes.  The POS of H becomes the POS of the title and the old POS of H is kept in InitPos feature.
  rule title_head {
    pattern { T[Title]; T -[HEAD]-> H; d:T -[TITLE]-> H }
    commands {
      del_edge d; H.Title = Yes;
      H.InitPos = H.upos; H.upos = T.upos}
  }

% All TITLE dependencies to tokens that are not the head of the title are replaced by feature InIdiom = Yes
  rule title {
    pattern {d:T -[TITLE]-> H }
    without { T -[HEAD]-> H }
    without{T -[HEAD]-> H1; H1 -[HEAD]-> H; H1[Idiom=Yes]}
    commands {del_edge d; H.InTitle = Yes}
  }

% The title head is also an idiom head.
  rule title_idiom {
    pattern {d:T -[TITLE]-> H;T -[HEAD]-> H1; H1 -[HEAD]-> H; H[Idiom=Yes]  }
    without { T -[HEAD]-> H }
    commands {del_edge d}
  }

% The POS of a word was converted into another POS.
  rule conv_head {
    pattern { C -[HEAD]-> H; d:C -[CONV]-> H }
    commands {
      del_edge d;
       H.InitPos = H.upos; H.upos = C.upos}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% remove nodes
package del_nodes {
  rule del_specif_expr{
    pattern{ N[!Shared];e: N -[HEAD]-> H }
    commands{del_edge e; shift N ==> H;del_node N}
  }

  rule del_shared_specif_expr_{
    pattern{ N[Shared]; e: N -[HEAD]-> H }
    commands{del_edge e; shift N ==> H ; H.Shared=N.Shared;del_node N}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% sequentialize the 2 previous packages into one strategy.
strat specific_expr_close {
  Seq (
    Onf(del_edges),
    Onf(del_nodes),
  )
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Introduction of ExtPos feature
rule extpos{
  pattern{N[upos,InitPos,!ExtPos]}
  commands{N.ExtPos=N.upos; N.upos=N.InitPos; del_feat N.InitPos}
}