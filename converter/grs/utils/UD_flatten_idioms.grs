% GRS for flattening all continuous idioms in UD or SUD. The head of each continuous idiom becomes its left-most element. All the elements are linked in a left-right chain with UNK relations.
% The condition for using this GRS is that all idioms must be continuous.

% Choose one MWE in the sentence
rule choose_mwepos {
  pattern { N[ExtPos,Idiom=Yes] }
  without { N -[fixed]-> * }
  commands { N.fix=Head}
}

% Mark all components of the chosen MWE with feature fix=Part and remove the internal dependencies.
rule propagate{
  pattern { N [fix]; e:N -> M; M[InIdiom] }
  commands { M.fix=Part; del_feat M.InIdiom; del_edge e; }
}

% Mark the leftmost component of the MWE with fix=First.
package first {
% The leftmost component is the head of the MWE
  rule head_first {
    pattern { N[fix=Head] }
    without { M[fix]; M < N }
    commands { N.fix=First }
  }

% The leftmost component is not the head of the MWE.
  rule head_not_first {
    pattern { N[fix=Part]; H[fix=Head, Idiom=Yes]; }
    without { H < N }
    without { M[fix]; M < N }
    commands {
      N.fix=First;
      N.ExtPos = H.ExtPos; del_feat H.ExtPos;
      N.Idiom = Yes; del_feat H.Idiom;
      shift H ==> N}
  }
}

% The first fixed relation is initiated from the leftmost component of the idiom.
rule init_fixed {
  pattern { F[fix=First]; N [fix]; F < N }
  without { * -> N}
  commands { add_edge F -[fixed]-> N; N.InIdiom=Yes }
}

%TODO: revoir ce package pour sortir ce qui est spÃ©cifique au Naija
package propagate_fixed {
  rule continuous {
    pattern { F[fix=First]; F -[fixed]-> L; L[InIdiom=Yes]; N [fix]; L < N }
    without { * -> N }
    commands { add_edge F -[fixed]-> N; N.InIdiom=Yes }
  }

  % rule added to deal with discontinuous fixed in Naija "in fact # sey"
  rule discontinuous {
    pattern { F[fix=First]; N [fix]; P[!fix]; P < N }
    without { * -> N }
    commands { add_edge F -[dep:fixed]-> N;  }
  }
}

rule clean {
  pattern { N[fix] }
  commands { del_feat N.fix }
}

strat one {
  Seq (
    choose_mwepos,
    Onf (propagate),
    first,
    init_fixed,
    Onf (propagate_fixed),
    Onf (clean),
	)
}

strat flatten_idioms { Iter (one) }
