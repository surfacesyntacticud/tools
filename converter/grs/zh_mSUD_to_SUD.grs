%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat zh_mSUD_to_SUD_main { 
  Seq (
    Onf (fusion)
  )
}


package fusion {
  rule suff_fusion_CpdPos {
    pattern {
      N [CpdPos];
      e: N -[type=m]-> M;                                     % M is attached with the /m extension
      N < M                                                % M is a suffix
    }  
    without { M -> X}                                      % M is a leaf (force application order)
    commands { 
      del_edge e;
      N.form = N.form + M.form;                            % concatenate the surface form
      N.wordform = N.wordform + M.wordform;                % concatenate the surface form
      N.lemma = N.lemma + M.lemma;                         % concatenate the surface lemma
      append_feats "_" M =[re"Translit\|Tone"]=> N;        % concatenate the surface Translit and Tone
      N.upos = N.CpdPos; 
      del_feat N.CpdPos;
      del_node M;
    }
  }

  rule suff_fusion {
    pattern {
      P[!CpdPos];
      P -[type=m]-> Q;                                     % Q is attached with the /m extension
      P < Q                                                % Q is a suffix
    }  
    without { Q -> X}                                      % Q is a leaf (force application order)
    commands { 
      P.form = P.form + Q.form;                            % concatenate the surface form
      P.wordform = P.wordform + Q.wordform;                % concatenate the surface form
      P.lemma = P.lemma + Q.lemma;                         % concatenate the surface lemma
      append_feats "_" Q =[re"Translit\|Tone"]=> P;        % concatenate the surface Translit and Tone
      del_node Q;                                          % concatenate the surface form
    }
  }
  
  rule pref_fusion_CpdPos {
    pattern {
      N [CpdPos];
      N -[type=m]-> M;                                     % M is attached with the /m extension
      M < N                                                % M is a prefix
    }  
    without { M -> X}                                      % M is a leaf (force application order)
    commands { 
      N.form = M.form + N.form;                            % concatenate the surface form
      N.wordform = M.wordform + N.wordform;                % concatenate the surface form
      N.lemma = M.lemma + N.lemma;                         % concatenate the surface lemma
      prepend_feats "_" M =[re"Translit\|Tone"]=> N;       % concatenate the surface Translit and Tone
      del_node M;
      N.upos = N.CpdPos; 
      del_feat N.CpdPos;
    }
  }

  rule pref_fusion {
    pattern { 
      N [!CpdPos];
      N -[type=m]-> M;                                     % M is attached with the /m extension
      M < N                                                % M is a prefix
    }  
    without { M -> X}                                      % M is a leaf (force application order)
    commands { 
      N.form = M.form + N.form;                            % concatenate the surface form
      N.wordform = M.wordform + N.wordform;                % concatenate the surface form
      N.lemma = M.lemma + N.lemma;                         % concatenate the surface lemma
      prepend_feats "_" M =[re"Translit\|Tone"]=> N;       % concatenate the surface Translit and Tone
      del_node M;                                          % concatenate the surface form
    }
  }
}

