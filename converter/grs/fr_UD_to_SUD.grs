%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD_to_SUD.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
% Ex :  fr-ud-train_05544 -  Paris génère chaque jour, par temps sec, entre 800.000 et 900.000 m3 d'eaux usées.
  rule nummod_det{
    pattern{e:H -[nummod]-> D; D << H}
    without{H -[det]-> *}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean a-t-il été payé ?
%Ex: UD_French-GSD fr-ud-dev_00269 - ...Maria se suicide-t-elle ...
  rule repeat_subj{
    pattern{
     V -[1=csubj|nsubj]->  SUBJ1;
     d:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il];
     SUBJ1 << V; SUBJ1 << SUBJ2}
    without{SUBJ1[PronType=Int|Rel,lemma=que]} % Ex: Qu'arrive-t-il ? - la mésaventure qu'il m'est arrivée
    without{ V -[mark]-> C; SUBJ1 << C}%Ex:  UD_French-GSD  fr-ud-dev_01470 - une autre façon[SUBJ1] de le voir est qu'[C]il n'existe[V] pas de foncteur
    commands{del_edge d; add_edge V -[subj@expl]-> SUBJ2;}
  }

% Pronouns "dont and "en" dependent on nominals are processes as all noun complements.
  rule udep_dont-en{
    pattern{ e:H -[nmod]-> D; D[upos=PRON, lemma=dont|en]}
    commands{del_edge e; add_edge H -[udep]-> D}
  }


% Control verbs with an infintive as an oblique argument and the subject of the infinitive is the object of the control verb.
  rule verb_obj-noun_obl-inf(lex from "lexicons/verb_obj-noun_obl-inf-objraising.lp"){
    pattern{
      V -[obj]-> N; V[upos=VERB,lemma=lex.verb];
      N[upos=NOUN|PRON|PROPN|X];
      d:V -[xcomp:obl]-> COMP}
    commands{
      COMP.Subject2=ObjRaising;
      add_edge V -[comp:obl]-> COMP; del_edge d}
  }

% Control verbs with an infinitive as a direct object and the subject of the infinitive is the oblique argument of the control verb.
  rule verb_obl-noun_obj-inf(lex from "lexicons/verb_obl-noun_obj-de-inf-oblraising.lp"){
    pattern{
      V -[iobj|obl:arg]-> N; V[upos=VERB,lemma=lex.verb];
      N[upos=NOUN|PRON|PROPN|X];
      d:V -[xcomp:obj]-> COMP}
    commands{
      COMP.Subject2=OblRaising;
      add_edge V -[comp:obj]-> COMP; del_edge d}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% When several dependents compete for replacing the same head,
% the rule of starting with the closest dependent does not work in the cases of extraposition of the predicate.
% Ex: fr-ud-test_00067-  ... ce que nous avons été ...
% Ex: fr-ud-train_00086- ... quelle que soit la nature de ses pratiques, ...
% The default order between relation is case < cop < (aux:caus // aux:pass) < aux < mark
% ---------------------------------------------------------------------------------------------
% Ex: UD_French-GSD fr-ud-test_00057 - Dans les sixties, ce n'était[D] pas comme[D1] aujourd'hui[H].
package FR_set_level {
  rule gen{
    pattern{d:H -[1=aux|case|cop|mark, !level]-> D }
    without{d.1=cop; H -[1=aux|mark]-> D1; H << D1; D1 << D}
    commands{d.level=20}
  }
  
  rule cop{
    pattern{
      d:H -[1=cop, !level]-> D;
      H -[1=aux|mark]-> D1; H << D1; D1 << D}
    commands {d.level= 10 }
  }
     
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{

% Judgment adverbs rise from verbs to their auxiliaries.
% Ex: Il a certes beaucoup travaillé. - il est certes un bon travailleur.
  rule adv-judgment_aux(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV} % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbs rise from the adposition objects to their adposition.
% Ex: il est en vacances heureusement.
  rule adv-judgment_prep(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbial locutions rise from verbs to their auxiliaries.
% Ex : Il a été mon directeur par ailleurs.
  rule adv-loc-judgment_aux(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbial locutions rise from the adposition objects to their adposition.
% Ex: Il a été en congé par ailleurs.
  rule adv-loc-judgment_prep(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Tense adverbs rise from verbs to their auxiliaries.
% Il a été malade hier.
  rule adv-tense_aux(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Tense adverbs rise from the adposition objects to their adposition.
% Il a été en congé hier.
  rule adv-tense_prep(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=ADP];H -[comp:obj]-> D;  D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Conj relations when the conjunct heads are adjectives.
% Ex: French-GSD fr-ud-test_00091 - Le ras-le-bol fut général, la mobilisation inédite.
  rule conj_adj{
    pattern{
      H -[comp:pred]-> D;  H << D;
      e: D -[1=conj]-> D1;
      D[upos=ADJ]; D1[upos=ADJ];
      D1 -[1=subj]-> *
    }
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }

% passive constructions in the form "se" + "faire" + INF
% Ex: French-GSD fr-ud-test_00058 - Sidi M'hamed Deddeche et Amgid Sidi Ahmed, deux activistes pacifistes des territoires occupés comme Mme Haïder, s'[SE]étaient-ils fait[AUX] arrêter[INF] mercredi dernier à l'entrée de Smara,
  rule se_faire_passive{
    pattern{
      AUX[upos=AUX,lemma=faire];
      INF[upos=VERB,VerbForm=Inf];
      AUX -[comp:aux@pass]-> INF;
      SE[upos=PRON,lemma=se];
      d: INF -[comp@pass]-> SE}
    commands{del_edge d; add_edge AUX -[comp@pass]-> SE}
  }
  
% constructions in the form SUBJ + de  + INF.
%Ex: French-GSD fr-ud-train_11118 - » et Secombe de répondre : « De quelle couleur ?
  rule subj_de_inf{
    pattern{
      INF[upos=AUX|VERB];
      DE[upos=ADP, lemma =de];
      DE -[comp:obj]-> INF;
      e:INF -[1=subj]-> SUBJ}
    commands{add_edge f:DE -> SUBJ; f.label=e.label; del_edge e}
  }


% constructions with a predicative complement PRED of an elided copula and a clause, which is the subject of PRED introduced with a complementizer CPL. The subject is converted into a direct object.
%Ex: French-GSD fr-ud-train-10087 - Difficile d'imaginer pire !
  rule pred_cpl_verb{
    pattern{
      e:PRED -[subj]-> CPL; CPL[upos=ADP|SCONJ,lemma="à"|de|que];
      CPL -[comp:obj]-> V; V[upos=AUX|VERB,VerbForm=Inf|Fin]}
    without{V0 -[comp:pred]-> PRED; V0 -[subj@expl]-> *}
    commands{del_edge e; add_edge PRED -[comp:obj@agent]-> CPL}
  }

% constructions with a predicative complement PRED of an elided copula and a clause without compementizer, which is the subject of PRED. The subject is converted into a direct object.
%Ex: French-GSD fr-ud-train-08722 - Maintenant, reste à voir comment Orange réagira.
  rule pred_verb{
    pattern{
      e:PRED -[subj]-> V; PRED << V; V[upos=AUX|VERB,VerbForm=Fin]}
    without{V0 -[comp:pred]-> PRED; V0 -[subj@expl]-> *}
    commands{del_edge e; add_edge PRED -[comp:obj@agent]-> V}
  }

%Ex: French-GSD fr-ud-train_01439 - Mais ce n'est que quand il est[D] bien trop tard[H] et que son œuvre détruit tout ce qui avait de l'importance pour lui qu'[N]il commence confusément à réaliser
    rule comp_cleft{
      pattern {
        H -[1=cop|aux|case|mark,REV=Yes]-> D;
        e: D -[comp:cleft]-> N;}
      without { N[InTitle=Yes] } % French-GSD fr-ud-train_13022 - ...très connu dans les rôles de Bo Duke de Shérif, fais-moi peur !
      without{H -[1=mark, REV=Yes]-> D; D -[subj@expl]-> S; S[upos=PRON, lemma=ce];D -[1=cop]-> *}
      commands { add_edge f: H -> N; f.label = e.label; del_edge e }
    }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some relations have moved up from the old head D to the new head H incorrectly in specific cases in French. The move must be cancelled.
package FR_shift_out_back_edges{

% UDEP relations targeting the pronouns "dont" and "en" must move from the auxiliaries to their argument.
  rule dont-en_aux{
    pattern {
      H[upos=AUX];
      H -[1=comp,2=aux|pred]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    without{ H -[1=comp,2=pred]-> D; H[upos <> AUX]}
    without{H -[1=comp,2=pred]-> D; H -[mod]-> D1} %Ex: fr-ud-dev_01506 - ...la sortie de leur pays de la zone Euro en sera inéluctable
    commands{add_edge f: D -> D1; f.label=e.label; del_edge e}
  }

% UDEP relations targeting the pronouns "dont" and "en" must move from the adpositions to their object.
% Ex: fr-ud-train_00459 - Elle fait partie de le Freedom Group dont Cerberus Capital Management est un de les actionnaires depuis 2009.
  rule dont_en_adp{
    pattern {
      H[upos=ADP];
      H -[comp:obj]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    commands{add_edge f: D -> D1;f.label=e.label; del_edge e}
  }

% Quantity adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-quant_aux(lex from "lexicons/adv_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    without{D1[Polarity=Neg]}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Quantity adverbial locutions that are modifiers must move from the auxiliaries to their argument.
  rule advloc-quant_aux(lex from "lexicons/advloc_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      e: H -[mod]-> D1;
      D1[upos=ADV];
      D1 -[HEAD]-> H1;
      H1[lemma=lex.head];
      D1 -[IDIOM]-> D2;
      D2[lemma=lex.dep];
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Manner adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-manner_aux(lex from "lexicons/adv_manner.lp"){
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Neagtion adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-neg_aux{
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=que];
      e: H -[mod]-> D1;
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Adverb "aussi used as a quantity adverb must move from the auxiliaries to their argument.
  rule aux_aussi_comp{
    pattern{
      H[upos=AUX];H -[1=comp,2=pred]-> D;  D[upos=ADJ|ADV];
      e:H -[mod]-> D1;
      D1[upos=ADV,lemma=aussi];
      H << D1; D1 << D;
      CONJ[upos=SCONJ,lemma=que]; D1 -[comp:obj]-> CONJ}
    commands{add_edge D -[mod]-> D1; del_edge e}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Mark some left dependents of a coordination with the feature Shared=Yes.
package FR_shared_left_conj-dep{

% Shared adverbs
  rule adv{
    pattern {
      d1:C1 -[1=conj]-> C2;
      C1 -[1=mod]-> D1; D1[upos=ADV, !InIdiom,lemma=lex.adv,!Shared]; D1 << C1}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{D1.Shared=Yes}
  }
#BEGIN lex
adv
%----
combien
que
#END

% Shared determiners
  rule det{
    pattern{
      d1:C1 -[1=conj]-> C2;
      C1[upos=NOUN|PRON];C2[upos=NOUN|PRON];
      C1 -[1=det]-> D1; D1[!InIdiom,!Shared]; D1 << C1}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    without{C2 -[1=det]->  *}
    commands{D1.Shared=Yes}
  }

% Shared interrogative and relative pronouns.
% Ex: SUD_French-GSD fr-ud-dev_00647 - ... plusieurs autres pays dont le Canada et la Nouvelle-Zélande ...
  rule int-rel-pron{
    pattern{
      d1:C1 -[1=conj]-> C2;
      C1 -> D1; D1[!InIdiom,!Shared, PronType=Int|Rel]; D1 << C1}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    without{ C2 -> D2; D2[PronType=Int|Rel]; D2 << C2}
    commands{D1.Shared=Yes}
  }
  
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some left dependents of the first conjunct of a coordination are not shared by all conjuncts.
package FR_unshared_left_conj-dep{

% Unshared attributive adjectives
  rule attr_adj{
    pattern {
      d1:C1 -[1=conj]-> C2; C1[upos=NOUN|PRON];
      C1 -[1=mod]-> D1; D1[upos=ADJ,!InIdiom]; D1 << C1;
      C2 -[1=mod]-> D2; D1[upos=ADJ]; D2 << C2}
    without{D1[Shared=No]}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{D1.Shared=No}
  }

% Unshared modifiers.
% Ex: SUD_French-GSD fr-ud-train_08681 - Son cabinet est très[D] agréable[C1] et chaleureux[C2].
  rule mod {
    pattern {
      d1:C1 -[1=conj]-> C2;
      C1 -[mod]-> D1; D1 << C1;
      D1[upos=lex.pos,!InIdiom, lemma=lex.adv]}
    without{D1[Shared=No]}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{D1.Shared=No}
  }
#BEGIN	lex
adv	pos
%-----
assez	ADV
bien	ADV
fort	ADV
hyper	ADV
mal	ADV
moins	ADV
ne	ADV
non	ADV
pas	ADV
peu	ADV
plus	ADV
quasi	ADV
si	ADV
super	ADV
tout	ADV
très	ADV
trop	ADV
ultra	ADV
#END

% Repeated complenmentizer in a coordination.
  rule rep_conj{
    pattern{
      d1:C1 -[1=conj]-> C2;
      C1 -[cc|mod]-> CPL1; CPL1[upos=ADV|CCONJ, lemma=ni|plus|soit|"tantôt"];
      C2 -[cc|mod]-> CPL2; CPL2[upos=ADV|CCONJ, lemma];CPL2.lemma = CPL1.lemma}
    without{CPL1[Shared=No]}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{CPL1.Shared=No}
  }

% Repeated conjunction of coordination.
% Ex: SUD_French-GSD fr-ud-dev_01116 - En effet, plus la proximité génétique est grande, plus il devrait y avoir d'amibes prêtes à se sacrifier ...
  rule rep_conj_dep{
    pattern{
      d1:C1 -[1=conj]-> C2;
      C1 -[cc|mod]-> CPL1; CPL1[upos=ADV|CCONJ, lemma=ni|plus|soit|"tantôt"];
      C2 -[cc|mod]-> CPL2; CPL2[upos=ADV|CCONJ, lemma];CPL2.lemma = CPL1.lemma;
      C1 -> D1; D1[!Shared]; D1 << CPL1}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{D1.Shared=Yes}
  }
% The second conjunct is introduced by the conjunction "car".
% Ex: SUD_French-GSD fr-ud-train_05527 - En[D] plus il m'a[C1] expliqué les résultats, car je n'y connais[C2] rien en électricité.
  rule car{
    pattern{
      d1:C1 -[1=conj]-> C2;
      C1 -[1 <> subj]-> D; D << C1;
      C2 -[cc]-> CONJ; CONJ[upos=CCONJ,lemma=car]}
    without{D[Shared=No]}
    without{d2: C -> C1; d2.label=d1.label}% C1 is the first conjunct of the coordination.
    without{d2: C -> C1; d2.label="conj@emb"; d1.label=conj} % C1 is the first conjunct of the coordination.
    commands{D.Shared=No}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The conversion of "suite à", "face à" are invalid ('advmod' should be 'ADV' but it is 'NOUN'). To avoid this, we transform these phrase into idiom in the SUDto UD conversion. In the reverse conversion, we make the reverse transformation.
package FR_noun_adv{
% The phrase is restructured.
  rule adp_to_adv (lex from "lexicons/noun_adv_prep.lp"){
    pattern{
      N[upos=NOUN, lemma=lex.noun, ExtPos=ADP, Idiom=Yes];
      P[upos=ADP, lemma=lex.prep, InIdiom=Yes];
      N -[comp:obl]-> P;
      e: N -[comp:obj]-> N1}
    commands{
      N.ExtPos = ADV; del_feat N.Idiom;
      del_feat P.InIdiom;
      del_edge e; add_edge P -[comp:obj]-> N1}  
  }

% If the phrase is an UDEP dependent of a governor, it becomes a MOD dependent.
  rule udep_to_mod (lex from "lexicons/noun_adv_prep.lp"){
    pattern{
      N[upos=NOUN, lemma=lex.noun, ExtPos=ADV];
      e: H -[udep]-> N}
    commands{del_edge e; add_edge H -[mod]-> N}  
  }

% If the noun in the phrase is shared by a coordination, it is no longer shared.
  rule shared_dep (lex from "lexicons/noun_adv_prep.lp"){
    pattern{
      N[upos=NOUN, lemma=lex.noun, ExtPos=ADV];
      P[upos=ADP, lemma=lex.prep];
      N -[comp:obl]-> P;
      d: P -[comp:obj]-> N1; N1[Shared]}
    commands{del_feat N1.Shared}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat fr_main {
  Seq(
    Onf(idioms),
    specific_expr_init,
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    Onf (FR_set_level),
    reverse_relations.main,
    Onf(FR_shift_out_edges),
    Onf(FR_shift_out_back_edges),
    Onf (minimize_right_conj-dep),
    Onf (add_conj_emb),
    Onf (chained_relations),
    specific_expr_close,
    Onf(FR_shared_left_conj-dep),
    Onf(FR_unshared_left_conj-dep),
    Onf(shared_left_conj-dep),
    Onf(unshared_left_conj-dep),
    Onf(unshared_right_conj-dep),
    Onf(extpos),
    Onf(FR_noun_adv), % Package FR_noun_adv must follow rule extpos because it acts on idioms in their definitive form.
    Onf(normalize),
  )
}
