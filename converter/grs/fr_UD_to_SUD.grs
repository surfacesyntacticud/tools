%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "UD_to_SUD.grs"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relations in SUD that are determined from UD relations with rules specific to French.
package FR_relations {

% When a NUM D depends on a word G in a NUMMOD relation and when D precedes G, D is a determiner of G.
% Ex :  fr-ud-train_05544 -  Paris génère chaque jour, par temps sec, entre 800.000 et 900.000 m3 d'eaux usées.
  rule nummod_det{
    pattern{e:H -[nummod]-> D; D << H}
    without{H -[det]-> *}
    commands{ del_edge e; add_edge H -[det]-> D}
  }

% The subject SUBJ1 of a verb is repeated in the form of a personal pronoun SUBJ2.
% Ex: Jean vient-il ?
% Ex : Jean a-t-il été payé ?
  rule repeat_subj{
    pattern{
     V -[1=csubj|nsubj]->  SUBJ1;
     e:V -[expl:subj]-> SUBJ2; SUBJ2[upos=PRON, lemma=il];
     SUBJ1 << V; SUBJ1 << SUBJ2}
    without{SUBJ1[PronType=Int|Rel,lemma=que]} % Ex: Qu'arrive-t-il ? - la mésaventure qu'il m'est arrivée
    commands{del_edge e; add_edge V -[subj@expl]-> SUBJ2;}
  }

% Pronouns "dont and "en" dependent on nominals are processes as all noun complements.
  rule udep_dont-en{
    pattern{ e:H -[nmod]-> D; D[upos=PRON, lemma=dont|en]}
    commands{del_edge e; add_edge H -[udep]-> D}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% When several dependents compete for replacing the same head,
% the rule of starting with the closest dependent does not work in the cases of extraposition of the predicate.
% Ex: fr-ud-test_00067-  ... ce que nous avons été ...
% Ex: fr-ud-train_00086- ... quelle que soit la nature de ses pratiques, ...
% The default order between relation is case < cop < (aux:caus // aux:pass) < aux < mark
% ---------------------------------------------------------------------------------------------
package FR_set_level {
  rule case { pattern { e:H -[1=case, !level]-> D } commands { e.level=10 } }
  rule cop  { pattern { e:H -[1=cop, !level]-> D }  commands { e.level=20 } }
  rule aux_caus { pattern { e:H -[1=aux, 2=caus, !level]-> D } commands { e.level=30 } }
  rule aux_pass { pattern { e:H -[1=aux, 2=pass, !level]-> D } commands { e.level=30 } }
  rule aux  { pattern { e:H -[1=aux, !level]-> D }  commands { e.level=40 } }
  rule mark { pattern { e:H -[1=mark, !level]-> D } commands { e.level=50 } }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The source of some relations must rise from the old head D to the new head H in cases specific to French.
package FR_shift_out_edges{

% Judgment adverbs rise from verbs to their auxiliaries.
% Ex: Il a certes beaucoup travaillé. - il est certes un bon travailleur.
  rule adv-judgment_aux(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV} % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbs rise from the adposition objects to their adposition.
% Ex: il est en vacances heureusement.
  rule adv-judgment_prep(lex from "lexicons/adv_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbial locutions rise from verbs to their auxiliaries.
% Ex : Il a été mon directeur par ailleurs.
  rule adv-loc-judgment_aux(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Judgment adverbial locutions rise from the adposition objects to their adposition.
% Ex: Il a été en congé par ailleurs.
  rule adv-loc-judgment_prep(lex from "lexicons/advloc_judgment.lp") {
    pattern{
      H[upos=ADP];H -[1=comp,2=obj]-> D; D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV -[HEAD]-> H1;
      H1[lemma=lex.head];
      ADV -[IDIOM]-> D1;
      D1[lemma=lex.dep];
      H << D; D << ADV}
    without{D -> D2; D2 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Tense adverbs rise from verbs to their auxiliaries.
% Il a été malade hier.
  rule adv-tense_aux(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Tense adverbs rise from the adposition objects to their adposition.
% Il a été en congé hier.
  rule adv-tense_prep(lex from "lexicons/adv_tense.lp") {
    pattern{
      H[upos=ADP];H -[comp:obj]-> D;  D[upos <> AUX|VERB];
      e:D -[mod]-> ADV;
      ADV[upos=ADV,lemma=lex.adv];
      H << D; D << ADV}
    without{D -> D1; D1 >> ADV}  % Rising cannot generate non projectivity
    commands{add_edge H -[mod]-> ADV; del_edge e}
  }

% Conj relations when the conjunct heads are adjectives.
% Ex: French-GSD fr-ud-test_00091 - Le ras-le-bol fut général, la mobilisation inédite.
  rule conj_adj{
    pattern{
      H -[comp:pred]-> D;  H << D;
      e: D -[1=conj]-> D1;
      D[upos=ADJ]; D1[upos=ADJ];
      D1 -[1=subj]-> *
    }
    commands{
      add_edge f: H -> D1; f.label = e.label;
      del_edge e
    }
  }

% constructions in the form SUBJ + de  + INF.
%Ex: French-GSD fr-ud-train_11118 - » et Secombe de répondre : « De quelle couleur ?
  rule subj_de_inf{
    pattern{
      INF[upos=AUX|VERB];
      DE[upos=ADP, lemma =de];
      DE -[comp:obj]-> INF;
      e:INF -[1=subj]-> SUBJ}
    commands{add_edge f:DE -> SUBJ; f.label=e.label; del_edge e}
  }


% constructions with a predicative complement PRED of an elided copula and a clause, which is the subject of PRED introduced with a complementizer CPL. The subject is converted into a direct object.
%Ex: French-GSD fr-ud-train-10087 - Difficile d'imaginer pire !
  rule pred_cpl_verb{
    pattern{
      e:PRED -[subj]-> CPL; CPL[upos=ADP|SCONJ,lemma="à"|de|que];
      CPL -[comp:obj]-> V; V[upos=AUX|VERB,VerbForm=Inf|Fin]}
    without{V0 -[comp:pred]-> PRED; V0 -[subj@expl]-> *}
    commands{del_edge e; add_edge PRED -[comp:obj@agent]-> CPL}
  }

% constructions with a predicative complement PRED of an elided copula and a clause without compementizer, which is the subject of PRED. The subject is converted into a direct object.
%Ex: French-GSD fr-ud-train-08722 - Maintenant, reste à voir comment Orange réagira.
  rule pred_verb{
    pattern{
      e:PRED -[subj]-> V; PRED << V; V[upos=AUX|VERB,VerbForm=Fin]}
    without{V0 -[comp:pred]-> PRED; V0 -[subj@expl]-> *}
    commands{del_edge e; add_edge PRED -[comp:obj@agent]-> V}
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some relations have moved up from the old head D to the new head H incorrectly in specific cases in French. The move must be cancelled.
package FR_shift_out_back_edges{

% UDEP relations targeting the pronouns "dont" and "en" must move from the auxiliaries to their argument.
  rule dont-en_aux{
    pattern {
      H[upos=AUX];
      H -[1=comp,2=aux|pred]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    without{ H -[1=comp,2=pred]-> D; H[upos <> AUX]}
    without{H -[1=comp,2=pred]-> D; H -[mod]-> D1} %Ex: fr-ud-dev_01506 - ...la sortie de leur pays de la zone Euro en sera inéluctable
    commands{add_edge f: D -> D1; f.label=e.label; del_edge e}
  }

% UDEP relations targeting the pronouns "dont" and "en" must move from the adpositions to their object.
% Ex: fr-ud-train_00459 - Elle fait partie de le Freedom Group dont Cerberus Capital Management est un de les actionnaires depuis 2009.
  rule dont_en_adp{
    pattern {
      H[upos=ADP];
      H -[comp:obj]-> D;
      D1[upos=PRON,lemma=dont|en];
      e: H -[udep]-> D1;
      D1 << H}
    commands{add_edge f: D -> D1;f.label=e.label; del_edge e}
  }

% Quantity adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-quant_aux(lex from "lexicons/adv_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    without{D1[Polarity=Neg]}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Quantity adverbial locutions that are modifiers must move from the auxiliaries to their argument.
  rule advloc-quant_aux(lex from "lexicons/advloc_quant.lp"){
    pattern{
      H[upos=AUX]; H -[1=comp,2=aux|pred]-> D;
      e: H -[mod]-> D1;
      D1[upos=ADV];
      D1 -[HEAD]-> H1;
      H1[lemma=lex.head];
      D1 -[IDIOM]-> D2;
      D2[lemma=lex.dep];
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Manner adverbs that are modifiers must move from the auxiliaries to their argument.
  rule adv-manner_aux(lex from "lexicons/adv_manner.lp"){
    pattern{
      H[upos=AUX];H -[1=comp,2=aux|pred]-> D;
      D1[upos=ADV,lemma=lex.adv];
      e: H -[mod]-> D1;
      H << D1}
    commands{add_edge D -[mod]-> D1;del_edge e}
  }

% Adverb "aussi used as a quantity adverb must move from the auxiliaries to their argument.
  rule aux_aussi_comp{
    pattern{
      H[upos=AUX];H -[1=comp,2=pred]-> D;  D[upos=ADJ|ADV];
      e:H -[mod]-> D1;
      D1[upos=ADV,lemma=aussi];
      H << D1; D1 << D;
      CONJ[upos=SCONJ,lemma=que]; D1 -[comp:obj]-> CONJ}
    commands{add_edge D -[mod]-> D1; del_edge e}
  }

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some left dependents of th first conjunct of a coordination are marked as shared by error and the mark must be removed.
package FR_unmark_left_conj-dep{
% Modifiers that are marked shared by error.
  rule unmark_mod {
    pattern {
      C1 -[1=conj]-> C2;
      e:C1 -[mod]-> D; D << C1;
      D[upos=lex.pos, lemma=lex.adv,Shared=Yes]}
    commands{del_feat D.Shared}
  }
#BEGIN	lex
adv	pos
%-----
assez	ADV
bien	ADV
fort	ADV
mal	ADV
moins	ADV
ne	ADV
non	ADV
pas	ADV
peu	ADV
plus	ADV
quasi	ADV
si	ADV
super	ADV
tout	ADV
très	ADV
trop	ADV
ultra	ADV
#END

% The second conjunct is introduced by the conjunction "car".
  rule car{
    pattern{
      C1 -[1=conj]-> C2;
      e:C1 -> D; D << C1;
      D[Shared=Yes];
      C2 -[cc]-> CONJ; CONJ[upos=CCONJ,lemma=car]}
    commands{ del_feat D.Shared}
  }

% The left dependent that is marked by error is modifier extraposed at the beginning of a clause.
% Ex: French-GSD fr-ud-train_01726 - Élève[D] depuis deux ans, je suis[C1] très satisfait de mon professeur de batterie, et je recommande[C2] cette école !
  rule left_extraposition(lex from "lexicons/noun_adv.lp") {
    pattern{
      C1 -[1=conj]-> C2;
      e:C1 -[1=mod]-> D; D[Shared=Yes];
      D[upos=ADJ|NOUN|PRON|PROPN|VERB];
      C1 -[1=subj]-> SUBJ; D << SUBJ; SUBJ << C1}
    without{D -[1=case]-> *}
    without{D[upos=NOUN,lemma= lex.noun]}
    without{% Modifiers in the form NOUN + PREP + NOUN.
            % Ex: fr-ud-dev_00322 - Couche par couche, Morin arrange ...
      C[upos=NOUN];
      P[upos=ADP,lemma="après"|par|sur];
      N[upos=NOUN];
      N -[1=case]-> P;
      C -[1=udep]-> N;
      N.lemma=D.lemma}
    commands{del_feat D.Shared}
  }

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The conversion of "suite à", "face à" are invalid ('advmod' should be 'ADV' but it is 'NOUN')
% To avoid this, we transform these phrase as idiom in order to make them fixed after conversion
package FR_noun_adv{
  rule adp_to_adv (lex from "lexicons/noun_adv_prep.lp"){
    pattern{
      N[upos=NOUN, lemma=lex.noun, ExtPos=ADP, Idiom=Yes];
      P[upos=ADP, lemma=lex.prep, InIdiom=Yes];
      N -[comp:obl]-> P;
      e: N -[comp:obj]-> N1}
    commands{
      N.ExtPos = ADV; del_feat N.Idiom;
      del_feat P.InIdiom;
      del_edge e; add_edge P -[comp:obj]-> N1}  
  }

  rule udep_to_mod (lex from "lexicons/noun_adv_prep.lp"){
    pattern{
      N[upos=NOUN, lemma=lex.noun, ExtPos=ADV];
      e: H -[udep]-> N}
    commands{del_edge e; add_edge H -[mod]-> N}  
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
strat fr_main {
  Seq(
    Onf(idioms),
    specific_expr_init,
    Onf (FR_relations),
    Onf (sub_relations),
    Onf (rel_extensions),
    Onf (relations),
    Onf (FR_set_level),
    reverse_relations.main,
    Onf(FR_shift_out_edges),
    Onf(FR_shift_out_back_edges),
    Onf(mark_left_conj-dep),
    Onf(FR_unmark_left_conj-dep),
    Onf (minimize_right_conj-dep),
    Onf (add_conj_emb),
    Onf (chained_relations),
    Onf (unk_rel),
    specific_expr_close,
    Onf(FR_noun_adv),
  )
}
