strat bej_mSUD_to_SUD_main { 
  Seq(
    Onf (dep_on_InflAff),
    Onf (right_headeed_appos),
    Onf (init_MGloss_MSeg),
    Onf (remove_bracket),
    Onf (morph2word),
    Onf (fix_features),
    Onf (fix_rel),
    )
  }

% In a few cases in mSUD_Beja-NSC, an InflAff which is dependent of a morph relation have another dep.
% The rule [dep_on_InflAff] move the dependent one level up to prepare data for the main [morph2word] package
% NB: This rule is mSUD_Beja-NSC based and may need to be generalized for other corpora or language.
rule dep_on_InflAff {
  pattern {
    X -[type=m]-> IA;
    IA [TokenType=InflAff]; 
    e: IA -> Y;
  }
  without { e.type = m; Y << IA } % BEJ_MV_NARR_05_eritrea_167-171
  commands {
    add_edge f: X -> Y;
    f.label = e.label;
    del_edge e;
  }
}

rule right_headeed_appos {
  pattern { X -[conj:appos]-> Y; Y << X }
  commands {
    del_edge X -[conj:appos]-> Y;
    add_edge X -[mod]-> Y;
  }
}

package init_MGloss_MSeg {
  rule gov { 
    pattern { 
      N1 [TokenType=DerAff|InflAff|Root, !MGloss, !MSeg];
      N2 [TokenType=DerAff|InflAff|Root];
      N1 -[type=m]-> N2;
    }
    commands {
      N1.MGloss = N1.Gloss;
      N1.MSeg = N1.form;
    }
  }

  rule dep { 
    pattern { 
      N1 [TokenType=DerAff|InflAff|Root];
      N2 [TokenType=DerAff|InflAff|Root, !MGloss, !MSeg];
      N1 -[type=m]-> N2;
    }
    commands {
      N2.MGloss = N2.Gloss;
      N2.MSeg = N2.form;
    }
  }
}

rule remove_bracket {
  pattern { N[MGloss = lex.search]}
  commands { N.MGloss = lex.replace}
}
#BEGIN lex
search	replace
%-----------------------------
-[3PL]	-3PL
-[AOR].[1SG]	-AOR.1SG
-[AOR].[3SG].[M]	-AOR.3SG.M
-[CAUS]	-CAUS
-[CVB].[MNR]	-CVB.MNR
-[CVB].[SMLT]	-CVB.SMLT
-[EMPH]	-EMPH
-[GEN]	-GEN
-[GEN].[PL]	-GEN.PL
-[IMP].[PL]	-IMP.PL
-[IMP].[SG].[F]	-IMP.SG.F
-[IMP].[SG].[M]	-IMP.SG.M
-[IPFV].[2PL]	-IPFV.2PL
-[IPFV].[3SG].[M]	-IPFV.3SG.M
-[L]	-L
-[MID]	-MID
-[N].[AC]	-N.AC
-[PFV].[1PL]	-PFV.1PL
-[PFV].[1SG]	-PFV.1SG
-[PFV].[2SG].[M]	-PFV.2SG.M
-[PFV].[3SG].[F]	-PFV.3SG.F
-[PFV].[3SG].[M]	-PFV.3SG.M
-[PL]	-PL
-[VN]	-VN
-[VOC]	-VOC
[1PL]-	1PL-
[1SG]-	1SG-
[2SG].[F]-	2SG.F-
[2SG].[M]-	2SG.M-
[3SG].[F]-	3SG.F-
[3SG].[M]-	3SG.M-
[3]-	3-
[CAUS]-	CAUS-
[N].[AC]-	N.AC-
[PASS].[INT]-	PASS.INT-
[PLAC]~drip	PLAC~drip
[PLAC]~sit\[MID]	PLAC~sit\MID
[RECP]-	RECP-
be_awake\[MID]	be_awake\MID
be_down\[PFV]	be_down\PFV
be_there\[AOR]	be_there\AOR
be_there\[IPFV]	be_there\IPFV
be_unable\[INT].[PFV]	be_unable\INT.PFV
become\[AOR]	become\AOR
become\[IPFV]	become\IPFV
become\[NEG].[OPT]	become\NEG.OPT
become\[PFV]	become\PFV
child\[F]	child\F
come\[PFV]	come\PFV
come_back\[MID].[PFV]	come_back\MID.PFV
convey\[IPFV]	convey\IPFV
do\[PFV]	do\PFV
find~[PLAC]find~PLAC	find~PLACfind~PLAC
go\[INT].[PFV]	go\INT.PFV
go_out\[PFV]	go_out\PFV
have\[AOR]	have\AOR
have\[IPFV]	have\IPFV
hear\[INT].[PFV]	hear\INT.PFV
kneel\[PFV]	kneel\PFV
know\[MID]	know\MID
know\[MID].[IPFV]	know\MID.IPFV
know\[MID].[PFV]	know\MID.PFV
lean\[PFV]	lean\PFV
leave\[PFV]	leave\PFV
look\[INT].[PFV]	look\INT.PFV
look\[PFV]	look\PFV
move_away\[PFV]	move_away\PFV
pursue\[PFV]	pursue\PFV
rain\[INT].[PFV]	rain\INT.PFV
resemble\[PFV]	resemble\PFV
ride\[MID]	ride\MID
ride\[MID].[NEG].[OPT]	ride\MID.NEG.OPT
say\[PFV]	say\PFV
sit\[MID]	sit\MID
sit\[MID].[PFV]	sit\MID.PFV
take\[AOR]	take\AOR
take\[PFV]	take\PFV
take_off\[INT].[PFV]	take_off\INT.PFV
take_shelter\[INT]	take_shelter\INT
take_shelter\[INT].[AOR]	take_shelter\INT.AOR
take_shelter\[INT].[PFV]	take_shelter\INT.PFV
wait\[PFV]	wait\PFV
#END












% The package morph2word contains eight rules with all combinations of
% * InflAff / DerAff
% * the affixe is before / after the stem (rule name starting with pre_ or post_)
% * the affixe is a dependant / a governor of the stem (rule name ending with _dep or _gov)
package morph2word {
  rule pre_InflAff_dep {
    pattern {
      ROOT [TokenType=Root];
      IA [TokenType=InflAff];
      IA < ROOT;
      e: ROOT -[type=m]-> IA;
    }
    commands {
      ROOT.form = IA.form[:-1] + ROOT.form;
      ROOT.wordform = IA.wordform[:-1] + ROOT.wordform;
      ROOT.MGloss = IA.MGloss + ROOT.MGloss;
      ROOT.MSeg = IA.MSeg + ROOT.MSeg;
      prepend_feats IA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignBegin = IA.AlignBegin;
      del_node IA;
    }
  }

  rule pre_InflAff_gov {
    pattern {
      ROOT [TokenType=Root];
      IA [TokenType=InflAff];
      IA < ROOT;
      e: IA -[type=m]-> ROOT;
    }
    commands {
      shift IA ==> ROOT;
      ROOT.form = IA.form[:-1] + ROOT.form;
      ROOT.wordform = IA.wordform[:-1] + ROOT.wordform;
      ROOT.MGloss = IA.MGloss + ROOT.MGloss;
      ROOT.MSeg = IA.MSeg + ROOT.MSeg;
      prepend_feats IA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignBegin = IA.AlignBegin;
      del_node IA;
    }
  }

  rule post_InflAff_dep {
    pattern {
      ROOT [TokenType=Root];
      IA [TokenType=InflAff];
      ROOT < IA;
      e: ROOT -[type=m]-> IA;
    }
    commands {
      ROOT.form = ROOT.form + IA.form[1:];
      ROOT.wordform = ROOT.wordform + IA.wordform[1:];
      ROOT.MGloss = ROOT.MGloss + IA.MGloss;
      ROOT.MSeg = ROOT.MSeg + IA.MSeg;
      append_feats IA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignEnd = IA.AlignEnd;
      del_node IA;
    }
  }

  % One case of affix attaching on a clitic (sent_id = BEJ_MV_NARR_12_witch_126-135)
  % A special rule is needed: no MGloss/MSeg on Clit
  rule post_InflAff_dep_on_clit {
    pattern {
      CLIT [TokenType=Clit];
      IA [TokenType=InflAff];
      CLIT < IA;
      e: CLIT -[type=m]-> IA;
    }
    commands {
      CLIT.form = CLIT.form + IA.form[1:];
      CLIT.wordform = CLIT.wordform + IA.wordform[1:];
      append_feats IA =[re"RX\|Number\|Gender"]=> CLIT;
      CLIT.AlignEnd = IA.AlignEnd;
      del_node IA;
    }
  }

  rule post_InflAff_gov {
    pattern {
      ROOT [TokenType=Root];
      IA [TokenType=InflAff];
      ROOT < IA;
      e: IA -[type=m]-> ROOT;
    }
    commands {
      shift IA ==> ROOT;
      ROOT.form = ROOT.form + IA.form[1:];
      ROOT.wordform = ROOT.wordform + IA.wordform[1:];
      ROOT.MGloss = ROOT.MGloss + IA.MGloss;
      ROOT.MSeg = ROOT.MSeg + IA.MSeg;
      append_feats IA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignEnd = IA.AlignEnd;
      del_node IA;
    }
  }


  rule pre_DerAff_dep {
    pattern {
      ROOT [TokenType=Root];
      DA [TokenType=DerAff, DerPos];
      DA < ROOT;
      e: ROOT -[type=m]-> DA;
    }
    commands {
      ROOT.form = DA.form[:-1] + ROOT.form;
      ROOT.wordform = DA.wordform[:-1] + ROOT.wordform;
      ROOT.MGloss = DA.MGloss + ROOT.MGloss;
      ROOT.MSeg = DA.MSeg + ROOT.MSeg;
      prepend_feats DA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignBegin = DA.AlignBegin;
      ROOT.upos = DA.DerPos;
      shift_out DA ==> ROOT;
      del_node DA;
    }
  }

  rule pre_DerAff_gov {
    pattern {
      ROOT [TokenType=Root];
      DA [TokenType=DerAff, DerPos];
      DA < ROOT;
      e: DA -[type=m]-> ROOT;
    }
    commands {
      shift DA ==> ROOT;
      ROOT.form = DA.form[:-1] + ROOT.form;
      ROOT.wordform = DA.wordform[:-1] + ROOT.wordform;
      ROOT.MGloss = DA.MGloss + ROOT.MGloss;
      ROOT.MSeg = DA.MSeg + ROOT.MSeg;
      prepend_feats DA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignBegin = DA.AlignBegin;
      ROOT.upos = DA.DerPos;
      del_node DA;
    }
  }

  rule post_DerAff_dep {
    pattern {
      ROOT [TokenType=Root];
      DA [TokenType=DerAff, DerPos];
      ROOT < DA;
      e: ROOT -[type=m]-> DA;
    }
    commands {
      ROOT.form = ROOT.form + DA.form[1:];
      ROOT.wordform = ROOT.wordform + DA.wordform[1:];
      ROOT.MGloss = ROOT.MGloss + DA.MGloss;
      ROOT.MSeg = ROOT.MSeg + DA.MSeg;
      append_feats DA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignEnd = DA.AlignEnd;
      ROOT.upos = DA.DerPos;
      shift_out DA ==> ROOT;
      del_node DA;
    }
  }

  rule post_DerAff_gov {
    pattern {
      ROOT [TokenType=Root];
      DA [TokenType=DerAff, DerPos];
      ROOT < DA;
      e: DA -[type=m]-> ROOT;
    }
    without { ROOT -[type=m]-> DA2; DA [TokenType=DerAff]; }
    commands {
      shift DA ==> ROOT;
      ROOT.form = ROOT.form + DA.form[1:];
      ROOT.wordform = ROOT.wordform + DA.wordform[1:];
      ROOT.MGloss = ROOT.MGloss + DA.MGloss;
      ROOT.MSeg = ROOT.MSeg + DA.MSeg;
      append_feats DA =[re"RX\|Number\|Gender"]=> ROOT;
      ROOT.AlignEnd = DA.AlignEnd;
      ROOT.upos = DA.DerPos;
      del_node DA;
    }
  }
}

package fix_features {
  % The rules in package `morph2word` use concatenation for Gender and Number which supposes that the feature is defined only once in the morphs of a word
  % There are a few cases where it is not true
  % - pattern { X -[type=m]-> Y1; Y1[Gender]; X -[type=m]-> Y2; Y2[Gender] }
  % - pattern { X -[type=m]-> Y; Y[Number]; X [Number] }
  % The two rules above are a post edition which correct the wrong concatenation in these cases
  rule gender {
    pattern { X[Gender=lex.concat] }
    commands { X.Gender = lex.fix}
  }
#BEGIN lex
concat	fix
%-----------------------------
MascMasc	Masc
FemMasc	Masc
FemFem	Fem
#END

  rule number {
    pattern { X[Number=lex.concat] }
    commands { X.Number = lex.fix}
  }
#BEGIN lex
concat	fix
%-----------------------------
PlurPlur	Plur
SingSing	Sing
#END

  rule NOUN_VerbForm {
    pattern { X [upos=NOUN, VerbForm] }
    commands { del_feat X.VerbForm }
  }
}

rule fix_rel {
  pattern { e:X -[comp:aux]-> Y; X [upos<>AUX] }
  commands { e.label = comp }
}
