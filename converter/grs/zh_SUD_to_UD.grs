%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "SUD_to_UD.grs"

strat zh_main { 
  Seq (
    Onf (move_on_word_head),
    Onf (fusion),
    Onf (comp),
    u_main,
    Onf (zh_post)
  )
}

strat sud_word {
  Seq (
    Onf (fusion),
    Onf (comp),
  )
}

rule move_on_word_head {
  pattern {
    N1 -[2=m]-> N2;
    e: N2 -> N3;
  }
  without { e.2 = m }
  commands {
    add_edge f: N1 -> N3;
    f.label = e.label;
    del_edge e;
  }
}


package fusion {
  rule suff_fusion_extpos {
    pattern {
      N [ExtPos];
      N -[2=m]-> M;  % M is attached with the :m extension
      N < M          % M is a suffix
    }  
    without { M -> X}         % M is a leaf (force application order)
    commands { 
      N.form = N.form + M.form;             % concatenate the surface form
      N.wordform = N.wordform + M.wordform; % concatenate the surface form
      del_node M;
      N.upos = N.ExtPos; del_feat N.ExtPos;
    }
  }

  rule suff_fusion {
    pattern {
      N[!ExtPos];
      N -[2=m]-> M;  % M is attached with the :m extension
      N < M          % M is a suffix
    }  
    without { M -> X}         % M is a leaf (force application order)
    commands { 
      N.form = N.form + M.form;  % concatenate the surface form
      N.wordform = N.wordform + M.wordform;  % concatenate the surface form
      del_node M;                % concatenate the surface form
    }
  }
  
  rule pref_fusion_extpos {
    pattern {
      N [ExtPos];
      N -[2=m]-> M;  % M is attached with the :m extension
      M < N          % M is a prefix
    }  
    without { M -> X}         % M is a leaf (force application order)
    commands { 
      N.form = M.form + N.form;              % concatenate the surface form
      N.wordform = M.wordform + N.wordform;  % concatenate the surface form
      del_node M;
      N.upos = N.ExtPos; del_feat N.ExtPos;
    }
  }

  rule pref_fusion {
    pattern { 
      N [!ExtPos];
      N -[2=m]-> M;  % M is attached with the :m extension
      M < N          % M is a prefix
    }  
    without { M -> X}         % M is a leaf (force application order)
    commands { 
      N.form = M.form + N.form;  % concatenate the surface form
      N.wordform = M.wordform + N.wordform;  % concatenate the surface form
      del_node M;                % concatenate the surface form
    }
  }
}

package comp {
  rule obl {
    pattern { 
      e: N -[comp]-> M; N[form <> "的"];
      M [upos=ADP|PART];
    }
    commands { e.2 = obl }
  }

  rule obj {
    pattern { 
      e: N -[comp]-> M; N[form <> "的"];
      M [upos=NOUN|PROPN|PRON|VERB|AUX];
    }
    commands { e.2 = obj }
  }

  rule obj2 {
    pattern { 
      e: N -[comp]-> M; N[form = "的"];
    }
    commands { e.2 = obj }
  }
}

package zh_post {
  rule obl_mod {
    pattern {
      e: N -[obl:mod]-> M;
    }
    commands {
      del_feat e.2;
    }
  }

  rule dep_comp {
    pattern {
      e: N -[dep:comp]-> M;
    }
    commands {
      del_feat e.2;
    }
  }
}


