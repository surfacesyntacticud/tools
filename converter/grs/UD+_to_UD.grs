% Choose one MWE in the sentence
rule choose_mwepos {
  pattern { N[_MISC_EXTPOS,_MISC_Type=MWE] }
  without { N -[fixed]-> * }
  commands { N.fix=Head}
}

% Mark all components of the chosen MWE with feature fix=Part and remove the internal dependencies.
rule propagate{
  pattern { N [fix]; e:N -> M; M[_MISC_INMWE] }
  commands { M.fix=Part; del_feat M._MISC_INMWE; del_edge e; }
}

% Mark the leftmost component of the MWE with fix=First.
package first {
% The leftmost component is the head of the MWE
  rule head_first {
    pattern { N[fix=Head] }
    without { M[fix]; M < N }
    commands { N.fix=First }
  }

%The leftmost component is not the head of the MWE.
  rule head_not_first {
    pattern { N[fix=Part]; H[fix=Head, _MISC_Type]; }
    without { H < N }
    without { M[fix]; M < N }
    commands {
      N.fix=First;
      N._MISC_EXTPOS = H._MISC_EXTPOS; del_feat H._MISC_EXTPOS;
      N._MISC_Type = H._MISC_Type; del_feat H._MISC_Type;
      shift H ==> N}
  }
}

rule init_fixed {
  pattern { F[fix=First]; N [fix]; F < N }
  without { * -> N}
  commands { add_edge F -[fixed]-> N }
}

rule propagate_fixed {
  pattern { F[fix=First]; F -[fixed]-> L; N [fix]; L < N }
  without { * -> N }
  commands { add_edge F -[fixed]-> N;  }
}

rule clean {
  pattern { N[fix] }
  commands { del_feat N.fix }
}

strat one {
  Seq (
    choose_mwepos,
    Onf (propagate),
    first,
    init_fixed,
    Onf (propagate_fixed),
    Onf (clean),
	)
}

strat main { Iter (one) }

strat onf { Onf (one) }