%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
include "SUD_to_UD.grs"

strat bej_SUD_to_UD_main {
  Seq (
    Onf (bej_pre),
    u_main,
    Onf(bej_post),
    Onf(bej_valid),
  )
}


package bej_pre {

  rule intern {
    pattern { e: X -[deep=intern]-> Y }
    commands { del_feat e.deep }

  }

  % Remove whitespaces in XPOS values
  rule xpos {
    pattern { N[xpos=lex.in] }
    commands { N.xpos=lex.out }
  }
#BEGIN lex
in	out
%----------
V1, IRG	V1,IRG
V2, IRG	V2,IRG
TAM, PNG	TAM,PNG
AUX, EMPH	AUX,EMPH
V1, IRG, NEG	V1,IRG,NEG
N, COP	N,COP
PTCL, NEG	PTCL,NEG
#END

  % Macrosyntax tokens are annotated with `upos=PUNCT` and with relation `punct` in SUD.
  % In case of idioms, the conversion to UD builds invalid UD structures ('PUNCT' must be 'punct' but it is 'fixed').
  % We change macrosyntax annotations with `upos=X` and relation `unk` if the token is in an Idiom
  % Ex: "=jeːt / toː= na" (BEJ_MV_NARR_01_shelter_025-033) and "=eːt / toː= na" (BEJ_MV_NARR_01_shelter_132-138)
  rule PUNCT_to_X {
    pattern { e: N -[punct]-> P; P [upos=PUNCT,InIdiom=Yes]  }
    commands { 
      e.1 = unk;
      P.upos=X;
    }
  }
}

package bej_post {
  rule conj {
    pattern { e:N -[conj]-> M; }
    commands { del_edge e; add_edge N -[dep:conj]-> M; }
  }

  rule flat {
    pattern { e:N -[flat]-> M; }
    commands { del_edge e; add_edge N -[dep:flat]-> M; }
  }

  rule redup {
    pattern { e:N -[conj:redup]-> M; }
    commands { del_edge e; add_edge N -[dep:redup]-> M; }
  }

  rule dislocated_obl {
    pattern { e:N -[dislocated:obl]-> M; }
    commands { del_edge e; add_edge N -[dislocated]-> M; }
  }
}

package bej_valid {
  rule VerbClass {
    pattern { N [upos<>VERB|AUX, VerbClass] }
    commands { del_feat N.VerbClass }
  }

  rule VerbType {
    pattern { N [upos<>VERB|AUX, VerbType] }
    commands { del_feat N.VerbType }
  }

  rule Voice {
    pattern { N [upos=NOUN, Voice] }
    commands { del_feat N.Voice }
  }

  rule x {
    pattern { e:N -[det]-> X; X[upos=X] }
    commands { e.1 = dep }
  }

  rule remove_lemma {
    pattern { N [lemma] }
    commands { del_feat N.lemma }
  }

  rule obl_poss {
    pattern { e:X -[obl:poss]-> Y }
    commands { e.label="nmod:poss" }
  }

  rule ArabicVerbClass {
    pattern { N [Lang=ar, VerbClass] }
    commands { del_feat N.VerbClass }
  }

  rule det_dep {
    pattern { X -[det]-> Y; e: Y -[dep]-> Z }
    commands { 
      del_edge e; add_edge X -[dep]-> Z;
      shift_out Y =[punct]=> X
    }
  }

  rule nsubj_n {
    pattern { e: X -[nsubj/m]-> Y }
    commands { e.label=dep }
  }

  % rule to avoid UD validation alert
  rule det_INTJ {
    pattern { e: X -[det]-> Y; Y[upos=INTJ] }
    commands { e.label=dep }
  }

  rule case_children {
    pattern { e: X -[case]-> Y; Y -[dep:comp]-> Z }
    commands { e.label=dep }

  }
}