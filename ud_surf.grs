package chained_conj {
  rule r {
    pattern {
      H -[conj]-> X1;
      e: H -[conj]-> X2;
      X1 << X2;
    }
    without {
      H -[conj]-> X;
      X1 << X; X << X2;
    }
    without {
      H -[conj]-> X;
      X2 << X;
    }
    commands {
      del_edge e;
      add_edge X1 -[conj]-> X2;
    }
  }
}

package case_dep{
	rule r{
		pattern {
		e:H-[case]->X1;
		}
		
		commands {
		del_edge e;
		add_edge X1-[dep]-> H;
		shift_in H==>X1;
		shift_out H=[punct|cc|conj]=>X1;
		}
	
	}
}

strat main { Seq(Onf (chained_conj),Onf (case_dep))}
