rule prepare {
  pattern {
    N2 [upos=DET, textform="_"];
    N1 -> N2; e:N2 -[^unk]-> N3;
  }
  commands {
    add_edge f: N1 -> N3; f.label = e.label; del_edge e;
  }
}

package mwt {
  rule N2_pron {
    pattern { 
      N1 [textform]; N2 [textform="_"]; N1 < N2;
      N2 [upos=PRON]
    }
    commands {
      N2.form = N1.textform;
      del_feat N2.textform;
      shift N1 ==> N2;
      del_node N1;
      N2.mwt=yes;
    }
  }

  rule N1_N2 {
    pattern { 
      N1 [textform]; N2 [textform="_"]; N1 < N2;
      N2 [upos<>PRON];
      N1 -[flat@name|unk|goeswith]-> N2; 
    }
    commands {
      N1.form = N1.textform;
      del_feat N1.textform; 
      shift N2 ==> N1;
      del_node N2;
      N1.mwt=yes;
    }
  }

  rule N2_det {
    pattern { 
      N1 [textform]; N2 [textform="_"]; N1 < N2;
      N2 [upos<>PRON];
      X -[det|reparandum]-> N2; 
    }
    commands {
      N1.form = N1.textform;
      del_feat N1.textform; 
      del_node N2;
      N1.mwt=yes;
    }
  }
}

package back_off {
  rule au_plus_ADV {
    pattern { 
      N1 [textform]; N2 [textform="_"]; N1 < N2;
      N1 -[comp:obj]-> X;
      e: X -> N2
    }
    commands {
      N2.form = N1.textform;
      del_feat N2.textform;
      del_edge e;
      shift N1 ==> N2;
      del_node N1;
      add_edge N2 -[comp:obj]-> X;
      N2.mwt=yes;
    }
  }
}

package lemma {
  rule au {
    pattern { N[form=Au|au|Aux|aux, mwt=yes]}
    without { N.lemma = au }
    commands { N.lemma = au }
  }
  rule du {
    pattern { N[form=Du|du, mwt=yes]}
    without { N.lemma = du }
    commands { N.lemma = du }
  }
}

rule wordform {
  pattern { N[form=lex.form, mwt=yes]}
  without { N.wordform = lex.wordform }
  commands { N.wordform = lex.wordform }
}
#BEGIN lex
form	wordform
%----------------------
au	au
Au	au
aux	aux
Aux	aux
Du	du
du	du
duquel	duquel
Duquel	duquel
desquels	desquels
Desquels	desquels
desquelles	desquelles
Desquelles	desquelles
auquel	auquel
Auquel	auquel
auxquels	auxquels
Auxquels	auxquels
auxquelles	auxquelles
Auxquelles	auxquelles
#END

rule clean {
  pattern { N [mwt] }
  commands { del_feat N.mwt; } 
}

rule rm_goeswih {
  pattern { M -[goeswith]-> N; }
  commands {del_node N; }
}

package correction {
  rule VerbForm {
    pattern { N[CorrectVerbForm] }
    commands {
      N.VerbForm = N.CorrectVerbForm;
      del_feat N.CorrectVerbForm;
    }
  }

  rule Number {
    pattern { N[CorrectNumber] }
    commands {
      N.Number = N.CorrectNumber;
      del_feat N.CorrectNumber;
    }
  }

  rule Gender {
    pattern { N[CorrectGender] }
    commands {
      N.Gender = N.CorrectGender;
      del_feat N.CorrectGender;
    }
  }

  rule fix_Person {
    pattern { N[CorrectPerson<>none] }
    commands {
      N.Person = N.CorrectPerson;
      del_feat N.CorrectPerson;
    }
  }

  rule rm_Person {
    pattern { N[CorrectPerson=none] }
    commands {
      del_feat N.Person;
      del_feat N.CorrectPerson;
    }
  }

  rule Tense {
    pattern { N[CorrectTense] }
    commands {
      N.Tense = N.CorrectTense;
      del_feat N.CorrectTense;
    }
  }

  rule fixMood {
    pattern { N[CorrectMood<>none] }
    commands {
      N.Mood = N.CorrectMood;
      del_feat N.CorrectMood;
    }
  }
  
  rule rmMood {
    pattern { N[CorrectMood=none] }
    commands {
      del_feat N.Mood;
      del_feat N.CorrectMood;
    }
  }

  rule CorrectSpaceAfter_no {
    pattern { N[CorrectSpaceAfter=No] }
    commands {
      N.SpaceAfter=No;
      del_feat N.CorrectSpaceAfter;
    }
  }
  
  rule CorrectSpaceAfter_yes {
    pattern { N[CorrectSpaceAfter=Yes] }
    commands {
      del_feat N.SpaceAfter;
      del_feat N.CorrectSpaceAfter;
    }
  }

  rule Typo {
    pattern { N[Typo=Yes, CorrectForm]; }
    commands {
      N.WrongForm = N.form;
      N.form = N.CorrectForm;
      N.wordform= N.form;
      del_feat N.Typo;
      del_feat N.CorrectForm;
    }
  }
}


package gsd2spoken {

rule wordform {
  pattern { N []; N.form <> N.wordform }
  commands { N.form = N.wordform }
}

  rule reparandum {
    pattern { e:GOV -[reparandum]-> DEP}
    commands { del_edge e ; add_edge DEP-[conj:dicto]->GOV ; shift_in GOV ==> DEP}
}

rule raising {
pattern { N[Subject=Generic|Instantiated] }
commands { N.Subject= NoRaising } 
}

  rule compobjpass {
    pattern { e:GOV -[comp:obj@pass]-> DEP}
    commands { del_edge e ; add_edge GOV-[comp:obj]->DEP }
}

  rule emb {
    pattern { e:GOV -[conj@emb]-> DEP}
    commands { del_edge e ; add_edge GOV-[conj:coord@emb]->DEP }
}
  rule conj2conjcoord {
    pattern { e:GOV -[conj]-> DEP}
    commands { del_edge e ; add_edge GOV-[conj:coord]->DEP }
}

  rule cutparataxis_1 {
	pattern { e:GOV -[parataxis]-> DEP ; P[upos="PUNCT"]; P<<DEP; P>> GOV; 
	P[lemma="..."|"...."|".."|"....."|"......"|"........"|"?"]; R[form="__0__"] }
	without {S[form="S"]}
    commands { del_edge e ;  add_edge R -[root]-> DEP ; shift_out GOV =[1=parataxis]=> DEP }
}

  rule cutparataxis_2 {
	pattern { e:GOV -[parataxis]-> DEP ; GOV[upos="VERB"|"AUX"]; DEP[upos="VERB"|"AUX"]; 
	P[form=":"]; P<<DEP; P>>GOV; DEP-[1=subj]->S; R[form="__0__"]}
	without {S>>DEP}
	commands { del_edge e ;  add_edge R -[root]-> DEP ; shift_out GOV =[1=parataxis]=> DEP }
	
}
  rule cequi2cut {
	pattern {e: GOV -[parataxis]-> DEP; DEP>>GOV; DEP[lemma="ce"]; DEP-[mod@relcl]->DEP2 }
	commands { e.label="dislocated" }
}

  rule parataxis2insert {
  	pattern { e: GOV -[parataxis]-> DEP ; DEP-[subj]->S; S>>DEP; DEP[upos="VERB"|"AUX"]; S[lemma <> "ce"]}
  	without {DEP-[1=comp]->C}
  	commands { del_edge e ; add_edge GOV -[parataxis:insert]->DEP}
}
  rule parataxis2insert_2 {
	pattern { e:GOV -[parataxis]-> DEP ; DEP<<GOV; DEP-[subj]-> S; S>>DEP}
    commands { del_edge e ; add_edge GOV -[parataxis:insert]->DEP}
}

  rule parataxis2parenth {
  pattern { e:GOV -[parataxis]-> DEP ; P1[form="("|"-"|"--"]; P2[form=")"|"-"|"--"]; P1<<DEP; P2>>DEP; 
  DEP[upos="VERB"|"AUX"]; DEP[VerbForm=Fin]}
  commands { e.2="parenth" ; add_edge GOV -[parataxis:parenth]->DEP ; P1.form="(" ; P2.form=")" }
}
  rule parataxis2conjappos_1 {
    pattern { e:GOV -[parataxis]-> DEP ; P[form=":"] ; P>>GOV ; P<<DEP ; GOV[upos<>AUX|VERB] }
    commands { del_edge e ; add_edge GOV -[conj:appos]->DEP}
}
  rule parataxis2conjappos_2 {
    pattern { e:GOV -[parataxis]-> DEP ; DEP[upos="NOUN"]; DEP>>GOV; P<DEP; P[lemma=","] ; 
    DEP[lemma<>"dommage"|"service"|"appel"] }
    commands { del_edge e ; add_edge GOV -[conj:appos]->DEP}
}

  rule appos2conjappos {
    pattern { e:GOV -[appos]-> DEP }
    commands { del_edge e ; add_edge GOV -[conj:appos]->DEP}
}

  rule comparg {
    pattern { e:GOV -[comp:arg]-> DEP}
    commands { del_edge e ; add_edge GOV -[mod]->DEP}
}

  rule monsieur {
    pattern { e:GOV -[flat@name|appos]-> DEP; GOV[lemma="monsieur"|"Monseigneur"|"madame"|"M."]}
    commands { del_edge e ; add_edge GOV -[mod@appos]->DEP}
}

}

  
strat main {
  Seq (
      Onf(prepare),
      Onf(mwt),
      Onf(back_off),
      Onf(lemma),
      Onf(wordform),
      Onf(clean),
      Onf (rm_goeswih),
      Onf (correction),
      Onf (gsd2spoken)
  )
  }
