% =============================================================================================
% ARG-OF dependencies are reversed.
rule rev_arg-of{
  pattern{d1: E -[enhanced=yes]-> P; d1.1=lex.argof}
  commands{del_edge d1; add_edge d2: P -> E; d2.1=lex.arg; d2.rev=Yes}
}
#BEGIN	lex
argof	arg
%----------
ARG0-of	ARG0
ARG1-of	ARG1
ARG2-of	ARG2
ARG3-of	ARG3
ARG4-of	ARG4
ARG5-of	ARG5
op1-of	op1
op2-of	op2
op3-of	op3
op4-of	op4
#END

% =============================================================================================
% Adding the individuation feature to entities
package indiv{

% Mass nouns
  rule mass(lex from "lexicons/mass_nouns.lp"){
    pattern{N[upos=NOUN,concept=lex.noun,!indiv]}
    commands{N.indiv=mass}
  }

% Count nouns
  rule count(lex from "lexicons/mass_nouns.lp"){
    pattern{N[upos=NOUN|PRON|PROPN|X,concept,!indiv]}
    without{N.concept=lex.noun}
    commands{N.indiv=count}
  }

}

% =============================================================================================
% Adding the determinacy feature to the entities.
% Feature "det" has two values: "yes" and "no".
package add_det{
  rule det{
    pattern{E -[det]-> D; E[!det]; D[concept= all|every|most|the|this|which]}
    commands{E.det=yes}
  }

  rule indet{
    pattern{E -[det]-> D; E[!det]; D[concept <>  all|every|most|or|the|this|which]}
    commands{E.det=no}
  }

  rule prop_noun{
    pattern{E[!det,upos=PROPN]}
    without{E -[det]-> *}
    commands{E.det=yes}
  }
  
  rule bare_nouns{
    pattern{E[!det,upos=NOUN]}
    without{E -[det]-> *}
    without{H -[ARG1]-> E; H[concept=topic]} % Ex: des voitures de fonction
    without{E1 -[ARG1-of]-> E; E1[upos=NOUN|PRON|PROPN]}
    commands{E.det=no}
  }
  
  rule pron-det{
    pattern{E[upos=PRON, concept<>most|that|this, !det]}
    without{E[PronType=Prs]}
    commands{E.det=no}
  }

  rule pron-prs-det{
    pattern{E[upos=PRON, PronType=Prs, !det]}
    commands{E.det=yes}
  }

  rule pron-indet{
    pattern{E[upos=PRON, concept=most|that|this, !det]}
    commands{E.det=yes}
  }

% For a conjunction of entities, if one of them is indeterminate, then the conjunction is indeterminate.
  rule coord_and_indet{
    pattern{
      CONJ[upos=CCONJ, concept=and,!det]; CONJ -[op1|op2|op3|op4|op5]-> C; C[det=no]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[!det]}
    commands{CONJ.det=no}
  }
  
% For a conjunction of entities, if all conjuncts are determined, then the conjunction is determined.
  rule coord_and_det{
    pattern{
      CONJ[upos=CCONJ, concept=and,!det]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[!det]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[det=no]}
    commands{CONJ.det=yes}
  }

% For a disjunction of entities, if all conjuncts have the same value for the det feature, then the disjunction also has the same value.
  rule coord_or{
    pattern{
      CONJ[upos=CCONJ, concept=or,!det]; CONJ -[op1|op2|op3|op4|op5]-> C; C[det]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[!det]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1.det <> C.det}
    commands{CONJ.det=C.det}
  }
 
}

% =============================================================================================
% Adding the distribution feature "collective" to participation relations.
rule distrib{
  pattern{p:EV -> E; p.1=lex.arg; EV.concept=lex.evt}
  without{p.distr=collect}
  commands{p.distr=collect}
}
#BEGIN	lex
evt	arg
%------------
pass-03	ARG1
spend-02	ARG1
#END

% =============================================================================================
% Adding the involvement feature to the entities.
% Feature "involv" has two values: "single" and "multiple".
package add_involv{
% The involv feature is generally determined by their number.
  rule gen{
    pattern{E[upos<>PROPN, det,Number=lex.number,!involv, concept <> everyone]}
    without{H -[ARG1]-> E; H[concept=topic]} % Ex: des voitures de fonction
    without{E -[det]-> D; D[concept=every]}
    without{E1 -[ARG1-of]-> E; E1[upos=NOUN|PRON|PROPN]}
    commands{E.involv=lex.involv}
  }
#BEGIN lex
number	involv
%-------------------
Plur	multiple
Sing	single
#END

% For entities with a determiner and no Number feature, the involv feature is determined by the number of the determiner.
  rule det{
    pattern{
      E[upos<>PROPN, det,!Number,!involv, concept <> everyone];
      E -[det]-> D; D[Number=lex.number]}
    without{E -[det]-> D; D[concept=every]}
    without{E1 -[ARG1-of]-> E; E1[upos=NOUN|PRON|PROPN]}
    commands{E.involv=lex.involv}
  }
#BEGIN lex
number	involv
%-------------------
Plur	multiple
Sing	single
#END

% Proper nouns have the value single for their involv feature.
  rule propn{
    pattern{E[upos=PROPN,!involv]}
    commands{E.involv=single}
  }

% Entities whose determiner has the concept every have the value multiple for their involv feature.
  rule every{
    pattern{
      E[indiv=count,!involv];
      E -[det]-> D; D[concept=every]}
    commands{E.involv=multiple}
  }

% Entities with the concept everyone have the value multiple for their involv feature.
  rule everyone{
    pattern{E[concept=everyone,indiv=count,!involv]}
    commands{E.involv=multiple}
  }

% For a conjunction, where all conjuncts have an involv feature, the value of the involv feature is multiple.
  rule coord_and{
    pattern{CONJ[upos=CCONJ, concept=and, !involv]; CONJ -[op1|op2|op3|op4|op5]-> C; C[involv]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[!involv]}
    commands{CONJ.involv=multiple}
  }

% For a disjunction, where all conjuncts have the same involv feature, the value of the involv feature is the same.
  rule coord_or{
    pattern{CONJ[upos=CCONJ, concept=or, !involv]; CONJ -[op1|op2|op3|op4|op5]-> C; C[involv]}
    without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[!involv]}
     without{CONJ -[op1|op2|op3|op4|op5]-> C1; C1[involv]; C1.involv <> C.involv}
   commands{CONJ.involv=C.involv}
  }
} 


% =============================================================================================
% When two entities E1 and E2 are related by a chain of dependencies, a scope relation is introduced between them (wide by default).
package scope_intro{
% E1 and E2 are arguments of type ARG of the same predicate.
% Ex: Fracas 002P1 - Tout Italien[E1] veut être[P] un grand ténor[E2].
% Ex: Fracas 016H - Il y a des ténors[E1] qui donneront[P] leur cachet[E2] à une œuvre caritative.
% Ex: Fracas 025P1__041H__073P1 - Plusieurs délégués[E1] ont publié[P] les résultats dans de grands quotidiens[E2] nationaux.
% Ex: Fracas 021H - Les résidents[E1] des[P] états[E2] membres peuvent circuler librement en Europe.
% CounterEx: Fracas 295H - une chaîne[E2] d'[P]entreprises[E1]
  rule arg_pred_arg{
    pattern{
      d1:P -> E1; d1.1=re"ARG.*";
      d2:P -> E2; d2.1=re"ARG.*";
      E1[involv=multiple]; E2[involv]}
    without{d1.distrib=collect}
    without{E2[involv=single,det=yes]}
    without{ E1 -> E2}
    without{ E2 -> E1}
    commands{add_edge E1 -[1=wide,enhanced=yes]-> E2}
  }

% E1 and E2 are arguments of type ARG of the same predicate. E2 has a possessive determiner.
  rule arg_pred_arg-poss{
    pattern{
      d1:P -> E1; d1.1=re"ARG.*";
      d2:P -> E2; d2.1=re"ARG.*";
      E1[involv=multiple]; E2[det=yes,involv=single];
      E2 -[det]-> D2; D2.Number__psor= E1.Number}
    without{d1.distrib=collect}
    without{ E1 -> E2}
    without{ E2 -> E1}
    commands{add_edge E1 -[1=wide,enhanced=yes]-> E2}
  }

% E1 is argument of a predicate P and E2 depends on P via another predicate P1.
% Ex: Fracas 024H__040P1 - Beaucoup de délégués[E1] ont obtenu[P] des résultats à[P1] partir de l'enquête[E2].
% CounterEx: Fracas 291H - Dupont a passé[P1] deux heures[E2] à découvrir[P] de nouvelles espèces[E1].
  rule arg_pred_pred_arg{
    pattern{
      d1:P -> E1; d1.1=re"ARG.*";
      d2:P1 -> P; d2.1=re"ARG.*";
      d3: P1 -> E2; d3.1=re"ARG.*";
      E1[involv]; E2[involv]}
    without{d1.distrib=collect}
    without{E1[involv=single]; E2[involv=single]}
    without{E1[involv=single]; E2[involv=multiple]; d3.distrib=collect}
    without{E2[involv=single]; E1[involv=multiple]; d1.distrib=collect}
    without{E1[involv=single,det=yes]; E2[involv=multiple]}
    without{E2[involv=single,det=yes]; E1[involv=multiple]}
    without{P1 -> E1}
    without{E1 -> E2}
    commands{add_edge E1 -[1=wide,enhanced=yes]-> E2}

  }

% E1 is argument of a predicate P and E2 depends on P via another predicate P1. E2 has a possessive determiner.
  rule arg_pred_pred_arg-poss{
    pattern{
      d1:P -> E1; d1.1=re"ARG.*";
      d2:P1 -> P; d2.1=re"ARG.*";
      d3: P1 -> E2; d3.1=re"ARG.*";
      E1[involv=multiple]; E2[involv=single];
      E2 -[det]-> D2; D2.Number__psor= E1.Number}
    without{d1.distrib=collect}
    without{P1 -> E1}
    without{E1 -> E2}
    commands{add_edge E1 -[1=wide,enhanced=yes]-> E2}
  }

}

% =============================================================================================
% The scope dependency E1 -> E2 is specified or reversed in some cases according to the involvement or multiple features attached to E1 and E2.
package scope_spec{

% Cumulative reading between E1 and E2
% Ex: Fracas 021H - Les résidents[E1] des états[E2] membres peuvent circuler librement en Europe.
  rule dual{
    pattern{
      d1:E1 -[1=wide,enhanced=yes]-> E2;
      E1[involv=multiple];
      E2[involv=multiple]}
    
    without{E2 -[det]-> D2; D2.Number__psor= E1.Number}
    commands{d1.1=dual}
  }

% The scope dependency is reversed according to the involvement feature attached to E1 and E2
  rule narrow{
    pattern{
      d1:E1 -[1=wide,enhanced=yes]-> E2;
      E1[involv=single];
      E2[involv=multiple]}
    commands{del_edge d1; add_edge E2 -[1=wide,enhanced=yes]-> E1}
  }
}

% =============================================================================================
% Scope dependencies starting from singular determiners; which are not in the scope of another determiner are removed.
% Ex Fracas 024H__040P1 - Beaucoup de délégués[E2] ont obtenu des résultats à partir de l'enquête[E1].
rule scope_del{
  pattern{d: E1 -[1=wide,enhanced=yes]-> E2; E1[involv=a|no|single]}
  without{* -[enhanced=yes]-> E1}
  commands{del_edge d}
}

% =============================================================================================
% Simplification of scope dependencies.
package scope_simplif{
  rule wide_dual-wide_wide{
    pattern{
      E1 -[1=wide,enhanced=yes]-> E2;
      E2 -[1=wide|dual,enhanced=yes]-> E3;
      d:E1 -[1=wide,enhanced=yes]-> E3}
   commands{del_edge d}
  }

% Ex:  Fracas 057P1 - Plusieurs délégués[E1] portugais ont publié leurs résultats[E2] dans de grands quotidiens[E3] nationaux.
  rule dual_dual_dual{
    pattern{
      E1 -[1=dual,enhanced=yes]-> E2;
      E2 -[1=dual,enhanced=yes]-> E3;
      d:E1 -[1=dual,enhanced=yes]-> E3}
   commands{del_edge d}
  }

}

% =============================================================================================
% ARG-of dependencies are restaured.
rule restaure_arg-of{
  pattern{d1: P -[rev=Yes]-> E}
  commands{add_edge d2:E -> P; d2.1 = d1.1 + "-of"; del_edge d1}
}


% =============================================================================================
% Strategies
% =============================================================================================
strat main{
  Seq(
  Onf(rev_arg-of),
  Onf(indiv),
  Onf(add_det),
  Onf(distrib),
  Onf(add_involv),
  Onf(scope_intro),
  Onf(scope_spec),
  %Onf(scope_del),
  Onf(scope_simplif),
  Onf(restaure_arg-of)
  )
}