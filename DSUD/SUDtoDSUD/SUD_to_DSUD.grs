% ===========================================
% Transformation of SUD annotation into DSUD (Deep Syntax Universal Dependencies) annotations.

% =============================================================================================
% Transformation of flat expressions into atoms.
rule flat{
  pattern{d:N1-[1=flat]-> N2}
  without{N2 -[1=flat]-> *}
  commands{
    N1.form= N1.form + "_" + N2.form;
    N1.lemma= N1.lemma + "_" + N2.lemma;
    del_edge d}
}

% =============================================================================================
% Transformation of idiomatic expressions into atoms.
package idioms{

% ===========================================
% Contract the expressions into a single atom.
package contract{
% Initialize the deep form of idiom internal nodes.
  rule initialize_dform_int{
    pattern{N[textform, !dform, InIdiom=Yes]}
    commands{N.dform=N.wordform}
  }

% Initialize the deep form of idiom heads.
  rule initialize_dform_head{
    pattern{N[textform, !dform, Idiom=Yes]}
    commands{N.dform=N.wordform}
  }

% Raise the deep form of an element to its governor, when it is at its immediate left.
  rule raise_left_dform{
    pattern{D[InIdiom=Yes, dform];H[dform]; d:H -> D; D < H}
    without{D.dform = "_"}
    without{H -> D1; D1[InIdiom=Yes]; D << D1; D1 <<H}
    commands{H.dform = D.dform + "_"+ H.dform; del_edge d; del_node D}
  }


% Raise the deep form of an element to its governor, when it is at its immediate right.
  rule raise_right_dform{
    pattern{D[InIdiom=Yes, dform];H[dform]; d:H -> D; D > H}
    without{D.dform = "_"}
    without{H -> D1; D1[InIdiom=Yes]; H << D1; D1 << D}
    commands{H.dform = H.dform + "_"+ D.dform; del_edge d; del_node D }
  }

% The deep form of a dependent internal element is empty.
  rule empty_dform{
    pattern{D[InIdiom=Yes, dform="_"];H[dform]; d:H -> D}
    without{H -> D1; D1[InIdiom=Yes]; D << D1; D1 <<H}
    commands{del_edge d; del_node D }
  }

}

% ===========================================
% Transform the head of an idiomatic expression into an idiomatic atom and replace the upos feature with the ExtPos feature for all words where this feature is present.
package finalize{
% Idioms
  rule idiom{
    pattern{ H[Idiom=Yes,dform]}
    commands{H.lemma=H.dform; H.form= H.dform; del_feat H.dform}
  }

% All expressions with an ExtPos feature
  rule extpos{
    pattern{ H[ExtPos]}
    commands{H.upos=H.ExtPos; del_feat H.ExtPos}
  }
}

% ===========================================
% Strategy of idiom atomization.
strat main{Seq(Onf(contract), Onf(finalize))}

}

% =============================================================================================
% Distribution of the governor of a coordination to all conjuncts.
package coord_gov{
%The governor is an auxiliary
  rule aux{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;
      d1: H -[1=comp,2=aux]-> CONJ1}
    without{H -[comp:aux@caus]-> CONJ1}
    without{H -> CONJ2}
    commands{add_edge d2:H -> CONJ2; d2.label = d1.label}
  }

% The conjuncts of the coordination are complementizers.
% Ex: SUD_French-GSD fr-ud-test_00024 - Ne pas rester[H] seul[CONJ1] ou en[CONJ2] couple dans une zone isolée.
% Ex: SUD_French-GSD fr-ud-test_00046 - on a l'impression[H] que[CONJ1] le fondamentalisme a toujours été là, qu'[CONJ2]il se maintient et n'aura aucun mal à perdurer
  rule conj-cpl{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;  CONJ1[!Shared];
      d1: H -[1 <> conj]-> CONJ1;
      CONJ2[upos = ADP|PART|SCONJ];
      }
    without{H -> CONJ2}
    without{CONJ1[upos = ADP|PART|SCONJ]; CONJ1.lemma = CONJ2.lemma}
    commands{add_edge d2:H -> CONJ2; d2.label = d1.label}
  }

% The conjuncts of the coordination are complementizers. The governor H of the first conjunct CONJ1 is itself in a coordination and CONJ1 is a dependent of the whole coordination of which H is a conjunct.
% Ex: SUD_French-GSD fr-ud-test_00021 - ... l'espoir et les rêves[H] d'[CONJ1]un peuple et de[CONJ2] ses enfants.
  rule conj-cpl-shared{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;  CONJ1[Shared];
      d1: H -[1 <> conj]-> CONJ1;
      CONJ2[upos = ADP|PART|SCONJ]}
    without{H -> CONJ2}
    without{CONJ1[upos = ADP|PART|SCONJ]; CONJ1.lemma = CONJ2.lemma}
    commands{
      add_edge d2:H -> CONJ2; CONJ2.Shared=Yes;
      d2.label = d1.label}
  }

% The conjuncts of the coordination are identical complementizers.
% Ex: Fracas 249P1 - Le PC-6082 est plus rapide que[CONJ1] l'ITEL-ZX[C1] et que[CONJ2] l'ITEL-ZY[C2].
% Ex  Fracas 177P1 - Jean a dit que[CONJ1] Marie avait[C1] écrit un rapport et que[CONJ2] Guillaume[C2] aussi.
  rule conj-cpl-id{
    pattern{
      d1:CONJ1 -[1=conj]-> CONJ2;
      CONJ1[upos = ADP|PART|SCONJ]; CONJ1 -[comp:obj]-> C1;
      CONJ2[upos = ADP|PART|SCONJ]; CONJ2 -[comp:obj|orphan]-> C2;
      CONJ1.lemma = CONJ2.lemma
      }
    commands{
      add_edge d2:C1 -> C2; d2.label = d1.label;
      shift_out CONJ2 ==> C2; del_edge d1; del_node CONJ2}
  }
% The conjuncts are adjectives or adverbs that modify the governor of the coordination.
% Ex: Fracas 162H - Guillaume possède une voiture rouge[C1] et lente[C2].
  rule mod{
    pattern{
      d1:CONJ1 -[1=conj]-> CONJ2; CONJ2[upos=ADJ|ADV];
      d2:H -[1=mod]-> CONJ1}
    without{d2.deep=relcl}
    without{H -> CONJ2}
    commands{add_edge H -[mod]-> CONJ2}
  }
}

% =============================================================================================
% Shared dependencies of a coordination are raised to the leftmost conjunct or ditributed to all conjuncts.
package coord_dep{
% Some left dependents are distributed to all conjuncts.
rule left_dep{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;
      d1:CONJ1 -[1 =comp|dislocated|det]-> D; D[Shared=Yes]; D << CONJ1}
    without{CONJ2 -> D}
    commands{add_edge d2:CONJ2 -> D; d2.label = d1.label}
  }

% Some right dependents are distributed to all conjuncts.
rule right_dep_distr{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;
      d1:CONJ2 -[1=comp]-> D; D[Shared=Yes]; D >> CONJ2}
    without{CONJ1 -> D}
    commands{add_edge d2:CONJ1 -> D; d2.label = d1.label}
  }
  
% Other right dependents are distributed to all conjuncts.
rule right_dep_rais{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;
      d1:CONJ2 -[1<>comp]-> D; D[Shared=Yes]; D >> CONJ2}
    without{CONJ1 -> D}
    commands{add_edge d2:CONJ1 -> D; d2.label = d1.label; del_edge d1}
  }
  
% Right indirect dependents
% Ex: SUD_French-GSD fr-ud-test_00022 - ... une période d'[CONJ1] irakisation[D1] ou de[CONJ2] somalisation[D2] de[D] la Libye.
rule right_ind-dep{
    pattern{
      CONJ1 -[1=conj]-> CONJ2;
      d1:CONJ2 -[^punct]-> D2; d2:D2 -[^punct]-> D; D[Shared=Yes]; D2 >> CONJ2; D >> D2;
      d3: CONJ1 -> D1; d3.1=d1.1; d3.2=d1.2}
    without{D1 -> D}
    commands{add_edge d4:D1 -> D; d4.label = d2.label}
  }
  
% Subjects of both conjuncts
% Ex: SUD_French-GSD fr-ud-test_00015 - Belle[CON1], grande[CONJ2], claire, séduisante à souhait, elle[SUBJ] est pourtant déjà à la retraite.
rule subj{
    pattern{
      CONJ1 -[1=conj]-> CONJ2; CONJ2[upos=ADJ|AUX|VERB];
      d1:CONJ1 -[1=subj]-> SUBJ}
    without{CONJ1 << SUBJ; SUBJ << CONJ2}
    without{CONJ2 -[1=subj]-> *}
    without{CONJ1[upos=ADJ]; CONJ2[upos <> ADJ|VERB]}
    commands{add_edge d2:CONJ2 -> SUBJ; d2.label = d1.label}
  }

}


% =============================================================================================
% Every dependency to a complementizer CPL (adposition or subordinating conjunction), which is not a modifier, is transformed into a dependency to the object of CPL and the deep lemma of CPL  is added as a Cpl feature to the dependency. This feature is a concatenation of the complementizers that form a chain.
%Ex: SUD_French-GSD fr-ud-train_01392 - J'y retourne dès que je peux !
% retourne -[Cpl=P-dès_C-que]-> peux
package del_cpl{
% Initialization of the Cpl feature for dependencies to complementizers.
  rule init{
    pattern{
      d: H -[1 <> cc|conj|mod|reparandum|udep, !Cpl]-> CPL;
      CPL[upos=ADP|SCONJ|PART]; CPL -[^ conj]-> *} % Ex SUD_French-GSD fr-ud-train_14326 - Auckland est située[H] sur[CPL] et autour d'un isthme...
    without{CPL [ExtPos <> ADP|SCONJ|PART]}
    without{H[upos=AUX]; H -[1=comp,2=pred]-> CPL}
    without{H[upos = ADP|PART|SCONJ]; H -[comp:obj|E:comp:obj]-> CPL}
    commands{d.Cpl= ""}
  }

% Initialization of the Cpl feature for dependencies to complementizers governed by complementizers that are not erasable.
% Ex: SUD_French-GSD fr-ud-dev_01490 - ...fut l'un des hauts dirigeants du Parti communiste chinois avant[CPL0] de[CPL] connaître la disgrâce
  rule init2{
    pattern{
      CPL0[upos=ADP|SCONJ|PART];
      d: CPL0 -[1=comp,2=obj]-> CPL; CPL[upos=ADP|SCONJ|PART]; 
      CPL -[1=comp,2=obj]-> *}
    without{CPL [ExtPos <> ADP|SCONJ|PART]}
    without{ H -[1 <> conj|mod|udep]-> CPL0}
    commands{d.Cpl= ""}
  }

% CPL is an adposition.
% Ex: SUD_French-GSD fr-ud-train_13709 - Des marées sont présentes[H] jusqu' à[CPL] Chicoutimi[OBJ].
% Ex: SUD_French-GSD fr-ud-train_02392 - Mais, c'est[H] un peu comme chez[CPL] John[OBJ] Cale.
  rule adp{
    pattern{
      d1: H -[Cpl=*]-> CPL; CPL[upos=ADP,lemma];
      d2:CPL -[1=comp,2=obj]-> OBJ}
    commands{
      add_edge d3: H -> OBJ; d3.label= d1.label;
      d3.Cpl= d1.Cpl + "_P-" + CPL.lemma;
      shift CPL ==> OBJ; del_edge d1; del_edge d2}
  }

% CPL is an adposition, which is coordinated
% CPL is a subordinating conjunction.
% Ex: SUD_French-GSD fr-ud-train_01392 - J'y retourne[H] dès que[CPL] je peux[OBJ] !
% Ex: SUD_French-GSD fr-ud-dev_00534 - ce n'est[H] même pas comme s'[CPL]ils avaient[OBJ] utilisé beaucoup de matériel
  rule sconj{
    pattern{
      d1: H -[Cpl=*]-> CPL; CPL[upos=SCONJ,lemma];
      d2: CPL -[1=comp,2=obj]-> OBJ}
    commands{
      add_edge d3: H -> OBJ; d3.label= d1.label;
      d3.Cpl= d1.Cpl + "_C-" + CPL.lemma;
      shift CPL ==> OBJ; del_edge d1; del_edge d2}
  }

% CPL is a subordinating conjunction and its object is an orphan dependent.
% Ex: Fracas_FR 177P1 : Jean a dit que Marie avait écrit un rapport et que Guillaume aussi.
  rule sconj_orphan{
    pattern{
      d1: H -[Cpl=*]-> CPL; CPL[upos=SCONJ,lemma];
      d2: CPL -[orphan]-> OBJ}
    commands{
      add_edge d3: H -> OBJ; d3.label= d1.label;
      d3.Cpl= d1.Cpl + "_C-" + CPL.lemma;
      shift CPL ==> OBJ; del_edge d1; del_edge d2}
  }

% CPL is a particle.
% Ex: SUD_English-PUD n01128025 -  we must[H] educate people on how to[CPL] Protect[OBJ] themselves better online.
  rule part{
    pattern{
      d1: H -[Cpl=*]-> CPL; CPL[upos=PART,lemma];
      d2: CPL -[1=comp,2=obj]-> OBJ}
    commands{
      add_edge d3: H -> OBJ; d3.label= d1.label;
      d3.Cpl= d1.Cpl + "_PT-" + CPL.lemma;
      shift CPL ==> OBJ; del_edge d1; del_edge d2}
  }

}


% =============================================================================================
% Introduction of the Voice feature for all verbs.
package voice{

% Active voice for verbs that are not past participles.
  rule active{
    pattern{V[upos=AUX|VERB,!Voice]}
    without{V[upos=VERB,VerbForm=Part,Tense=Past]}
    without{V -[comp@pass]-> CL; CL[upos=PRON]}
    commands{V.Voice=Act}
  }

% Passive voice for past participles.
  rule passive_part{
    pattern{V[upos=VERB, VerbForm=Part, Tense=Past, !Voice]}
    without{AUX -[1=comp,2=aux]-> V}
    commands{V.Voice=Pass}
  }

% Middle voice for verbs with a pronoun expressing the middle voice.
  rule middle{
    pattern{
      V[upos=VERB]; CL[upos=PRON];
      d:V -[comp@pass]-> CL}
    commands{V.Voice=Mid ; del_edge d}
  }

% All subjects of passive or midlle verbs are marked as passive subjects.
  rule subj_pass{
    pattern{V[upos=VERB, Voice=Mid|Pass]; d: V -[E:subj]-> SUBJ}
    commands{d.deep=pass}
  }

% All subjects of active verbs are marked as active subjects, if they were marked as passive subjects by error before.
% Ex: SUD_French-GSD fr-ud-test_00046 - En Arabie, on a l'impression que le fondamentalisme a toujours été là, qu'il[SUBJ] se maintient et n'aura[V] aucun mal à perdurer.
  rule subj_act{
    pattern{V[upos=VERB, Voice=Act]; d: V -[E:subj@pass]-> SUBJ}
    commands{add_edge V -[E:subj]-> SUBJ; del_edge d}
  }

}


% =============================================================================================
% Deep subjects are added.
package deep_subj{
% ===========================================
% Deep subjects of predicates CPRED controlled by the predicates PRED that govern them. 
package control_pred{
% The subject of the controlled predicate CPRED is the subject of the control predicate PRED.
%Ex: SUD_French-GSD fr-ud-train_05575 - On[SUBJ] aime[PRED] y flâner[CPRED].
%Ex: SUD_French-GSD fr-ud-dev_01286 - La réponse[SUBJ] semble[PRED] être[CPRED] oui.
%Ex: SUD_French-GSD fr-ud-train_02927 - À cause de cela, son avenir[SUBJ] semble[PRED] compromis[CPRED] à Bruxelles.
%Ex: SUD_French-GSD fr-ud-train_00259 - le tireur doit prendre[PRENDRE] garde à ne pas toucher[CPRED] la veste
  rule subj{
    pattern{
      PRED -[1=comp,deep=x]-> CPRED;
      PRED -[1=subj]-> SUBJ}
    without{CPRED -[1=subj]-> *}
    without{PRED -[1=subj,deep=expl]-> SUBJ}
    without{PRED -[comp:obj]-> OBJ; OBJ[upos=NOUN|NUM|PRON|PROPN|X]}
    commands{add_edge CPRED -[1=subj,enhanced=yes]-> SUBJ}
  }

% The subject of the controlled predicate CPRED, which is an adjective or adverb, is the subject of the control predicate PRED.
  rule subj_adj-adv{
    pattern{
      PRED -[1=comp,2=pred]-> CPRED; CPRED[upos=ADJ|ADV];
      PRED -[1=subj]-> SUBJ}
    without{CPRED -[1=subj]-> *}
    without{PRED -[1=subj,deep=expl]-> SUBJ}
    without{PRED -[comp:obj]-> OBJ; OBJ[upos=NOUN|NUM|PRON|PROPN|X]}
    commands{add_edge CPRED -[1=subj,enhanced=yes]-> SUBJ}
  }

% The subject of the controlled predicate CPRED, which is a past participle, is the passive subject of the control predicate PRED.
  rule subj_past-part{
    pattern{
      PRED -[1=comp,2=pred]-> CPRED; CPRED[upos=VERB,Tense=Past,VerbForm=Part];
      PRED -[1=subj]-> SUBJ}
    without{CPRED -[1=subj]-> *}
    without{PRED -[1=subj,deep=expl]-> SUBJ}
    without{PRED -[comp:obj]-> OBJ; OBJ[upos=NOUN|NUM|PRON|PROPN|X]}
    commands{add_edge CPRED -[1=subj,deep=pass, enhanced=yes]-> SUBJ}
  }
% The subject of the controlled predicate is the direct object of the control predicate.
%Ex: SUD_French-GSD fr-ud-train_12228 - Je trouve[PRED] cette attitude[OBJ] totalement inadmissible[CPRED] !
%Ex: SUD_French-GSD fr-ud-train_00581 - Pour autant les différents partis composant la majorité de gauche voient[PRED] leur poids[OBJ] modifié[CPRED].
  rule obj{
    pattern{
      PRED -[1=comp, deep=x]-> CPRED;
      PRED -[comp:obj]-> OBJ; OBJ[upos=NOUN|NUM|PRON|PROPN|X]}
    without{CPRED -[1=subj]-> *}
    commands{add_edge CPRED -[1=subj,enhanced=yes]-> OBJ}
  }

% The subject of the controlled predicate, which is an adjective, is the direct object of the control predicate.
  rule obj_adj{
    pattern{
      PRED -[1=comp, 2=pred]-> CPRED; CPRED[upos=ADJ];
      PRED -[comp:obj]-> OBJ; OBJ[upos=NOUN|NUM|PRON|PROPN|X]}
    without{CPRED -[1=subj]-> *}
    commands{add_edge CPRED -[1=subj,enhanced=yes]-> OBJ}
  }

}

% ===========================================
% Deep subjects of predicates that are modifiers of nominals or other predicates.
package mod_pred{

% If a participle PART is a modifier of a nominal N, its deep subject is N.
  rule mod_nom_part{
    pattern{
      PART[VerbForm=Part];
      N[upos=NOUN|NUM|PRON|PROPN|X];
      N -[1=mod]-> PART}
    without{PART -[1=subj]-> *}
    commands{add_edge PART -[E:subj]-> N}
  }


% If an adjective or adverb A is attributive of a nominal N, its subject is N.
  rule mod_nom_adj-adv{
    pattern{
      A[upos=ADJ|ADV];
      N[upos=NOUN|NUM|PRON|PROPN|X];
      N -[1=mod]-> A}
    without{A -[1=subj]-> N}
    without{A[Pred=No]}
    commands{add_edge A -[E:subj]-> N}
  }

% If a participle PART is a modifier of a predicate PRED, its deep subject is the subject SUBJ of PRED.
%Ex:  UD_French-GSD fr-ud-train_14101 - Elle[SUBJ se prononce[PRED] en quittant[DPRED] les toilettes.
%Ex:  UD_French-GSD fr-ud-train_00042 - Étant atteint[DPRED] du syndrome de Marfan, il est très grand[PRED] et mince.
%Ex: SUD_French-GSD fr-ud-train_13855 - Créé[DPRED] en janvier 1932, il[SUBJ] fut dissous[PRED] en 1964.
  rule mod_pred_part{
    pattern{
      PRED[upos=ADJ|ADV|AUX|VERB]; PART[VerbForm=Part];
      PRED -[1=mod,deep=x]-> PART;
      PRED -[1=subj]-> SUBJ}
    without{PART -[1=subj]-> *}
    commands{add_edge PART -[E:subj]-> SUBJ}
  }


% If an adjective ADJ is a modifier of a predicate PRED, its deep subject is the subject SUBJ of PRED.
%Ex: UD_French-GSD fr-ud-train_03936 - Très laide[DPRED], elle[SUBJ] provoquerait[PRED] l'effroi en la voyant.
  rule mod_pred_adj{
    pattern{
      PRED[upos=ADJ|ADV|AUX|VERB]; ADJ[upos=ADJ];
      PRED -[1=mod]-> ADJ;
      PRED -[1=subj]-> SUBJ}
    without{ADJ -[1=subj]-> *}
    without{ADJ[Pred=No]}
    commands{add_edge ADJ -[E:subj]-> SUBJ}
  }


% If a verb V is a modifier of a predicate PRED via a preposition PREP, its deep subject is the subject SUBJ of PRED.
% Ex : SUD_French-GSD fr-ud-train_02692 - Nous[SUBJ] avons retiré[PRED] l'application pour[PREP] régler[V] le problème.
%Ex: UD_French-GSD fr-ud-train_03936 - Très laide, elle[SUBJ] provoquerait[PRED] l'effroi en[PREP] la voyant[V].
  rule mod_pred_prep_verb{
    pattern{
      PRED[upos=ADJ|ADV|AUX|VERB]; PRED -[1=subj]-> SUBJ;
      PRED -[1=mod,deep=x]-> PREP; PREP[upos=ADP];
      PREP -[1=comp,2=obj]-> V; V[upos=AUX|VERB];
     }
    without{V -[1=subj]-> *}
    commands{add_edge V -[E:subj]-> SUBJ}
  }

% If an infinitive INF is the complement of an adverb thar is a modifier of a predicate PRED, its deep subject is the subject SUBJ of PRED.
% Ex : SUD_French-GSD fr-ud-dev_00674 - les cônes[SUBJ] sont tous orientés vers le tronc et peuvent rester 20 ans accrochées[PRED] au tronc avant[ADV] de tomber[INF].
%Ex: SUD_French-GSD fr-ud-test_00121 - Charles[NSUBJ] Mwando Nsimba a sollicité[PRED] un délai supplémentaire avant[ADV] de répondre[INF] aux préoccupations soulevées
  rule mod_pred_adv_inf{
    pattern{
      PRED[upos=ADJ|ADV|AUX|VERB]; ADV[upos=ADV];
      PRED -[1=mod,deep=x]-> ADV;
      INF[VerbForm=Inf]; ADV -[1=comp]-> INF;
      PRED -[1=subj]-> SUBJ}
    without{INF -[1=subj]-> *}
    commands{add_edge INF -[E:subj]-> SUBJ}
  }

}
% ===========================================
% Subjects of verbs in the passive voice are passive subjects.
rule pass_subj{
  pattern{d:V -[1=subj,!deep]-> SUBJ; V [Voice=Pass]}
  commands{d.deep=pass}
}

% ===========================================
% Strategy for computing deep subjects of predicates.
strat main{Seq(Onf(control_pred), Onf(mod_pred), Onf(pass_subj))}
}

% =============================================================================================
% The dependencies to reflexive pronouns are shifted to the subject of the corresponding verb.
rule refl_pron{
  pattern{
    d1: V -[^comp@expl|comp@pass]-> PRON;
    PRON[upos=PRON,Reflex=Yes]; V -[1=subj]-> SUBJ}
  commands{
    add_edge d2: V -> SUBJ; d2.label=d1.label; d2.enhanced=yes;
    shift_in PRON ==> SUBJ; del_edge d1}
}

% =============================================================================================
% Dependencies to relative pronouns are replaced by dependencies to their antecedents in relative clauses and by dependencies to the constituent in focus in cleft sentences.
package rel-pron{
% ===========================================
% Shift of dependencies targeting relative pronouns to their antecedent for relative clauses. The shifting is performed step by step by going up the chain of dependencies from the relative pronoun to the antecedent or the focus (in the following, we will call them both the antecedent). At each step, a MARK dependency from a point in the chain to the relative pronoun marks where we are. As soon as the antecedent is reached, the MARK relation is transformed into an ANT relation. A feature Mark=Yes is used to mark the visited nodes, in order to avoid loops. 
package mark_rel-pron-ant{

% A MARK relation is initiated between the relative pronoun and its governor.
  rule init_mark{
    pattern{ H -> PRO; PRO [PronType=Rel, !InIdiom]}
    without{* -[REF|MARK]-> PRO}
    without{H -[mod@relcl|comp:cleft|E:mod@relcl|E:comp:cleft]-> PRO}
    without{H -[1=conj]-> PRO}
    commands{add_edge H -[MARK]->PRO; H.Marked=Yes}
  }

% The MARK relation is shifted from its source to the governor of this source.
  rule shift_mark{
    pattern{d: M -[MARK]-> PRO; H -> M; H[!Marked]}
    without{H -[mod@relcl|comp:cleft|E:mod@relcl|E:comp:cleft]-> M}
    without{H -[1=comp,2=pred]-> M; H -[comp:cleft]-> *}
    without{M -[mod@relcl|E:mod@relcl]-> *}
    without{H -[1=conj]-> M ; H << PRO} 
    commands{del_edge d; add_edge H -[MARK]-> PRO; H.Marked=Yes}
  }

% The MARK relation is shifted from its source M to its governor H in a chain of coordinated elements.
% Ex: SUD_French-GSD fr-ud-train_08672 - c'est l'Évangile qui a fondé[H1] la liberté dans le monde, qui a déclaré[H] les hommes égaux devant Dieu, qui[PRO] a prêché[M] les idées et les œuvres de fraternité
  rule shift_mark_conj{
     pattern{
       d: M -[MARK]-> PRO; H -[1=conj]-> M;  H << PRO;H[!Marked];
       H1 -[1=conj]-> H}
     commands{add_edge H -[MARK]-> PRO; del_edge d}
   }
   
% The MARK relation has the head of a second conjunct in a coordination as its a target M and M precedes the relative pronoun PRO. If the first conjunct is a modifier of a nominal N, N is the antecedent of PRO in a relative clause.
% Ex: SUD_French-GSD fr-ud-train_07501 -  Accor organisera une journée[ANT] investisseurs le 13 septembre consacrée[H] à sa stratégie et au cours de laquelle[PRO] seront communiquées[REFN] les perspectives pour l'ensemble de l'année.
  rule shift_ref_relcl_coord{
    pattern{
      d:M -[MARK]-> PRO; H -[1=conj]-> M; H << PRO;
      ANT -[1=mod]-> H; ANT[upos=NOUN|NUM|PRON|PROPN|X]}
    commands{ add_edge ANT -[REF]-> PRO; del_edge d}
  }

% The MARK relation has the head of a second conjunct in a coordination as its a target M and M precedes the relative pronoun PRO. If the first conjunct is the head V of the dependent clause  in a cleft sentence, the head FOC of the focus is the antecedent of PRO.
% Ex: SUD_French-GSD fr-ud-train_08672 - c'est[V] l'Évangile qui a fondé[H] la liberté dans le monde, qui[PRO] a déclaré[M] les hommes égaux devant Dieu, qui a prêché les idées et les œuvres de fraternité
  rule shift_ref_cleft_coord{
    pattern{
      d:M -[MARK]-> PRO; H -[1=conj]-> M; H << PRO;
      V -[1=comp, 2=cleft]-> H; V -[1=comp,2=pred]-> FOC}
    commands{ add_edge FOC -[REF]-> PRO; del_edge d}
  }
    
% The MARK relation in a cleft sentence has the head of the dependent clause as its governor. The governor is shifted to the head of the focus.
  rule shift_ref_cleft{
    pattern{
      d:M -[MARK]-> PRO; H -[comp:cleft|E:comp:cleft]-> M;
      H -[1=comp,2=pred]-> FOC}
    commands{ add_edge FOC -[REF]-> PRO; del_edge d}
  }
  
% The MARK relation in a relative clause has the head of the clause as its governor. The governor is shifted to the antecedent.
  rule shift_ref_relcl{
    pattern{d:M -[MARK]-> PRO; ANT -[mod@relcl|E:mod@relcl]-> M}
    commands{ add_edge ANT -[REF]-> PRO; del_edge d}
  }
}

% ===========================================
% The antecedent ANT of the relative pronoun PRO is marked with the REF dependency and its governor in the relative clause becomes the governor of ANT.
package shift_rel-pron_ant{

% The gouvenor of the relative pronoun is not the head of the relative clause.
  rule simple_shift{
    pattern{ANT -[REF]-> PRO; d1: H -> PRO}
    commands{
      add_edge d2: H -> ANT; d2.label=d1.label; d2.enhanced=yes;
      del_edge d1}
  }

% The governor H of the REF relation is the head of a second conjunct in a coordination, and the first conjunct is a modifier of a nominal, which is the antecedent of the explored relative clause.
% Ex: SUD_French-GSD fr-ud-train_07501 - une journée[N] investisseurs le 13 septembre consacrée[H] à sa stratégie et au cours de laquelle[PRO] seront[REFN] communiquées les perspectives pour l'ensemble de l'année.
  rule coord_shift1{
    pattern{
      e:REFN -[REF]-> PRO; H -[1=conj]-> REFN;
      N -[1=mod|udep]-> H; N[upos=NOUN|NUM|PRON|PROPN|X];
      d1: H1 -> PRO}
    commands{
      add_edge d2: H1 -> N; d2.label=d1.label; d2.enhanced=yes;
      del_edge d1}
  }

% The governor H of the REF relation is the head of a second conjunct in a coordination, and the first conjunct is a modifier of a nominal, which is the antecedent of the explored relative clause.
% Ex: SUD_French-GSD fr-ud-train_00531 - ... l'État[N] français qui apporte[H] son soutien au Maroc et qui continue[REFN] d'opposer son veto 
  rule coord_shift2{
    pattern{
      e:REFN -[REF]-> PRO; H -[1=conj]-> REFN;
      N -[1=mod|udep]-> H; N[upos=NOUN|NUM|PRON|PROPN|X];
      d1: REFN -[^REF]-> PRO}
    commands{
      add_edge d2: REFN -> N; d2.label=d1.label; d2.enhanced=yes;
      del_edge d1}
  }

% All dependencies to a relative pronouns have been shifted to its antecedent.
  rule close_shift{
    pattern{e:REFN -[REF]-> PRO}
    without{* -[^ REF]-> PRO}
    commands{del_edge e}
  }

% There is no antecedent of the relative pronoun.
% Ex: SUD_French-GSD fr-ud-train_04478 - Son nom d'espèce, composé de daiyun et du suffixe latin, « qui[PRO] vit dans, qui habite »,lui a[REFN] été donné en référence au lieu de sa découverte.
  rule fail_shift{
    pattern{d:M -[MARK]-> PRO}
    commands{del_edge d}
  }

  rule del_mark{
    pattern{N[Marked=Yes]}
    commands{del_feat N.Marked}
  }
}
% ===========================================
% Strategy of treatment of the relative pronouns.
strat main{ Seq(Onf( mark_rel-pron-ant), Onf(shift_rel-pron_ant))}

}

% =============================================================================================
% Reditribution of syntactic functions
package redistrib_synt{
% Passive subjects for the passive or middle voice.
  rule pass_subj{
    pattern{d1: V -[1=subj, deep=pass]-> SUBJ}
    commands{add_edge d2: V -> SUBJ; d2.1=comp; d2.2=obj; del_edge d1}
  }

% Passive objects in impersonal constructions.
%Ex: SUD_French-GSD fr-ud-train_01519 - Il est interdit[V] d'écrire[OBJ] des commentaires contraires aux lois françaises.
  rule pass_obj{
    pattern{d: V -[1=comp, 2=obj, deep=pass]-> OBJ}
    commands{del_feat d.deep}
  }

% Agent complements of passive verbs.
  rule agent_obl{
    pattern{V[upos=VERB]; d: V -[1=comp, 2=obl, deep=agent]-> AGT}
    commands{add_edge V -[subj]-> AGT; del_edge d}
  }

% Objects of verbs in active impersonal constructions.
  rule agent_obj{
    pattern{ d: V -[1=comp, 2=obj, deep=agent]-> OBJ}
    without{V -[1=comp, 2=aux, deep=caus]-> *}
    commands{add_edge V -[subj]-> OBJ; del_edge d}
  }

% Agent complements of causative auxilairies.
  rule agent_obj-caus{
    pattern{ AUX -[1=comp, 2=aux, deep=caus]-> V; d: AUX -[1=comp, 2=obj|obl, deep=agent]-> OBJ}
    commands{ add_edge V -[subj]-> OBJ; del_edge d}
  }


% Expletive subjects are deleted
  rule impers_subj{
    pattern{d: V -[subj@expl|E:subj@expl]-> SUBJ}
    commands{del_edge d}
  }
}


% =============================================================================================
% The redistribution of cleft sentences is questionable because the copula head of the main clause can be modified, in particular by a negation.
% Ex: SUD_French-GSD fr-ud-train_13716 - Mais ce n'est pas la première fois qu'il y a une alerte à l'anthrax à Fribourg, selon lui.
% The sentence is not equivalent to : Mais il n'y a pas la première fois une alerte à l'anthrax à Fribourg, selon lui.
% We only propose to attach the constituent in focus to the verb of the dependent clause, which has this constituent as extracted complement.
package cleft_sent{
% ===========================================
% The constituent in focus FOC is not represented in the dependent clause, which is introduced with a subordinating conjunction. It is a complement of a predicate PRED in the dependent clause that has been extracted, which will be marked with a ARG relation from PRED to FOC.
package link_focus{

%The ARG relation is initialized from the head of the dependent clause to FOC.
  rule init_mark_arg{
    pattern{
      V[upos=AUX|VERB]; V -[1=comp,2=pred]-> FOC;
      d:V -[1=comp, 2=cleft, Cpl=*]-> VCOMP; d.Cpl=re"_C-.*"; VCOMP[upos=AUX|VERB]}
    without{* -[ARG]-> FOC}
    commands{ add_edge VCOMP -[ARG]-> FOC}
  }

% The ARG relation is shifted from a verb VCOMP to its direct object VCOMP1, which is also a verb.
  rule shift_mark_arg{
    pattern{ d:VCOMP -[ARG]-> FOC; VCOMP -[1=comp,2=obj|pred]-> VCOMP1; VCOMP1[upos=AUX|VERB]}
    without{VCOMP -[1=conj]-> VCOMP2}
    commands{add_edge VCOMP1 -[ARG]-> FOC; del_edge d}
  }

% There is an ARG relation from a focus FOC to a verb VCOMP and VCOMP has a conjunct VCOMP1 in a coordination. An ARG relation is added from VCOMP1 to FOC.
  rule shift_mark_arg_coord1{
    pattern{ d:VCOMP -[ARG]-> FOC; VCOMP -[1=conj]-> VCOMP1; VCOMP1[upos=AUX|VERB]}
    without{VCOMP1 -[ARG]-> FOC}
    commands{add_edge VCOMP1 -[ARG]-> FOC; VCOMP1.Mark=Yes}
  }
  
% There is an ARG relation from a focus FOC to a verb VCOMP and VCOMP has a conjunct VCOMP2 in a coordination. The ARG relation has been added from all conjuncts of VCOMP to FOC.The ARG relation is shifted from a verb VCOMP to its direct object VCOMP1, which is also a verb.
  rule shift_mark_arg_coord2{
    pattern{
      d:VCOMP -[ARG]-> FOC; VCOMP -[1=comp,2=obj|pred]-> VCOMP1; VCOMP1[upos=AUX|VERB];
      VCOMP -[1=conj]-> VCOMP2; VCOMP2[Mark=Yes]}
    without{VCOMP -[1=conj]-> VCOMP2; VCOMP2[!Mark]}
    commands{add_edge VCOMP1 -[ARG]-> FOC; del_edge d}
  }


}
% ===========================================
% The ARG relation is replaced by a complement relation between the predicate governor of ARG and the head FOC of the focus dependent on ARG.
package label_focus_dep{

% The constituent in focus is a direct object of the verb that governs it in the REF dependency.
  rule obj{
    pattern{
      d:VCOMP -[ARG]-> FOC; V -[1=comp, 2=pred, !Cpl]-> FOC;
      FOC[upos=NOUN|NUM|PRON|PROPN|X]}
    without{VCOMP -[1=comp,2=obj]-> VCOMP1; VCOMP1[upos=VERB]}
    commands{add_edge VCOMP-[E:comp:obj]-> FOC; del_edge d}
   }

% The constituent in focus is introduced by a preposition; therefore, it is an indirect complement of the verb that governs it in the REF dependency.
  rule udep{
    pattern{d1:VCOMP -[ARG]-> FOC; d2:V -[1=comp, 2=pred, Cpl=*]-> FOC}
    without{VCOMP -[1=comp,2=obj]-> VCOMP1; VCOMP1[upos=VERB]}
    commands{add_edge d3: VCOMP-> FOC; d3.1=udep;d3.Cpl=d2.Cpl; del_edge d1}
   }
 
% The constituent in focus is an adverb; therefore, it is an indirect complement of the verb that governs it in the REF dependency.
  rule udep_adv{
    pattern{d:VCOMP -[ARG]-> FOC;d1:V -[1=comp,2=pred, !Cpl]-> FOC; FOC[upos= ADV]}
    without{VCOMP -[1=comp,2=obj]-> VCOMP1; VCOMP1[upos=VERB]}
    commands{add_edge VCOMP -[E:udep]-> FOC; del_edge d}
  }
}


strat main{Seq(Iter(link_focus), Onf(label_focus_dep))}

}

% =============================================================================================
% Treatment of the clitic pronouns or particles that change the meaning of verbs.
package clit-part_verb{
% Clitic pronouns before the verb.
  rule clit_pre{
    pattern{
      V[upos=VERB,lemma]; CL[upos=PRON];
      d:V -[comp@expl]-> CL; V >> CL}
    without{V -[comp@expl]-> CL1; V >> CL1; CL1 >> CL}
    commands{
      V.lemma= CL.lemma + "_" + V.lemma ;
      V.form=  CL.form + "_" + V.form ;del_edge d}
  }

% Clitic pronouns after the verb.
  rule clit_post{
    pattern{
      V[upos=VERB,lemma]; CL[upos=PRON];
      d:V -[comp@expl]-> CL; V << CL}
    without{V -[comp@expl]-> CL1; V << CL1; CL1 << CL}
    commands{
      V.lemma= CL.lemma + "_" + V.lemma ;
      V.form=  V.form + "_" + CL.form ;del_edge d}
  }
%Particles
  rule part{
    pattern{
      V[upos=VERB,lemma]; P[upos=ADP|PART];
      d:V -[compound@prt]-> P; V << P}
    commands{
      V.lemma= V.lemma + "_" + P.lemma;
      V.form=  V.form + "_" + P.form ;del_edge d}
  }

}

% =============================================================================================
% All isolated tokens are deleted. Wordform and textform features are deleted.
package del_isolated_token{
  rule del_tok{
    pattern{N[upos]}
    without{ * -> N}
    commands{del_node N}
  }

  rule del_wordform{ pattern{N[wordform]} commands{del_feat N.wordform}}
  
  rule del_textform{ pattern{N[textform]} commands{del_feat N.textform}}
}

% =============================================================================================
% Strategies
% =============================================================================================
% Strategy that converts a SUD annotation into an DUD annotation.
strat main{
  Seq(
    Onf(flat),
    idioms.main,
    Onf(coord_gov),
    Onf(coord_dep), % "coord_dep" must precede "del_prep" because prepositional phrases may depend on a coordination. Ex: SUD_French-GSD fr-ud-test_00001 -
    Onf(del_cpl),
    Onf(voice),
    Iter(deep_subj.main),% The strategy must be iterated because of examples such as: SUD_French-GSD fr-ud-test_00070 - De nombreux Marocains le pensent en n'hésitant pas à l'accuser
    Onf(refl_pron),
    rel-pron.main,
    Onf(coord_dep), % Justification of this second application of the coord_dep package: ex SUD_French-GSD fr-ud-dev_01331 - ...de nombreux journaux libertaires et antimilitaristes, ...
    Iter(deep_subj.main), %  Justification of this second application of the deep_subj.main strategy: ex SUD_French-GSD fr-ud-test_00124 -  les citoyens + Facebookant et Tweetant + avec passion, tout en participant en nombre record aux meetings traditionnels"
    Onf(redistrib_synt),
    cleft_sent.main,
    Onf(clit-part_verb), %This package follows the package related to the treatment of auxiliaries because of the final form of the verbs.
    Onf(del_isolated_token)
  )
}
