% =============================================================================================
include "SUD_to_DSUD.grs"

% =============================================================================================
% Addition of a Mood and Tense feature for all verbs.
package FR_mood_tense{
  rule inf{
   pattern{V[upos=AUX|VERB, VerbForm=Inf, !Mood, !Tense]}
   commands{V.Mood=Inf; V.Tense=Pres}
  }

  rule part{
   pattern{V[upos=AUX|VERB, VerbForm=Part, !Mood, Tense]}
   commands{V.Mood=Part}
  }

}
% =============================================================================================
% Compound temporal expressions.
rule FR_comp_temp{
  pattern{
    T1[upos=NOUN,lemma=lex.noun];
    T1 -[det]-> D; D[upos=NUM];
    d:T1 -[conj]-> T2}
  commands{add_edge T1 -[mod]-> T2; del_edge d}
}
#BEGIN	lex
noun
%-------
an
année
heure
jour
mois
semaine
#END

% =============================================================================================
% For pronouns representing indirect complements, corresponding prepositions are added to the dependencies targeting them.
rule FR_pron_prep{
  pattern{
    PRO[upos=ADV|PRON,lemma=lex.pron];
    d: H -[comp:obl|E:comp:obl|mod|E:mod|udep|E:udep]-> PRO}
  commands{d.Cpl= "_P-"+lex.prep}
}
#BEGIN	lex
pron	prep
%-----------
dont	de
en	de
lui	à
n'_importe_où	à
où	loc
se	à
y	à
#END


% =============================================================================================
% Auxiliaries are replaced by features assigned to the main verbs and their outgoing dependencies are moved to the main verb.
% Causative auxiliaries are excluded from the treatement applied to all auxiliaries because they behave like ordinary predicates. For example, we have to distinguish between " Il ne la fait pas abandonner" and "Il la fait ne pas abandonner".
% This process is performed by going up auxiliary chains from the end to the beginning recursively:
%   1) init_mark: All auxiliaries at the end of a chain is marked.
%   2) feat: The function of each marked auxiliary is translated into features of its object.
%   3) dupl_rel: All governors and dependents of each marked auxiliary are shifted to their object.
%   4) del_aux-dep: All dependencies from marked auxiliaries are deleted.
%   5) del_mark: All Mark features are deleted.
% The rules use the hypothesis that a verb is the object of one auxiliary at most.
package FR_aux{

% ===========================================
% Marking the auxiliaries that are not objects of other auxiliaries, nor causative auxiliaries.
  rule init_mark_aux{
      pattern{AUX[!Mark]; AUX -[1=comp,2=aux]-> V}
      without{AUX -[deep=caus]-> V}
      without{V -[1=comp, 2=aux, deep <> caus]-> *}
      commands{AUX.Mark=Aux}
  }

  rule init_mark_verb{
    pattern{AUX[Mark=Aux]; V[!Mark]; AUX -[1=comp,2=aux]-> V}
    commands{V.Mark=Obj}
  }

% ===========================================
% The function of each marked auxiliary is translated into features of its object.
package feat{
% Tense auxiliaries.
  rule aux-tense{
    pattern{
      AUX[upos=AUX, Mood=lex.mood, Tense=lex.auxt, VerbForm];
      AUX -[1=comp, 2=aux, deep=tense]-> V;
      V[upos=AUX|VERB, Mood=Part, Tense=Past, Mark=Obj]}
    commands{
      V.Mood=AUX.Mood; V.Tense=lex.verbt; V.VerbForm=AUX.VerbForm}
  }
#BEGIN	lex
mood	auxt	verbt
%-------------------
Cnd	Pres	Past
Imp	Pres	PresPerfect
Ind	Pres	PresPerfect
Ind	Imp	PastPerfect
Ind	Fut	FutPerfect
Ind	Past	Pastperfect
Inf	Pres	PresPerfect
Part	Pres	PresPerfect
Sub	Pres	Past
Sub	Imp	Pastperfect
#END  


% Passive auxiliaries.
  rule aux-pass{
    pattern{
      AUX[upos=AUX,Mood, Tense, VerbForm];
      AUX -[1=comp, 2=aux, deep=pass]-> V;
      V[upos=AUX|VERB, Mood=Part, Tense=Past, Mark=Obj, !Voice]}
    commands{
     V.Mood=AUX.Mood; V.Tense=AUX.Tense;V.VerbForm=AUX.VerbForm; V.Voice=Pass}
  }

%Passive voice for infinitives used with "se faire".
% Ex: SUD_French-GSD fr-ud-test_00058 - Sidi M'hamed Deddeche et Amgid Sidi Ahmed ... s'étaient-ils fait[AUX] arrêter[V] mercredi dernier ...
  rule aux-pass-faire{
    pattern{
      AUX[upos=AUX, lemma=faire]; AUX -[1=comp, 2=aux, deep=pass]-> V;
      V[upos=VERB, VerbForm=Inf, Mark=Obj, !Voice];
      CL[upos=PRON,lemma=se]; d:AUX -[comp@pass]-> CL}
    commands{
      V.Mood=AUX.Mood; V.Tense=AUX.Tense;V.VerbForm=AUX.VerbForm;
      V.Voice=Pass ;del_edge d}
  }

}


 % ===========================================
% Dependencies attached to auxiliaries are duplicated to their object.
package dupl_rel{
% Dependents of auxiliaries, which are not modifiers
  rule dep{
    pattern{
      AUX -[1=comp,2=aux]-> V;V[Mark=Obj];
      d1: AUX -[1<>mod]-> D}
    without{ d1.1=comp; d1.2=aux}
    without{V -> D}
    commands{add_edge d2: V -> D; d2.label=d1.label}
  }

% Modifiers of auxiliaries are duplicated to their object and their dependency is marked MOD:CL to express that they are clause modifiers.
  rule modif{
    pattern{
      AUX -[1=comp,2=aux]-> V;V[Mark=Obj];
      d1: AUX -[1=mod,!2]-> MOD}
    without{V -> MOD}
    commands{add_edge d2: V -> MOD; d2.label=d1.label; d2.2=cl}
  }

% The governors of the auxiliaries become the gouvernors of their object.
% Ex: SUD_French-GSD fr-ud-train_00545 - le championnat a été[AUX] financé et organisé[V] par la Seattle Chess Foundation 
  rule gov{
    pattern{d1:H -> AUX; AUX -[1=comp,2=aux]-> V;AUX[Mark=Aux];V[Mark=Obj]}
    without{V1 -[1=conj]-> V; d1.1 <>comp}% The governor of a coordination is not propagated to all conjuncts, except if it is an auxiliary.
    without{V1 -[1=conj]-> V; d1.2 <>aux}
    without{H -> V}
    commands{add_edge d2: H -> V; d2.label=d1.label}
  }
}

% ===========================================
% All dependencies attached to auxiliaries are deleted.
package del_aux-dep{
% Main dependency from the auxiliary to its object, when the auxiliary is on the left of the object.
  rule main_left{
    pattern{d:AUX -[1=comp,2=aux]-> V; AUX[Mark=Aux]; V[Mark=Obj]; AUX << V}
    commands{V.form= AUX.form + "_" + V.form; del_edge d}
  }

% Main dependency from the auxiliary to its object, when the auxiliary is on the right of the object.
  rule main_right{
    pattern{d:AUX -[1=comp,2=aux]-> V; AUX[Mark=Aux]; V[Mark=Obj]; AUX >> V}
    commands{V.form=  V.form + "_" + AUX.form ; del_edge d}
  }

% Side dpendencies of the auxiliary.
  rule side_dep{
    pattern{d:AUX -> D; AUX[Mark=Aux]; D[!Mark]}
    commands{ del_edge d}
  }

% Side governors of the auxiliary.
  rule side_gov{
    pattern{d:H -> AUX; AUX[Mark=Aux]}
    commands{ del_edge d}
  }
}


% ===========================================
% All Mark features are deleted. Mark features must be deleted after aux dependencies, because one auxiliary can have several objects.
% Ex: SUD_French-GSD fr-ud-train_00848 - Il est[V] développé et édité par Namco.
rule del_mark{
  pattern{V[Mark]}
  commands{del_feat V.Mark}
}
  

% ===========================================
% Strategy for integrating auxiliaries into full verbs.
strat main{
  Iter(
    Seq(
      init_mark_aux, Onf(init_mark_verb),feat, Onf(dupl_rel),
      Onf(del_aux-dep), Onf(del_mark)))}

}

% =============================================================================================
% Introduction of the Voice feature for French verbs.
package FR_voice{

% Active voice for past participles of non-passivable verbs.
  rule active_part(lex from "lexicons/fr_passivable_verbs.lp"){
    pattern{V[upos=VERB, VerbForm=Part, Tense=Past, !Voice]}
    without{V[lemma=lex.verb]}
    without{AUX -[1=comp,2=aux]-> V}
    commands{V.Voice=Act}
  }


}

% =============================================================================================
% Predicates that are complement of another verb and the subject of which is controlled by the main verb.
package FR_deep_subj_controlled_pred{

% An infinitive INF is a direct object of a verb V (introduced with the prepostion "de") and its deep subject is the oblique argument N of V introduced with the preposition "à".
  rule obl(lex from "lexicons/fr_verbs_a_noun_de_inf.lp"){
    pattern{
      V[upos=VERB,lemma=lex.verb]; INF[upos=AUX|VERB,VerbForm=Inf];
      d1:V -[1=comp,2=obj,Cpl=*]-> INF; d1.Cpl ="_P-de";
      d2:V -[1=comp, 2=obl, Cpl=*]-> N; d2.Cpl= "_P-à";  N[upos=NOUN|NUM|PRON|PROPN|X]}
    without{ INF -[1=subj]-> *}
    commands{add_edge INF -[E:subj]-> N}
  }

% An infinitive INF is an indirect object of a verb V, which has also a direct object and the deep subject of INF is the subject of V.
  rule subj(lex from "lexicons/fr_verbs_obj_prep_inf.lp"){
    pattern{
      V[upos=VERB,lemma=lex.verb];  INF[upos=AUX|VERB,VerbForm=Inf];
      d:V -[1=comp,2=obl,Cpl=*,deep=x]-> INF; d.Cpl = lex.prep;
      V -[1=comp, 2=obj]-> *; V -[1=subj]-> SUBJ}
    without{ INF -[1=subj]-> *}
    commands{add_edge INF -[E:subj]-> SUBJ}
  }

% The direct object OBJ of a light verb V  has an indirect complement, which is an infinitive INF, and the deep subject of INF is the subject of V.
% Ex: SUD_French-GSD fr-ud-train_08072 - J'[SUBJ] aurais[V] tendance[OBJ] à faire[INF] comme mon arrière-grand-père avec l'art
  rule subj_light-verb{
    pattern{
     V -[1=comp,2=obj,deep=lvc]-> OBJ;
     OBJ -[1=comp,2=obl,deep=x]-> INF;  INF[upos=AUX|VERB,VerbForm=Inf];
     V -[1=subj]-> SUBJ}
    without{ INF -[1=subj]-> *}
    commands{add_edge INF -[E:subj]-> SUBJ}
  }


}

% =============================================================================================
% Nominals with a complement infinitive introduced with the preposition "à". The nominal is the object of the infinitive. 
rule FR_deep_obj_nom_a_inf{
  pattern{
    NOUN -[1=udep]-> A; NOUN[upos=NOUN|PRON];
    A[upos=ADP, lemma="à", !Idiom];
    A -[comp:obj]-> INF; INF[VerbForm=Inf]}
  without{INF -[1=comp,2=obj]-> *}
  commands{add_edge INF -[E:comp:obj]-> NOUN}
}
% =============================================================================================
% Adjectives and adverbs that are not predicates and have no subject.
rule FR_nonpred_adj-adv{
  pattern{A[upos=ADJ|ADV,lemma=lex.lemma, !Pred]; * -[mod|mod:cl]-> A}
  commands{A.Pred=No}
}
#BEGIN lex
lemma
%---
alors
aussi
autre
au_moins
au_plus
Au_moins
Au_plus
de_moins
de_plus
déjà
ensemble
ensuite
également
moins
plus
premier
seul
seulement
tout
très
#END

% =============================================================================================
% Strategies
% =============================================================================================
strat FR_main{
  Seq(
    Onf(FR_mood_tense),
    Onf(flat),
    idioms.main,
    Onf(FR_comp_temp),
    Onf(coord_gov),
    Onf(coord_dep),
    Onf(del_cpl),
    Onf(FR_pron_prep),
    FR_aux.main, % This package must precede the package FR_deep_subj_controlled_pred because of compound verbs. Ex: SUD_French-GSD fr-ud-test_00042 - La justice française n'a fait qu'obéir et se déjuger.
    Onf(FR_voice),
    Onf(voice),
    Onf(FR_deep_subj_controlled_pred),
    Onf(FR_deep_obj_nom_a_inf),
    %Onf(FR_nonpred_adj-adv),
    Iter(deep_subj.main),
    Onf(refl_pron),
    rel-pron.main,
    Onf(coord_dep),
    Iter(deep_subj.main),
    Onf(redistrib_synt),
    cleft_sent.main,
    Onf(clit-part_verb),
    Onf(del_isolated_token)
  )
}