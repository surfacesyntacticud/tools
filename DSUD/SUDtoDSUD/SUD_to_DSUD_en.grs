% Conversion of SUD annotations to DSUD annotations of English corpora.
% =============================================================================================
include "SUD_to_DSUD.grs"


% =============================================================================================
% Addition and correction of verb features.
package EN_verb_feat{
% Auxiliary features
  rule aux(lex from "lexicons/en_modal_aux.lp"){
    pattern{V[upos=AUX, VerbForm=Fin, !Tense, form=lex.form]}
    commands{V.wordform=lex.wform; V.lemma=lex.lemma; V.Tense=lex.tense}
  }

  rule will{
    pattern{AUX[wordform=will,!Mood]}
    commands{AUX.Mood=Ind}
  }

% Infinitives
  rule inf{
    pattern{V[upos=AUX|VERB, VerbForm=Inf, !Mood, !Tense]}
    commands{V.Mood=Inf; V.Tense=Pres}
  }

% Participles
  rule part{
    pattern{V[upos=AUX|VERB, VerbForm=Part, !Mood]}
    commands{V.Mood=Part}
  }

}

% =============================================================================================
% For pronouns representing indirect complements, corresponding prepositions are added to the dependencies targeting them.
rule EN_pron_prep{
  pattern{
    PRO[upos=ADV|PRON,lemma=lex.pron];
    d: H -[comp:obl|E:comp:obl|mod|E:mod|udep|E:udep]-> PRO}
  commands{d.Cpl= "_P-"+lex.prep}
}
#BEGIN	lex
pron	prep
%-----------
anyone	to
he	to
herself	to
himself	to
it	to
I	to
myself	to
she	to
someone	to
themselves	to
they	to
us	to
we	to
which	to
you	to
yourself	to
#END


% =============================================================================================
% Auxiliaries are replaced by features assigned to the main verbs and their outgoing dependencies are moved to the main verb.
% This process is performed by going up auxiliary chains from the end to the beginning recursively:
%   1) init_mark: All auxiliaries at the end of a chain is marked.
%   2) feat: The function of each marked auxiliary is translated into features of its object.
%   3) dupl_rel: All governors and dependents of each marked auxiliary are shifted to their object.
%   4) del_aux-dep: All dependencies from marked auxiliaries are deleted.
%   5) del_mark: All Mark features are deleted.
% The rules use the hypothesis that a verb is the object of one auxiliary at most.
package EN_aux{

% ===========================================
% Marking the auxiliaries that are not objects of other auxiliaries.
  rule init_mark_aux{
      pattern{AUX[!Mark]; AUX -[1=comp,2=aux]-> V}
      without{AUX -[deep=caus]-> V}
      without{V -[1=comp, 2=aux, deep <> caus]-> *}
      commands{AUX.Mark=Aux}
  }

  rule init_mark_verb{
    pattern{AUX[Mark=Aux]; V[!Mark]; AUX -[1=comp,2=aux]-> V}
    commands{V.Mark=Obj}
  }

% ===========================================
% The function of each marked auxiliary is translated into features of its object.
package feat{

%Tense auxiliaries.
% When an auxiliary is ambiguous, we choose the most frequent use: indicative future for will + inf.
% Ex: UD_English-PUD n02022015 - One doesn't know in which way both dramatists would[AUX] (have worked)[V] together.
% Ex: UD_English-EWT answers-20111108105749AABv7vx_ans-0016 - he will[AUX] (have made)[V] it his,
% Ex: UD_English-PUD n01133014 - they will[AUX] (be commercializing)[V] their electric motorcycle
% Ex: UD_English-EWT answers-20111106032810AA43zpY_ans-0003 - You would[AUX] (be violating)[V] the law. 
  rule tense{
    pattern{
      AUX[upos=AUX, lemma=lex.aux, Mood, Tense=lex.tensea, VerbForm, Mark=Aux];
      AUX -[1=comp, 2=aux]-> V;
      V[upos=AUX|VERB, VerbForm=lex.vfv, Tense=lex.tensev,Mark=Obj]}
    commands{V.Mood=AUX.Mood;V.Tense=lex.tense; V.VerbForm=AUX.VerbForm}
  }
#BEGIN	lex
aux	tensea	vfv	tensev	tense
%--------------------------------------------
do	Pres	Inf	Pres	Pres
do	Past	Inf	Pres	Past
have	Pres	Part	Past	PresPerfect
have	Past	Part	Past	PastPerfect
will	Pres	Inf	Pres	Fut
will	Pres	Inf	PresPerfect	FutPerfect
#END  

  
% Progressive auxiliary "be".
% Ex: SUD_English-PUD n01133014 - they will be[AUX] commercializing[V] their electric motorcycle
% Ex: SUD_English-EWT answers-20111106032810AA43zpY_ans-0003 - You would be[AUX] violating[V] the law. 
  rule progressive{
    pattern{
      AUX[upos=AUX, lemma=be, Mood, Tense, VerbForm];
      AUX -[1=comp, 2=aux]-> V; V[upos=AUX|VERB, !Aspect, VerbForm=Part, Tense=Pres, Mark=Obj]}
    commands{V.Mood=AUX.Mood;V.Tense=AUX.Tense; V.Aspect=Prog; V.VerbForm=AUX.VerbForm}
  }

% Modal auxiliaries. A Modal feature expresses the modality as the wordform of the used auxiliary.
  rule modal(lex from "lexicons/en_modal_aux.lp"){
    pattern{
      AUX[upos=AUX, wordform=lex.wform, VerbForm];
      AUX -[1=comp, 2=aux]-> V; V[upos=AUX|VERB, Mood, VerbForm=Inf, !Modal, Mark=Obj]}
    without{AUX[wordform=will]}
    commands{V.Modal=AUX.wordform; V.VerbForm=AUX.VerbForm; del_feat V.Mood}
  }

% Passive auxiliaries.
  rule passive{
    pattern{
      AUX[upos=AUX, Mood, Tense, VerbForm];
      AUX -[comp:aux@pass]-> V; V[Mark=Obj, !Voice]}
    commands{V.Mood=AUX.Mood;V.Tense=AUX.Tense;V.Voice=Pass; V.VerbForm=AUX.VerbForm}
  }

%Passive gerundives
  rule passive_ger{
    pattern{
      AUX[upos=AUX, VerbForm=Ger];
      AUX -[comp:aux@pass]-> V; V[Mark=Obj, !Voice]}
    commands{V.Voice=Pass; V.VerbForm=AUX.VerbForm }
  }
}

 % ===========================================
% Dependencies attached to auxiliaries are duplicated to their object.
package dupl_rel{
% Dependents of auxiliaries, which are not modifiers
  rule dep{
    pattern{
      AUX -[1=comp,2=aux]-> V;AUX[Mark=Aux];V[Mark=Obj];
      d1: AUX -[1<>mod]-> D}
    without{ d1.1=comp; d1.2=aux}
    without{V -> D}
    commands{add_edge d2: V -> D; d2.label=d1.label; d2.enhanced= yes}
  }

% Modifiers of auxiliaries are duplicated to their object and their dependency is marked MOD:CL to express that they are clause modifiers.
  rule modif{
    pattern{
      AUX -[1=comp,2=aux]-> V;AUX[Mark=Aux];V[Mark=Obj];
      d1: AUX -[1=mod,!2]-> MOD}
    without{V -> MOD}
    commands{add_edge d2: V -> MOD; d2.label=d1.label; d2.2=cl; d2.enhanced= yes}
  }

% The governors of the auxiliaries become the gouvernors of their object.
% Ex: SUD_English-PUD n01024013 - rocket seeds can be[AUX] flown and stored[V] on the International Space Station
  rule gov{
    pattern{d1:H -> AUX; AUX -[1=comp,2=aux]-> V;AUX[Mark=Aux];V[Mark=Obj]}
    without{V1 -[1=conj]-> V; d1.1 <>comp}% The governor of a coordination is not propagated to all conjuncts, except if it is an auxiliary.
    without{V1 -[1=conj]-> V; d1.2 <>aux}
    without{H -> V}
    commands{add_edge d2: H -> V; d2.label=d1.label; d2.enhanced=yes}
  }
}

% ===========================================
% All dependencies attached to auxiliaries are deleted.
package del_aux-dep{
% Main dependency from the auxiliary to its object, when the auxiliary is on the left of the object.
  rule main_left{
    pattern{d:AUX -[1=comp,2=aux]-> V; AUX[Mark=Aux]; V[Mark=Obj]; AUX << V}
    commands{V.form= AUX.form + "_" + V.form; del_edge d}
  }

% Main dependency from the auxiliary to its object, when the auxiliary is on the right of the object.
  rule main_right{
    pattern{d:AUX -[1=comp,2=aux]-> V; AUX[Mark=Aux]; V[Mark=Obj]; AUX >> V}
    commands{V.form=  V.form + "_" + AUX.form ; del_edge d}
  }

% Side dpendencies of the auxiliary.
  rule side_dep{
    pattern{d:AUX -> D; AUX[Mark=Aux]; D[!Mark]}
    commands{ del_edge d}
  }

% Side governors of the auxiliary.
  rule side_gov{
    pattern{d:H -> AUX; AUX[Mark=Aux]}
    commands{ del_edge d}
  }

}

% ===========================================
% All Mark features are deleted. Mark features must be deleted after aux dependencies, because one auxiliary can have several objects.
% Ex: SUD_English-PUD w01057041 - he would[V] either die of old age after an uneventful life, or die young in a battlefield and gain immortality through poetry
rule del_mark{
  pattern{V[Mark]}
  commands{del_feat V.Mark}
}

% ===========================================
% Strategy for integrating auxiliaries into full verbs.
strat main{
  Iter(
    Seq(
      init_mark_aux, Onf(init_mark_verb),feat, Onf(dupl_rel),
      Onf(del_aux-dep), Onf(del_mark)))}
  
}


% =============================================================================================
% Some expletives are deleted
rule EN_clit_verb{
  pattern{V[upos=AUX|VERB]; d:V -[comp@expl]-> CLIT; CLIT[upos=PRON,lemma=it]}
  commands{del_edge d}
}

% =============================================================================================
% Strategies
% =============================================================================================
strat EN_main{
  Seq(
    Onf(EN_verb_feat),
    Onf(flat),
    idioms.main,
    Onf(coord_gov),
    Onf(coord_dep),
    Onf(del_cpl),
    Onf(del_coord-conj),
    Onf(EN_pron_prep),
    EN_aux.main,
    %Onf(FR_voice),
    Onf(voice),
    %Onf(FR_deep_subj_controlled_pred),
    deep_subj.main,
    Onf(refl_pron),
    %Onf(FR_subj_past-part),
    rel-pron.main,
    Onf(coord_dep),
    Onf(redistrib_synt),
    cleft_sent.main,
    Onf(EN_clit_verb),
    Onf(clit-part_verb),
    Onf(del_isolated_token)
  )
}
